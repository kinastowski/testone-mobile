"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-native-gesture-handler";
exports.ids = ["vendor-chunks/react-native-gesture-handler"];
exports.modules = {

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ActionType = void 0;\nconst ActionType = {\n    REANIMATED_WORKLET: 1,\n    NATIVE_ANIMATED_EVENT: 2,\n    JS_FUNCTION_OLD_API: 3,\n    JS_FUNCTION_NEW_API: 4\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.ActionType = ActionType; //# sourceMappingURL=ActionType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvQWN0aW9uVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRSxhQUFhO0lBQ2pCQyxvQkFBb0I7SUFDcEJDLHVCQUF1QjtJQUN2QkMscUJBQXFCO0lBQ3JCQyxxQkFBcUI7QUFDdkIsR0FBRyw4SEFBOEg7QUFFaklOLGtCQUFrQixHQUFHRSxZQUNyQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvQWN0aW9uVHlwZS5qcz8zYmZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BY3Rpb25UeXBlID0gdm9pZCAwO1xuY29uc3QgQWN0aW9uVHlwZSA9IHtcbiAgUkVBTklNQVRFRF9XT1JLTEVUOiAxLFxuICBOQVRJVkVfQU5JTUFURURfRVZFTlQ6IDIsXG4gIEpTX0ZVTkNUSU9OX09MRF9BUEk6IDMsXG4gIEpTX0ZVTkNUSU9OX05FV19BUEk6IDRcbn07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IGl0IGNhbiBiZSB1c2VkIGFzIGEgdHlwZSBhbmQgYXMgYSB2YWx1ZVxuXG5leHBvcnRzLkFjdGlvblR5cGUgPSBBY3Rpb25UeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uVHlwZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBY3Rpb25UeXBlIiwiUkVBTklNQVRFRF9XT1JLTEVUIiwiTkFUSVZFX0FOSU1BVEVEX0VWRU5UIiwiSlNfRlVOQ1RJT05fT0xEX0FQSSIsIkpTX0ZVTkNUSU9OX05FV19BUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Directions = void 0;\nconst Directions = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.Directions = Directions; //# sourceMappingURL=Directions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRGlyZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRSxhQUFhO0lBQ2pCQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsSUFBSTtJQUNKQyxNQUFNO0FBQ1IsR0FBRyw4SEFBOEg7QUFFaklOLGtCQUFrQixHQUFHRSxZQUNyQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRGlyZWN0aW9ucy5qcz9jM2NmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EaXJlY3Rpb25zID0gdm9pZCAwO1xuY29uc3QgRGlyZWN0aW9ucyA9IHtcbiAgUklHSFQ6IDEsXG4gIExFRlQ6IDIsXG4gIFVQOiA0LFxuICBET1dOOiA4XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBpdCBjYW4gYmUgdXNlZCBhcyBhIHR5cGUgYW5kIGFzIGEgdmFsdWVcblxuZXhwb3J0cy5EaXJlY3Rpb25zID0gRGlyZWN0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpcmVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGlyZWN0aW9ucyIsIlJJR0hUIiwiTEVGVCIsIlVQIiwiRE9XTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.enableExperimentalWebImplementation = enableExperimentalWebImplementation;\nexports.isExperimentalWebImplementationEnabled = isExperimentalWebImplementationEnabled;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nlet EXPERIMENTAL_WEB_IMPLEMENTATION = false;\nlet getWasCalled = false;\nfunction enableExperimentalWebImplementation(shouldEnable = true) {\n    if (_reactNative.Platform.OS !== \"web\" || EXPERIMENTAL_WEB_IMPLEMENTATION === shouldEnable) {\n        return;\n    }\n    if (getWasCalled) {\n        console.error(\"Some parts of this application have already started using old gesture handler implementation. No changes will be applied. You can try enabling new implementation earlier.\");\n        return;\n    }\n    EXPERIMENTAL_WEB_IMPLEMENTATION = shouldEnable;\n}\nfunction isExperimentalWebImplementationEnabled() {\n    getWasCalled = true;\n    return EXPERIMENTAL_WEB_IMPLEMENTATION;\n} //# sourceMappingURL=EnableExperimentalWebImplementation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDJDQUEyQyxHQUFHRTtBQUM5Q0YsOENBQThDLEdBQUdHO0FBRWpELElBQUlDLGVBQWVDLG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlDLGtDQUFrQztBQUN0QyxJQUFJQyxlQUFlO0FBRW5CLFNBQVNMLG9DQUFvQ00sZUFBZSxJQUFJO0lBQzlELElBQUlKLGFBQWFLLFFBQVEsQ0FBQ0MsRUFBRSxLQUFLLFNBQVNKLG9DQUFvQ0UsY0FBYztRQUMxRjtJQUNGO0lBRUEsSUFBSUQsY0FBYztRQUNoQkksUUFBUUMsS0FBSyxDQUFDO1FBQ2Q7SUFDRjtJQUVBTixrQ0FBa0NFO0FBQ3BDO0FBRUEsU0FBU0w7SUFDUEksZUFBZTtJQUNmLE9BQU9EO0FBQ1QsRUFDQSwrREFBK0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24uanM/ZGFkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24gPSBlbmFibGVFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbjtcbmV4cG9ydHMuaXNFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbkVuYWJsZWQgPSBpc0V4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uRW5hYmxlZDtcblxudmFyIF9yZWFjdE5hdGl2ZSA9IHJlcXVpcmUoXCJyZWFjdC1uYXRpdmVcIik7XG5cbmxldCBFWFBFUklNRU5UQUxfV0VCX0lNUExFTUVOVEFUSU9OID0gZmFsc2U7XG5sZXQgZ2V0V2FzQ2FsbGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGVuYWJsZUV4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uKHNob3VsZEVuYWJsZSA9IHRydWUpIHtcbiAgaWYgKF9yZWFjdE5hdGl2ZS5QbGF0Zm9ybS5PUyAhPT0gJ3dlYicgfHwgRVhQRVJJTUVOVEFMX1dFQl9JTVBMRU1FTlRBVElPTiA9PT0gc2hvdWxkRW5hYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGdldFdhc0NhbGxlZCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWUgcGFydHMgb2YgdGhpcyBhcHBsaWNhdGlvbiBoYXZlIGFscmVhZHkgc3RhcnRlZCB1c2luZyBvbGQgZ2VzdHVyZSBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBObyBjaGFuZ2VzIHdpbGwgYmUgYXBwbGllZC4gWW91IGNhbiB0cnkgZW5hYmxpbmcgbmV3IGltcGxlbWVudGF0aW9uIGVhcmxpZXIuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgRVhQRVJJTUVOVEFMX1dFQl9JTVBMRU1FTlRBVElPTiA9IHNob3VsZEVuYWJsZTtcbn1cblxuZnVuY3Rpb24gaXNFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbkVuYWJsZWQoKSB7XG4gIGdldFdhc0NhbGxlZCA9IHRydWU7XG4gIHJldHVybiBFWFBFUklNRU5UQUxfV0VCX0lNUExFTUVOVEFUSU9OO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24iLCJpc0V4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uRW5hYmxlZCIsIl9yZWFjdE5hdGl2ZSIsInJlcXVpcmUiLCJFWFBFUklNRU5UQUxfV0VCX0lNUExFTUVOVEFUSU9OIiwiZ2V0V2FzQ2FsbGVkIiwic2hvdWxkRW5hYmxlIiwiUGxhdGZvcm0iLCJPUyIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = GestureHandlerRootView;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction GestureHandlerRootView(props) {\n    return /*#__PURE__*/ React.createElement(_reactNative.View, props);\n} //# sourceMappingURL=GestureHandlerRootView.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvR2VzdHVyZUhhbmRsZXJSb290Vmlldy53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHO0FBRWxCLElBQUlDLFFBQVFDLHdCQUF3QkMsbUJBQU9BLENBQUMsb0JBQU87QUFFbkQsSUFBSUMsZUFBZUQsbUJBQU9BLENBQUMsdUVBQWM7QUFFekMsU0FBU0U7SUFBNkIsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBTztJQUFNLElBQUlDLFFBQVEsSUFBSUQ7SUFBV0QsMkJBQTJCO1FBQWMsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFekwsU0FBU0wsd0JBQXdCTSxHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQUUsT0FBT0Q7SUFBSztJQUFFLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFVCxTQUFTUztRQUFJO0lBQUc7SUFBRSxJQUFJRCxRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNRyxHQUFHLENBQUNGLE1BQU07UUFBRSxPQUFPRCxNQUFNSSxHQUFHLENBQUNIO0lBQU07SUFBRSxJQUFJSSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JsQixPQUFPQyxjQUFjLElBQUlELE9BQU9tQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU9QLElBQUs7UUFBRSxJQUFJYixPQUFPcUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1YsS0FBS08sTUFBTTtZQUFFLElBQUlJLE9BQU9OLHdCQUF3QmxCLE9BQU9tQix3QkFBd0IsQ0FBQ04sS0FBS08sT0FBTztZQUFNLElBQUlJLFFBQVNBLENBQUFBLEtBQUtSLEdBQUcsSUFBSVEsS0FBS0MsR0FBRyxHQUFHO2dCQUFFekIsT0FBT0MsY0FBYyxDQUFDZ0IsUUFBUUcsS0FBS0k7WUFBTyxPQUFPO2dCQUFFUCxNQUFNLENBQUNHLElBQUksR0FBR1AsR0FBRyxDQUFDTyxJQUFJO1lBQUU7UUFBRTtJQUFFO0lBQUVILE9BQU9iLE9BQU8sR0FBR1M7SUFBSyxJQUFJRCxPQUFPO1FBQUVBLE1BQU1hLEdBQUcsQ0FBQ1osS0FBS0k7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFdHVCLFNBQVNaLHVCQUF1QnFCLEtBQUs7SUFDbkMsT0FBTyxXQUFXLEdBQUVwQixNQUFNcUIsYUFBYSxDQUFDbEIsYUFBYW1CLElBQUksRUFBRUY7QUFDN0QsRUFDQSxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvR2VzdHVyZUhhbmRsZXJSb290Vmlldy53ZWIuanM/ZmZlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEdlc3R1cmVIYW5kbGVyUm9vdFZpZXc7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gR2VzdHVyZUhhbmRsZXJSb290Vmlldyhwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0TmF0aXZlLlZpZXcsIHByb3BzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlc3R1cmVIYW5kbGVyUm9vdFZpZXcud2ViLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJHZXN0dXJlSGFuZGxlclJvb3RWaWV3IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = {\n    get forceTouchAvailable () {\n        return false;\n    }\n};\nexports[\"default\"] = _default; //# sourceMappingURL=PlatformConstants.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUGxhdGZvcm1Db25zdGFudHMud2ViLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsV0FBVztJQUNiLElBQUlDLHVCQUFzQjtRQUN4QixPQUFPO0lBQ1Q7QUFFRjtBQUNBSixrQkFBZSxHQUFHRyxVQUNsQixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUGxhdGZvcm1Db25zdGFudHMud2ViLmpzPzczMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSB7XG4gIGdldCBmb3JjZVRvdWNoQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QbGF0Zm9ybUNvbnN0YW50cy53ZWIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kZWZhdWx0IiwiZm9yY2VUb3VjaEF2YWlsYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.HammerGestures = exports.Gestures = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ./EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nvar _InteractionManager = _interopRequireDefault(__webpack_require__(/*! ./web/tools/InteractionManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\"));\nvar _NodeManager = _interopRequireDefault(__webpack_require__(/*! ./web/tools/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\"));\nvar _PanGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js\"));\nvar _TapGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js\"));\nvar _LongPressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js\"));\nvar _PinchGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js\"));\nvar _RotationGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js\"));\nvar _FlingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js\"));\nvar _NativeViewGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js\"));\nvar _ManualGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/ManualGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js\"));\nvar HammerNodeManager = _interopRequireWildcard(__webpack_require__(/*! ./web_hammer/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nvar _NativeViewGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js\"));\nvar _PanGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js\"));\nvar _TapGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js\"));\nvar _LongPressGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js\"));\nvar _PinchGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js\"));\nvar _RotationGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js\"));\nvar _FlingGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//GestureHandlers\n//Hammer Handlers\nconst Gestures = {\n    NativeViewGestureHandler: _NativeViewGestureHandler.default,\n    PanGestureHandler: _PanGestureHandler.default,\n    TapGestureHandler: _TapGestureHandler.default,\n    LongPressGestureHandler: _LongPressGestureHandler.default,\n    PinchGestureHandler: _PinchGestureHandler.default,\n    RotationGestureHandler: _RotationGestureHandler.default,\n    FlingGestureHandler: _FlingGestureHandler.default,\n    ManualGestureHandler: _ManualGestureHandler.default\n};\nexports.Gestures = Gestures;\nconst HammerGestures = {\n    NativeViewGestureHandler: _NativeViewGestureHandler2.default,\n    PanGestureHandler: _PanGestureHandler2.default,\n    TapGestureHandler: _TapGestureHandler2.default,\n    LongPressGestureHandler: _LongPressGestureHandler2.default,\n    PinchGestureHandler: _PinchGestureHandler2.default,\n    RotationGestureHandler: _RotationGestureHandler2.default,\n    FlingGestureHandler: _FlingGestureHandler2.default\n};\nexports.HammerGestures = HammerGestures;\nvar _default = {\n    handleSetJSResponder (tag, blockNativeResponder) {\n        console.warn(\"handleSetJSResponder: \", tag, blockNativeResponder);\n    },\n    handleClearJSResponder () {\n        console.warn(\"handleClearJSResponder: \");\n    },\n    createGestureHandler (handlerName, handlerTag, config) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            if (!(handlerName in Gestures)) {\n                throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n            }\n            const GestureClass = Gestures[handlerName];\n            _NodeManager.default.createGestureHandler(handlerTag, new GestureClass());\n            _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), config);\n        } else {\n            if (!(handlerName in HammerGestures)) {\n                throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n            } // @ts-ignore If it doesn't exist, the error is thrown\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const GestureClass = HammerGestures[handlerName]; // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n        }\n        this.updateGestureHandler(handlerTag, config);\n    },\n    attachGestureHandler (handlerTag, newView, _actionType, propsRef) {\n        if (!(newView instanceof HTMLElement || newView instanceof _react.default.Component)) {\n            return;\n        }\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            //@ts-ignore Types should be HTMLElement or React.Component\n            _NodeManager.default.getHandler(handlerTag).init(newView, propsRef);\n        } else {\n            //@ts-ignore Types should be HTMLElement or React.Component\n            HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n        }\n    },\n    updateGestureHandler (handlerTag, newConfig) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            _NodeManager.default.getHandler(handlerTag).updateGestureConfig(newConfig);\n            _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), newConfig);\n        } else {\n            HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n        }\n    },\n    getGestureHandlerNode (handlerTag) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            return _NodeManager.default.getHandler(handlerTag);\n        } else {\n            return HammerNodeManager.getHandler(handlerTag);\n        }\n    },\n    dropGestureHandler (handlerTag) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            _NodeManager.default.dropGestureHandler(handlerTag);\n        } else {\n            HammerNodeManager.dropGestureHandler(handlerTag);\n        }\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    flushOperations () {}\n};\nexports[\"default\"] = _default; //# sourceMappingURL=RNGestureHandlerModule.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RNRenderer = void 0;\nconst RNRenderer = {\n    findHostInstance_DEPRECATED: (_ref)=>null\n};\nexports.RNRenderer = RNRenderer; //# sourceMappingURL=RNRenderer.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUk5SZW5kZXJlci53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUUsYUFBYTtJQUNqQkMsNkJBQTZCQyxDQUFBQSxPQUFRO0FBQ3ZDO0FBQ0FKLGtCQUFrQixHQUFHRSxZQUNyQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUk5SZW5kZXJlci53ZWIuanM/Y2ZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUk5SZW5kZXJlciA9IHZvaWQgMDtcbmNvbnN0IFJOUmVuZGVyZXIgPSB7XG4gIGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRDogX3JlZiA9PiBudWxsXG59O1xuZXhwb3J0cy5STlJlbmRlcmVyID0gUk5SZW5kZXJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJOUmVuZGVyZXIud2ViLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJOUmVuZGVyZXIiLCJmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQiLCJfcmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/State.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/State.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.State = void 0;\n// TODO use State from RNModule\nconst State = {\n    UNDETERMINED: 0,\n    FAILED: 1,\n    BEGAN: 2,\n    CANCELLED: 3,\n    ACTIVE: 4,\n    END: 5\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.State = State; //# sourceMappingURL=State.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvU3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLCtCQUErQjtBQUMvQixNQUFNRSxRQUFRO0lBQ1pDLGNBQWM7SUFDZEMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFdBQVc7SUFDWEMsUUFBUTtJQUNSQyxLQUFLO0FBQ1AsR0FBRyw4SEFBOEg7QUFFaklSLGFBQWEsR0FBR0UsT0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL1N0YXRlLmpzP2EzZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0YXRlID0gdm9pZCAwO1xuLy8gVE9ETyB1c2UgU3RhdGUgZnJvbSBSTk1vZHVsZVxuY29uc3QgU3RhdGUgPSB7XG4gIFVOREVURVJNSU5FRDogMCxcbiAgRkFJTEVEOiAxLFxuICBCRUdBTjogMixcbiAgQ0FOQ0VMTEVEOiAzLFxuICBBQ1RJVkU6IDQsXG4gIEVORDogNVxufTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgaXQgY2FuIGJlIHVzZWQgYXMgYSB0eXBlIGFuZCBhcyBhIHZhbHVlXG5cbmV4cG9ydHMuU3RhdGUgPSBTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0YXRlIiwiVU5ERVRFUk1JTkVEIiwiRkFJTEVEIiwiQkVHQU4iLCJDQU5DRUxMRUQiLCJBQ1RJVkUiLCJFTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/State.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TouchEventType = void 0;\nconst TouchEventType = {\n    UNDETERMINED: 0,\n    TOUCHES_DOWN: 1,\n    TOUCHES_MOVE: 2,\n    TOUCHES_UP: 3,\n    TOUCHES_CANCELLED: 4\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.TouchEventType = TouchEventType; //# sourceMappingURL=TouchEventType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvVG91Y2hFdmVudFR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUUsaUJBQWlCO0lBQ3JCQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxZQUFZO0lBQ1pDLG1CQUFtQjtBQUNyQixHQUFHLDhIQUE4SDtBQUVqSVAsc0JBQXNCLEdBQUdFLGdCQUN6QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvVG91Y2hFdmVudFR5cGUuanM/N2Q5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVG91Y2hFdmVudFR5cGUgPSB2b2lkIDA7XG5jb25zdCBUb3VjaEV2ZW50VHlwZSA9IHtcbiAgVU5ERVRFUk1JTkVEOiAwLFxuICBUT1VDSEVTX0RPV046IDEsXG4gIFRPVUNIRVNfTU9WRTogMixcbiAgVE9VQ0hFU19VUDogMyxcbiAgVE9VQ0hFU19DQU5DRUxMRUQ6IDRcbn07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IGl0IGNhbiBiZSB1c2VkIGFzIGEgdHlwZSBhbmQgYXMgYSB2YWx1ZVxuXG5leHBvcnRzLlRvdWNoRXZlbnRUeXBlID0gVG91Y2hFdmVudFR5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub3VjaEV2ZW50VHlwZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUb3VjaEV2ZW50VHlwZSIsIlVOREVURVJNSU5FRCIsIlRPVUNIRVNfRE9XTiIsIlRPVUNIRVNfTU9WRSIsIlRPVUNIRVNfVVAiLCJUT1VDSEVTX0NBTkNFTExFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ \"invariant\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DRAG_TOSS = 0.05;\nconst IDLE = \"Idle\";\nconst DRAGGING = \"Dragging\";\nconst SETTLING = \"Settling\";\nclass DrawerLayout extends React.Component {\n    constructor(_props){\n        super(_props);\n        _defineProperty(this, \"openValue\", void 0);\n        _defineProperty(this, \"onGestureEvent\", void 0);\n        _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"drawerShown\", false);\n        _defineProperty(this, \"updateAnimatedEvent\", (props, state)=>{\n            // Event definition is based on\n            const { drawerPosition, drawerWidth, drawerType } = props;\n            const { dragX: dragXValue, touchX: touchXValue, drawerTranslation, containerWidth } = state;\n            let dragX = dragXValue;\n            let touchX = touchXValue;\n            if (drawerPosition !== \"left\") {\n                // Most of the code is written in a way to handle left-side drawer. In\n                // order to handle right-side drawer the only thing we need to do is to\n                // reverse events coming from gesture handler in a way they emulate\n                // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n                // calulcated by subtracing real touchX from the width of the container\n                // (such that when touch happens at the right edge the value is simply 0)\n                dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n                touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n                touchXValue.setValue(containerWidth);\n            } else {\n                touchXValue.setValue(0);\n            } // While closing the drawer when user starts gesture outside of its area (in greyed\n            // out part of the window), we want the drawer to follow only once finger reaches the\n            // edge of the drawer.\n            // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n            // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n            // an arrow pointing left\n            // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    +---------------+    +---------------+    +---------------+    +---------------+\n            //\n            // For the above to work properly we define animated value that will keep\n            // start position of the gesture. Then we use that value to calculate how\n            // much we need to subtract from the dragX. If the gesture started on the\n            // greyed out area we take the distance from the edge of the drawer to the\n            // start position. Otherwise we don't subtract at all and the drawer be\n            // pulled back as soon as you start the pan.\n            //\n            // This is used only when drawerType is \"front\"\n            //\n            let translationX = dragX;\n            if (drawerType === \"front\") {\n                const startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n                const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n                    inputRange: [\n                        drawerWidth - 1,\n                        drawerWidth,\n                        drawerWidth + 1\n                    ],\n                    outputRange: [\n                        0,\n                        0,\n                        1\n                    ]\n                });\n                translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n            }\n            this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n                inputRange: [\n                    0,\n                    drawerWidth\n                ],\n                outputRange: [\n                    0,\n                    1\n                ],\n                extrapolate: \"clamp\"\n            });\n            const gestureOptions = {\n                useNativeDriver: props.useNativeAnimations\n            };\n            if (this.props.onDrawerSlide) {\n                gestureOptions.listener = (ev)=>{\n                    var _this$props$onDrawerS, _this$props;\n                    const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n                    const position = translationX / this.state.containerWidth;\n                    (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n                };\n            }\n            this.onGestureEvent = _reactNative.Animated.event([\n                {\n                    nativeEvent: {\n                        translationX: dragXValue,\n                        x: touchXValue\n                    }\n                }\n            ], gestureOptions);\n        });\n        _defineProperty(this, \"handleContainerLayout\", ({ nativeEvent })=>{\n            this.setState({\n                containerWidth: nativeEvent.layout.width\n            });\n        });\n        _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow)=>{\n            var _this$props$onDrawerS2, _this$props2;\n            (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n        });\n        _defineProperty(this, \"openingHandlerStateChange\", ({ nativeEvent })=>{\n            if (nativeEvent.oldState === _State.State.ACTIVE) {\n                this.handleRelease({\n                    nativeEvent\n                });\n            } else if (nativeEvent.state === _State.State.ACTIVE) {\n                this.emitStateChanged(DRAGGING, false);\n                this.setState({\n                    drawerState: DRAGGING\n                });\n                if (this.props.keyboardDismissMode === \"on-drag\") {\n                    _reactNative.Keyboard.dismiss();\n                }\n                if (this.props.hideStatusBar) {\n                    _reactNative.StatusBar.setHidden(true, this.props.statusBarAnimation || \"slide\");\n                }\n            }\n        });\n        _defineProperty(this, \"onTapHandlerStateChange\", ({ nativeEvent })=>{\n            if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== \"locked-open\") {\n                this.closeDrawer();\n            }\n        });\n        _defineProperty(this, \"handleRelease\", ({ nativeEvent })=>{\n            const { drawerWidth, drawerPosition, drawerType } = this.props;\n            const { containerWidth } = this.state;\n            let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n            if (drawerPosition !== \"left\") {\n                // See description in _updateAnimatedEvent about why events are flipped\n                // for right-side drawer\n                dragX = -dragX;\n                touchX = containerWidth - touchX;\n                velocityX = -velocityX;\n            }\n            const gestureStartX = touchX - dragX;\n            let dragOffsetBasedOnStart = 0;\n            if (drawerType === \"front\") {\n                dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n            }\n            const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n            const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n            const shouldOpen = projOffsetX > drawerWidth / 2;\n            if (shouldOpen) {\n                this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n            } else {\n                this.animateDrawer(startOffsetX, 0, velocityX);\n            }\n        });\n        _defineProperty(this, \"updateShowing\", (showing)=>{\n            var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n            this.drawerShown = showing;\n            (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n                accessibilityViewIsModal: showing\n            });\n            (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n                pointerEvents: showing ? \"auto\" : \"none\"\n            });\n            const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n            const fromLeft = drawerPosition === \"left\"; // gestureOrientation is 1 if the expected gesture is from left to right and\n            // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n            // to right gesture, thus orientation will be 1.\n            const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n            // the container size by the value of SLOP. This will make it only activate\n            // when gesture happens not further than SLOP away from the edge\n            const hitSlop = fromLeft ? {\n                left: 0,\n                width: showing ? undefined : edgeWidth\n            } : {\n                right: 0,\n                width: showing ? undefined : edgeWidth\n            }; // @ts-ignore internal API, maybe could be fixed in handler types\n            (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n                hitSlop,\n                activeOffsetX: gestureOrientation * minSwipeDistance\n            });\n        });\n        _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed)=>{\n            this.state.dragX.setValue(0);\n            this.state.touchX.setValue(this.props.drawerPosition === \"left\" ? 0 : this.state.containerWidth);\n            if (fromValue != null) {\n                let nextFramePosition = fromValue;\n                if (this.props.useNativeAnimations) {\n                    // When using native driver, we predict the next position of the\n                    // animation because it takes one frame of a roundtrip to pass RELEASE\n                    // event from native driver to JS before we can start animating. Without\n                    // it, it is more noticable that the frame is dropped.\n                    if (fromValue < toValue && velocity > 0) {\n                        nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n                    } else if (fromValue > toValue && velocity < 0) {\n                        nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n                    }\n                }\n                this.state.drawerTranslation.setValue(nextFramePosition);\n            }\n            const willShow = toValue !== 0;\n            this.updateShowing(willShow);\n            this.emitStateChanged(SETTLING, willShow);\n            this.setState({\n                drawerState: SETTLING\n            });\n            if (this.props.hideStatusBar) {\n                _reactNative.StatusBar.setHidden(willShow, this.props.statusBarAnimation || \"slide\");\n            }\n            _reactNative.Animated.spring(this.state.drawerTranslation, {\n                velocity,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                speed: speed !== null && speed !== void 0 ? speed : undefined\n            }).start(({ finished })=>{\n                if (finished) {\n                    this.emitStateChanged(IDLE, willShow);\n                    this.setState({\n                        drawerOpened: willShow\n                    });\n                    if (this.state.drawerState !== DRAGGING) {\n                        // it's possilbe that user started drag while the drawer\n                        // was settling, don't override state in this case\n                        this.setState({\n                            drawerState: IDLE\n                        });\n                    }\n                    if (willShow) {\n                        var _this$props$onDrawerO, _this$props3;\n                        (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n                    } else {\n                        var _this$props$onDrawerC, _this$props4;\n                        (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n                    }\n                }\n            });\n        });\n        _defineProperty(this, \"openDrawer\", (options = {})=>{\n            this.animateDrawer(undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n            // it would not be clickable\n            this.forceUpdate();\n        });\n        _defineProperty(this, \"closeDrawer\", (options = {})=>{\n            // TODO: decide if it should be null or undefined is the proper value\n            this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n            // it would be still clickable\n            this.forceUpdate();\n        });\n        _defineProperty(this, \"renderOverlay\", ()=>{\n            /* Overlay styles */ (0, _invariant.default)(this.openValue, \"should be set\");\n            let overlayOpacity;\n            if (this.state.drawerState !== IDLE) {\n                overlayOpacity = this.openValue;\n            } else {\n                overlayOpacity = this.state.drawerOpened ? 1 : 0;\n            }\n            const dynamicOverlayStyles = {\n                opacity: overlayOpacity,\n                backgroundColor: this.props.overlayColor\n            };\n            return /*#__PURE__*/ React.createElement(_TapGestureHandler.TapGestureHandler, {\n                onHandlerStateChange: this.onTapHandlerStateChange\n            }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                pointerEvents: this.drawerShown ? \"auto\" : \"none\",\n                ref: this.pointerEventsView,\n                style: [\n                    styles.overlay,\n                    dynamicOverlayStyles\n                ]\n            }));\n        });\n        _defineProperty(this, \"renderDrawer\", ()=>{\n            const { drawerBackgroundColor, drawerWidth, drawerPosition, drawerType, drawerContainerStyle, contentContainerStyle } = this.props;\n            const fromLeft = drawerPosition === \"left\";\n            const drawerSlide = drawerType !== \"back\";\n            const containerSlide = drawerType !== \"front\"; // we rely on row and row-reverse flex directions to position the drawer\n            // properly. Apparently for RTL these are flipped which requires us to use\n            // the opposite setting for the drawer to appear from left or right\n            // according to the drawerPosition prop\n            const reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n            const dynamicDrawerStyles = {\n                backgroundColor: drawerBackgroundColor,\n                width: drawerWidth\n            };\n            const openValue = this.openValue;\n            (0, _invariant.default)(openValue, \"should be set\");\n            let containerStyles;\n            if (containerSlide) {\n                const containerTranslateX = openValue.interpolate({\n                    inputRange: [\n                        0,\n                        1\n                    ],\n                    outputRange: fromLeft ? [\n                        0,\n                        drawerWidth\n                    ] : [\n                        0,\n                        -drawerWidth\n                    ],\n                    extrapolate: \"clamp\"\n                });\n                containerStyles = {\n                    transform: [\n                        {\n                            translateX: containerTranslateX\n                        }\n                    ]\n                };\n            }\n            let drawerTranslateX = 0;\n            if (drawerSlide) {\n                const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n                if (this.state.drawerState !== IDLE) {\n                    drawerTranslateX = openValue.interpolate({\n                        inputRange: [\n                            0,\n                            1\n                        ],\n                        outputRange: [\n                            closedDrawerOffset,\n                            0\n                        ],\n                        extrapolate: \"clamp\"\n                    });\n                } else {\n                    drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n                }\n            }\n            const drawerStyles = {\n                transform: [\n                    {\n                        translateX: drawerTranslateX\n                    }\n                ],\n                flexDirection: reverseContentDirection ? \"row-reverse\" : \"row\"\n            };\n            return /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                style: styles.main,\n                onLayout: this.handleContainerLayout\n            }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                style: [\n                    drawerType === \"front\" ? styles.containerOnBack : styles.containerInFront,\n                    containerStyles,\n                    contentContainerStyle\n                ],\n                importantForAccessibility: this.drawerShown ? \"no-hide-descendants\" : \"yes\"\n            }, typeof this.props.children === \"function\" ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                pointerEvents: \"box-none\",\n                ref: this.accessibilityIsModalView,\n                accessibilityViewIsModal: this.drawerShown,\n                style: [\n                    styles.drawerContainer,\n                    drawerStyles,\n                    drawerContainerStyle\n                ]\n            }, /*#__PURE__*/ React.createElement(_reactNative.View, {\n                style: dynamicDrawerStyles\n            }, this.props.renderNavigationView(this.openValue))));\n        });\n        _defineProperty(this, \"setPanGestureRef\", (ref)=>{\n            var _this$props$onGesture, _this$props5;\n            // TODO(TS): make sure it is OK taken from\n            // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n            this.panGestureHandler.current = ref;\n            (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n        });\n        const _dragX = new _reactNative.Animated.Value(0);\n        const _touchX = new _reactNative.Animated.Value(0);\n        const _drawerTranslation = new _reactNative.Animated.Value(0);\n        this.state = {\n            dragX: _dragX,\n            touchX: _touchX,\n            drawerTranslation: _drawerTranslation,\n            containerWidth: 0,\n            drawerState: IDLE,\n            drawerOpened: false\n        };\n        this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n        return true;\n    }\n    render() {\n        const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } = this.props;\n        const fromLeft = drawerPosition === \"left\"; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        const hitSlop = fromLeft ? {\n            left: 0,\n            width: this.drawerShown ? undefined : edgeWidth\n        } : {\n            right: 0,\n            width: this.drawerShown ? undefined : edgeWidth\n        };\n        return /*#__PURE__*/ React.createElement(_PanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n        , {\n            userSelect: this.props.userSelect,\n            ref: this.setPanGestureRef,\n            hitSlop: hitSlop,\n            activeOffsetX: gestureOrientation * minSwipeDistance,\n            failOffsetY: [\n                -15,\n                15\n            ],\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.openingHandlerStateChange,\n            enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n            enabled: drawerLockMode !== \"locked-closed\" && drawerLockMode !== \"locked-open\"\n        }, this.renderDrawer());\n    }\n}\nexports[\"default\"] = DrawerLayout;\n_defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: \"left\",\n    useNativeAnimations: true,\n    drawerType: \"front\",\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: \"rgba(0, 0, 0, 0.7)\",\n    drawerLockMode: \"unlocked\",\n    enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n    Left: \"left\",\n    Right: \"right\"\n});\nconst styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1001,\n        flexDirection: \"row\"\n    },\n    containerInFront: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1002\n    },\n    containerOnBack: {\n        ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n        flex: 1,\n        zIndex: 0,\n        overflow: \"hidden\"\n    },\n    overlay: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1000\n    }\n}); //# sourceMappingURL=DrawerLayout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy9EcmF3ZXJMYXlvdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGFBQWFDLHVCQUF1QkYsbUJBQU9BLENBQUMsNEJBQVc7QUFFM0QsSUFBSUcsZUFBZUgsbUJBQU9BLENBQUMsdUVBQWM7QUFFekMsSUFBSUkscUJBQXFCSixtQkFBT0EsQ0FBQyw2SEFBK0I7QUFFaEUsSUFBSUsscUJBQXFCTCxtQkFBT0EsQ0FBQyw2SEFBK0I7QUFFaEUsSUFBSU0sU0FBU04sbUJBQU9BLENBQUMsbUZBQVU7QUFFL0IsU0FBU0UsdUJBQXVCSyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVWLFNBQVNVO0lBQUk7QUFBRztBQUU5RixTQUFTRTtJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkI7UUFBYyxPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUV6TCxTQUFTWix3QkFBd0JRLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUU7UUFBRSxPQUFPRDtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVWLFNBQVNVO1FBQUk7SUFBRztJQUFFLElBQUlJLFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1DLEdBQUcsQ0FBQ0wsTUFBTTtRQUFFLE9BQU9JLE1BQU1FLEdBQUcsQ0FBQ047SUFBTTtJQUFFLElBQUlPLFNBQVMsQ0FBQztJQUFHLElBQUlD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LENBQUM7SUFDNUN0QixpQkFBaUI7UUFBRSxHQUFHekwsYUFBYThNLFVBQVUsQ0FBQ0Usa0JBQWtCO1FBQzlEQyxRQUFRO1FBQ1JqQyxlQUFlO0lBQ2pCO0lBQ0FLLGtCQUFrQjtRQUFFLEdBQUdyTCxhQUFhOE0sVUFBVSxDQUFDRSxrQkFBa0I7UUFDL0RDLFFBQVE7SUFDVjtJQUNBN0IsaUJBQWlCO1FBQUUsR0FBR3BMLGFBQWE4TSxVQUFVLENBQUNFLGtCQUFrQjtJQUNoRTtJQUNBL0IsTUFBTTtRQUNKaUMsTUFBTTtRQUNORCxRQUFRO1FBQ1JFLFVBQVU7SUFDWjtJQUNBcEQsU0FBUztRQUFFLEdBQUcvSixhQUFhOE0sVUFBVSxDQUFDRSxrQkFBa0I7UUFDdERDLFFBQVE7SUFDVjtBQUNGLElBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvRHJhd2VyTGF5b3V0LmpzPzcxMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKTtcblxudmFyIF9yZWFjdE5hdGl2ZSA9IHJlcXVpcmUoXCJyZWFjdC1uYXRpdmVcIik7XG5cbnZhciBfUGFuR2VzdHVyZUhhbmRsZXIgPSByZXF1aXJlKFwiLi4vaGFuZGxlcnMvUGFuR2VzdHVyZUhhbmRsZXJcIik7XG5cbnZhciBfVGFwR2VzdHVyZUhhbmRsZXIgPSByZXF1aXJlKFwiLi4vaGFuZGxlcnMvVGFwR2VzdHVyZUhhbmRsZXJcIik7XG5cbnZhciBfU3RhdGUgPSByZXF1aXJlKFwiLi4vU3RhdGVcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jb25zdCBEUkFHX1RPU1MgPSAwLjA1O1xuY29uc3QgSURMRSA9ICdJZGxlJztcbmNvbnN0IERSQUdHSU5HID0gJ0RyYWdnaW5nJztcbmNvbnN0IFNFVFRMSU5HID0gJ1NldHRsaW5nJztcblxuY2xhc3MgRHJhd2VyTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoX3Byb3BzKSB7XG4gICAgc3VwZXIoX3Byb3BzKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wZW5WYWx1ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib25HZXN0dXJlRXZlbnRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFjY2Vzc2liaWxpdHlJc01vZGFsVmlld1wiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicG9pbnRlckV2ZW50c1ZpZXdcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhbkdlc3R1cmVIYW5kbGVyXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJkcmF3ZXJTaG93blwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1cGRhdGVBbmltYXRlZEV2ZW50XCIsIChwcm9wcywgc3RhdGUpID0+IHtcbiAgICAgIC8vIEV2ZW50IGRlZmluaXRpb24gaXMgYmFzZWQgb25cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZHJhd2VyUG9zaXRpb24sXG4gICAgICAgIGRyYXdlcldpZHRoLFxuICAgICAgICBkcmF3ZXJUeXBlXG4gICAgICB9ID0gcHJvcHM7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRyYWdYOiBkcmFnWFZhbHVlLFxuICAgICAgICB0b3VjaFg6IHRvdWNoWFZhbHVlLFxuICAgICAgICBkcmF3ZXJUcmFuc2xhdGlvbixcbiAgICAgICAgY29udGFpbmVyV2lkdGhcbiAgICAgIH0gPSBzdGF0ZTtcbiAgICAgIGxldCBkcmFnWCA9IGRyYWdYVmFsdWU7XG4gICAgICBsZXQgdG91Y2hYID0gdG91Y2hYVmFsdWU7XG5cbiAgICAgIGlmIChkcmF3ZXJQb3NpdGlvbiAhPT0gJ2xlZnQnKSB7XG4gICAgICAgIC8vIE1vc3Qgb2YgdGhlIGNvZGUgaXMgd3JpdHRlbiBpbiBhIHdheSB0byBoYW5kbGUgbGVmdC1zaWRlIGRyYXdlci4gSW5cbiAgICAgICAgLy8gb3JkZXIgdG8gaGFuZGxlIHJpZ2h0LXNpZGUgZHJhd2VyIHRoZSBvbmx5IHRoaW5nIHdlIG5lZWQgdG8gZG8gaXMgdG9cbiAgICAgICAgLy8gcmV2ZXJzZSBldmVudHMgY29taW5nIGZyb20gZ2VzdHVyZSBoYW5kbGVyIGluIGEgd2F5IHRoZXkgZW11bGF0ZVxuICAgICAgICAvLyBsZWZ0LXNpZGUgZHJhd2VyIGdlc3R1cmVzLiBFLmcuIGRyYWdYIGlzIHNpbXBseSAtZHJhZ1gsIGFuZCB0b3VjaFggaXNcbiAgICAgICAgLy8gY2FsdWxjYXRlZCBieSBzdWJ0cmFjaW5nIHJlYWwgdG91Y2hYIGZyb20gdGhlIHdpZHRoIG9mIHRoZSBjb250YWluZXJcbiAgICAgICAgLy8gKHN1Y2ggdGhhdCB3aGVuIHRvdWNoIGhhcHBlbnMgYXQgdGhlIHJpZ2h0IGVkZ2UgdGhlIHZhbHVlIGlzIHNpbXBseSAwKVxuICAgICAgICBkcmFnWCA9IF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5tdWx0aXBseShuZXcgX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZhbHVlKC0xKSwgZHJhZ1hWYWx1ZSk7IC8vIFRPRE8oVFMpOiAoZm9yIGFsbCBcImFzXCIgaW4gdGhpcyBmaWxlKSBtYWtlIHN1cmUgd2UgY2FuIG1hcCB0aGlzXG5cbiAgICAgICAgdG91Y2hYID0gX3JlYWN0TmF0aXZlLkFuaW1hdGVkLmFkZChuZXcgX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZhbHVlKGNvbnRhaW5lcldpZHRoKSwgX3JlYWN0TmF0aXZlLkFuaW1hdGVkLm11bHRpcGx5KG5ldyBfcmVhY3ROYXRpdmUuQW5pbWF0ZWQuVmFsdWUoLTEpLCB0b3VjaFhWYWx1ZSkpOyAvLyBUT0RPKFRTKTogbWFrZSBzdXJlIHdlIGNhbiBtYXAgdGhpcztcblxuICAgICAgICB0b3VjaFhWYWx1ZS5zZXRWYWx1ZShjb250YWluZXJXaWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3VjaFhWYWx1ZS5zZXRWYWx1ZSgwKTtcbiAgICAgIH0gLy8gV2hpbGUgY2xvc2luZyB0aGUgZHJhd2VyIHdoZW4gdXNlciBzdGFydHMgZ2VzdHVyZSBvdXRzaWRlIG9mIGl0cyBhcmVhIChpbiBncmV5ZWRcbiAgICAgIC8vIG91dCBwYXJ0IG9mIHRoZSB3aW5kb3cpLCB3ZSB3YW50IHRoZSBkcmF3ZXIgdG8gZm9sbG93IG9ubHkgb25jZSBmaW5nZXIgcmVhY2hlcyB0aGVcbiAgICAgIC8vIGVkZ2Ugb2YgdGhlIGRyYXdlci5cbiAgICAgIC8vIEUuZy4gb24gdGhlIGRpYWdyYW0gYmVsb3cgZHJhd2VyIGlzIGlsbHVzdHJhdGUgYnkgWCBzaWducyBhbmQgdGhlIGdyZXllZCBvdXQgYXJlYSBieVxuICAgICAgLy8gZG90cy4gVGhlIHRvdWNoIGdlc3R1cmUgc3RhcnRzIGF0ICcqJyBhbmQgbW92ZXMgbGVmdCwgdG91Y2ggcGF0aCBpcyBpbmRpY2F0ZWQgYnlcbiAgICAgIC8vIGFuIGFycm93IHBvaW50aW5nIGxlZnRcbiAgICAgIC8vIDEpICstLS0tLS0tLS0tLS0tLS0rIDIpICstLS0tLS0tLS0tLS0tLS0rIDMpICstLS0tLS0tLS0tLS0tLS0rIDQpICstLS0tLS0tLS0tLS0tLS0rXG4gICAgICAvLyAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFh8Li4uLi4uLi4ufFxuICAgICAgLy8gICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYfC4uLi4uLi4uLnxcbiAgICAgIC8vICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWHwuLi4uLi4uLi58XG4gICAgICAvLyAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFhYWFh8LjwtKi4ufCAgICB8WFhYWFhYWFh8PC0tKi4ufCAgICB8WFhYWFh8PC0tLS0tKi4ufFxuICAgICAgLy8gICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYWFhYfC4uLi4uLnwgICAgfFhYWFhYfC4uLi4uLi4uLnxcbiAgICAgIC8vICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWFhYWHwuLi4uLi58ICAgIHxYWFhYWHwuLi4uLi4uLi58XG4gICAgICAvLyAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFhYWFh8Li4uLi4ufCAgICB8WFhYWFh8Li4uLi4uLi4ufFxuICAgICAgLy8gICAgKy0tLS0tLS0tLS0tLS0tLSsgICAgKy0tLS0tLS0tLS0tLS0tLSsgICAgKy0tLS0tLS0tLS0tLS0tLSsgICAgKy0tLS0tLS0tLS0tLS0tLStcbiAgICAgIC8vXG4gICAgICAvLyBGb3IgdGhlIGFib3ZlIHRvIHdvcmsgcHJvcGVybHkgd2UgZGVmaW5lIGFuaW1hdGVkIHZhbHVlIHRoYXQgd2lsbCBrZWVwXG4gICAgICAvLyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgZ2VzdHVyZS4gVGhlbiB3ZSB1c2UgdGhhdCB2YWx1ZSB0byBjYWxjdWxhdGUgaG93XG4gICAgICAvLyBtdWNoIHdlIG5lZWQgdG8gc3VidHJhY3QgZnJvbSB0aGUgZHJhZ1guIElmIHRoZSBnZXN0dXJlIHN0YXJ0ZWQgb24gdGhlXG4gICAgICAvLyBncmV5ZWQgb3V0IGFyZWEgd2UgdGFrZSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgZWRnZSBvZiB0aGUgZHJhd2VyIHRvIHRoZVxuICAgICAgLy8gc3RhcnQgcG9zaXRpb24uIE90aGVyd2lzZSB3ZSBkb24ndCBzdWJ0cmFjdCBhdCBhbGwgYW5kIHRoZSBkcmF3ZXIgYmVcbiAgICAgIC8vIHB1bGxlZCBiYWNrIGFzIHNvb24gYXMgeW91IHN0YXJ0IHRoZSBwYW4uXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBpcyB1c2VkIG9ubHkgd2hlbiBkcmF3ZXJUeXBlIGlzIFwiZnJvbnRcIlxuICAgICAgLy9cblxuXG4gICAgICBsZXQgdHJhbnNsYXRpb25YID0gZHJhZ1g7XG5cbiAgICAgIGlmIChkcmF3ZXJUeXBlID09PSAnZnJvbnQnKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zaXRpb25YID0gX3JlYWN0TmF0aXZlLkFuaW1hdGVkLmFkZCh0b3VjaFgsIF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5tdWx0aXBseShuZXcgX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZhbHVlKC0xKSwgZHJhZ1gpKTtcblxuICAgICAgICBjb25zdCBkcmFnT2Zmc2V0RnJvbU9uU3RhcnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb25YLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbZHJhd2VyV2lkdGggLSAxLCBkcmF3ZXJXaWR0aCwgZHJhd2VyV2lkdGggKyAxXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIDAsIDFdXG4gICAgICAgIH0pO1xuICAgICAgICB0cmFuc2xhdGlvblggPSBfcmVhY3ROYXRpdmUuQW5pbWF0ZWQuYWRkKGRyYWdYLCBkcmFnT2Zmc2V0RnJvbU9uU3RhcnRQb3NpdGlvbik7IC8vIFRPRE86IGFzIGFib3ZlXG4gICAgICB9XG5cbiAgICAgIHRoaXMub3BlblZhbHVlID0gX3JlYWN0TmF0aXZlLkFuaW1hdGVkLmFkZCh0cmFuc2xhdGlvblgsIGRyYXdlclRyYW5zbGF0aW9uKS5pbnRlcnBvbGF0ZSh7XG4gICAgICAgIGlucHV0UmFuZ2U6IFswLCBkcmF3ZXJXaWR0aF0sXG4gICAgICAgIG91dHB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGdlc3R1cmVPcHRpb25zID0ge1xuICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHByb3BzLnVzZU5hdGl2ZUFuaW1hdGlvbnNcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRHJhd2VyU2xpZGUpIHtcbiAgICAgICAgZ2VzdHVyZU9wdGlvbnMubGlzdGVuZXIgPSBldiA9PiB7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzJG9uRHJhd2VyUywgX3RoaXMkcHJvcHM7XG5cbiAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvblggPSBNYXRoLmZsb29yKE1hdGguYWJzKGV2Lm5hdGl2ZUV2ZW50LnRyYW5zbGF0aW9uWCkpO1xuICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdHJhbnNsYXRpb25YIC8gdGhpcy5zdGF0ZS5jb250YWluZXJXaWR0aDtcbiAgICAgICAgICAoX3RoaXMkcHJvcHMkb25EcmF3ZXJTID0gKF90aGlzJHByb3BzID0gdGhpcy5wcm9wcykub25EcmF3ZXJTbGlkZSkgPT09IG51bGwgfHwgX3RoaXMkcHJvcHMkb25EcmF3ZXJTID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvbkRyYXdlclMuY2FsbChfdGhpcyRwcm9wcywgcG9zaXRpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uR2VzdHVyZUV2ZW50ID0gX3JlYWN0TmF0aXZlLkFuaW1hdGVkLmV2ZW50KFt7XG4gICAgICAgIG5hdGl2ZUV2ZW50OiB7XG4gICAgICAgICAgdHJhbnNsYXRpb25YOiBkcmFnWFZhbHVlLFxuICAgICAgICAgIHg6IHRvdWNoWFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1dLCBnZXN0dXJlT3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYW5kbGVDb250YWluZXJMYXlvdXRcIiwgKHtcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNvbnRhaW5lcldpZHRoOiBuYXRpdmVFdmVudC5sYXlvdXQud2lkdGhcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZW1pdFN0YXRlQ2hhbmdlZFwiLCAobmV3U3RhdGUsIGRyYXdlcldpbGxTaG93KSA9PiB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25EcmF3ZXJTMiwgX3RoaXMkcHJvcHMyO1xuXG4gICAgICAoX3RoaXMkcHJvcHMkb25EcmF3ZXJTMiA9IChfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzKS5vbkRyYXdlclN0YXRlQ2hhbmdlZCkgPT09IG51bGwgfHwgX3RoaXMkcHJvcHMkb25EcmF3ZXJTMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25EcmF3ZXJTMi5jYWxsKF90aGlzJHByb3BzMiwgbmV3U3RhdGUsIGRyYXdlcldpbGxTaG93KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wZW5pbmdIYW5kbGVyU3RhdGVDaGFuZ2VcIiwgKHtcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50Lm9sZFN0YXRlID09PSBfU3RhdGUuU3RhdGUuQUNUSVZFKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVsZWFzZSh7XG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG5hdGl2ZUV2ZW50LnN0YXRlID09PSBfU3RhdGUuU3RhdGUuQUNUSVZFKSB7XG4gICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZChEUkFHR0lORywgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkcmF3ZXJTdGF0ZTogRFJBR0dJTkdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMua2V5Ym9hcmREaXNtaXNzTW9kZSA9PT0gJ29uLWRyYWcnKSB7XG4gICAgICAgICAgX3JlYWN0TmF0aXZlLktleWJvYXJkLmRpc21pc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhpZGVTdGF0dXNCYXIpIHtcbiAgICAgICAgICBfcmVhY3ROYXRpdmUuU3RhdHVzQmFyLnNldEhpZGRlbih0cnVlLCB0aGlzLnByb3BzLnN0YXR1c0JhckFuaW1hdGlvbiB8fCAnc2xpZGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib25UYXBIYW5kbGVyU3RhdGVDaGFuZ2VcIiwgKHtcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgfSkgPT4ge1xuICAgICAgaWYgKHRoaXMuZHJhd2VyU2hvd24gJiYgbmF0aXZlRXZlbnQub2xkU3RhdGUgPT09IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUgJiYgdGhpcy5wcm9wcy5kcmF3ZXJMb2NrTW9kZSAhPT0gJ2xvY2tlZC1vcGVuJykge1xuICAgICAgICB0aGlzLmNsb3NlRHJhd2VyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYW5kbGVSZWxlYXNlXCIsICh7XG4gICAgICBuYXRpdmVFdmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZHJhd2VyV2lkdGgsXG4gICAgICAgIGRyYXdlclBvc2l0aW9uLFxuICAgICAgICBkcmF3ZXJUeXBlXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY29udGFpbmVyV2lkdGhcbiAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgbGV0IHtcbiAgICAgICAgdHJhbnNsYXRpb25YOiBkcmFnWCxcbiAgICAgICAgdmVsb2NpdHlYLFxuICAgICAgICB4OiB0b3VjaFhcbiAgICAgIH0gPSBuYXRpdmVFdmVudDtcblxuICAgICAgaWYgKGRyYXdlclBvc2l0aW9uICE9PSAnbGVmdCcpIHtcbiAgICAgICAgLy8gU2VlIGRlc2NyaXB0aW9uIGluIF91cGRhdGVBbmltYXRlZEV2ZW50IGFib3V0IHdoeSBldmVudHMgYXJlIGZsaXBwZWRcbiAgICAgICAgLy8gZm9yIHJpZ2h0LXNpZGUgZHJhd2VyXG4gICAgICAgIGRyYWdYID0gLWRyYWdYO1xuICAgICAgICB0b3VjaFggPSBjb250YWluZXJXaWR0aCAtIHRvdWNoWDtcbiAgICAgICAgdmVsb2NpdHlYID0gLXZlbG9jaXR5WDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZ2VzdHVyZVN0YXJ0WCA9IHRvdWNoWCAtIGRyYWdYO1xuICAgICAgbGV0IGRyYWdPZmZzZXRCYXNlZE9uU3RhcnQgPSAwO1xuXG4gICAgICBpZiAoZHJhd2VyVHlwZSA9PT0gJ2Zyb250Jykge1xuICAgICAgICBkcmFnT2Zmc2V0QmFzZWRPblN0YXJ0ID0gZ2VzdHVyZVN0YXJ0WCA+IGRyYXdlcldpZHRoID8gZ2VzdHVyZVN0YXJ0WCAtIGRyYXdlcldpZHRoIDogMDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhcnRPZmZzZXRYID0gZHJhZ1ggKyBkcmFnT2Zmc2V0QmFzZWRPblN0YXJ0ICsgKHRoaXMuZHJhd2VyU2hvd24gPyBkcmF3ZXJXaWR0aCA6IDApO1xuICAgICAgY29uc3QgcHJvak9mZnNldFggPSBzdGFydE9mZnNldFggKyBEUkFHX1RPU1MgKiB2ZWxvY2l0eVg7XG4gICAgICBjb25zdCBzaG91bGRPcGVuID0gcHJvak9mZnNldFggPiBkcmF3ZXJXaWR0aCAvIDI7XG5cbiAgICAgIGlmIChzaG91bGRPcGVuKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZURyYXdlcihzdGFydE9mZnNldFgsIGRyYXdlcldpZHRoLCB2ZWxvY2l0eVgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hbmltYXRlRHJhd2VyKHN0YXJ0T2Zmc2V0WCwgMCwgdmVsb2NpdHlYKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVwZGF0ZVNob3dpbmdcIiwgc2hvd2luZyA9PiB7XG4gICAgICB2YXIgX3RoaXMkYWNjZXNzaWJpbGl0eUlzLCBfdGhpcyRwb2ludGVyRXZlbnRzVmksIF90aGlzJHBhbkdlc3R1cmVIYW5kbDtcblxuICAgICAgdGhpcy5kcmF3ZXJTaG93biA9IHNob3dpbmc7XG4gICAgICAoX3RoaXMkYWNjZXNzaWJpbGl0eUlzID0gdGhpcy5hY2Nlc3NpYmlsaXR5SXNNb2RhbFZpZXcuY3VycmVudCkgPT09IG51bGwgfHwgX3RoaXMkYWNjZXNzaWJpbGl0eUlzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRhY2Nlc3NpYmlsaXR5SXMuc2V0TmF0aXZlUHJvcHMoe1xuICAgICAgICBhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWw6IHNob3dpbmdcbiAgICAgIH0pO1xuICAgICAgKF90aGlzJHBvaW50ZXJFdmVudHNWaSA9IHRoaXMucG9pbnRlckV2ZW50c1ZpZXcuY3VycmVudCkgPT09IG51bGwgfHwgX3RoaXMkcG9pbnRlckV2ZW50c1ZpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwb2ludGVyRXZlbnRzVmkuc2V0TmF0aXZlUHJvcHMoe1xuICAgICAgICBwb2ludGVyRXZlbnRzOiBzaG93aW5nID8gJ2F1dG8nIDogJ25vbmUnXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZHJhd2VyUG9zaXRpb24sXG4gICAgICAgIG1pblN3aXBlRGlzdGFuY2UsXG4gICAgICAgIGVkZ2VXaWR0aFxuICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBmcm9tTGVmdCA9IGRyYXdlclBvc2l0aW9uID09PSAnbGVmdCc7IC8vIGdlc3R1cmVPcmllbnRhdGlvbiBpcyAxIGlmIHRoZSBleHBlY3RlZCBnZXN0dXJlIGlzIGZyb20gbGVmdCB0byByaWdodCBhbmRcbiAgICAgIC8vIC0xIG90aGVyd2lzZSBlLmcuIHdoZW4gZHJhd2VyIGlzIG9uIHRoZSBsZWZ0IGFuZCBpcyBjbG9zZWQgd2UgZXhwZWN0IGxlZnRcbiAgICAgIC8vIHRvIHJpZ2h0IGdlc3R1cmUsIHRodXMgb3JpZW50YXRpb24gd2lsbCBiZSAxLlxuXG4gICAgICBjb25zdCBnZXN0dXJlT3JpZW50YXRpb24gPSAoZnJvbUxlZnQgPyAxIDogLTEpICogKHRoaXMuZHJhd2VyU2hvd24gPyAtMSA6IDEpOyAvLyBXaGVuIGRyYXdlciBpcyBjbG9zZWQgd2Ugd2FudCB0aGUgaGl0U2xvcCB0byBiZSBob3Jpem9udGFsbHkgc2hvcnRlciB0aGFuXG4gICAgICAvLyB0aGUgY29udGFpbmVyIHNpemUgYnkgdGhlIHZhbHVlIG9mIFNMT1AuIFRoaXMgd2lsbCBtYWtlIGl0IG9ubHkgYWN0aXZhdGVcbiAgICAgIC8vIHdoZW4gZ2VzdHVyZSBoYXBwZW5zIG5vdCBmdXJ0aGVyIHRoYW4gU0xPUCBhd2F5IGZyb20gdGhlIGVkZ2VcblxuICAgICAgY29uc3QgaGl0U2xvcCA9IGZyb21MZWZ0ID8ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogc2hvd2luZyA/IHVuZGVmaW5lZCA6IGVkZ2VXaWR0aFxuICAgICAgfSA6IHtcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHdpZHRoOiBzaG93aW5nID8gdW5kZWZpbmVkIDogZWRnZVdpZHRoXG4gICAgICB9OyAvLyBAdHMtaWdub3JlIGludGVybmFsIEFQSSwgbWF5YmUgY291bGQgYmUgZml4ZWQgaW4gaGFuZGxlciB0eXBlc1xuXG4gICAgICAoX3RoaXMkcGFuR2VzdHVyZUhhbmRsID0gdGhpcy5wYW5HZXN0dXJlSGFuZGxlci5jdXJyZW50KSA9PT0gbnVsbCB8fCBfdGhpcyRwYW5HZXN0dXJlSGFuZGwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHBhbkdlc3R1cmVIYW5kbC5zZXROYXRpdmVQcm9wcyh7XG4gICAgICAgIGhpdFNsb3AsXG4gICAgICAgIGFjdGl2ZU9mZnNldFg6IGdlc3R1cmVPcmllbnRhdGlvbiAqIG1pblN3aXBlRGlzdGFuY2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYW5pbWF0ZURyYXdlclwiLCAoZnJvbVZhbHVlLCB0b1ZhbHVlLCB2ZWxvY2l0eSwgc3BlZWQpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuZHJhZ1guc2V0VmFsdWUoMCk7XG4gICAgICB0aGlzLnN0YXRlLnRvdWNoWC5zZXRWYWx1ZSh0aGlzLnByb3BzLmRyYXdlclBvc2l0aW9uID09PSAnbGVmdCcgPyAwIDogdGhpcy5zdGF0ZS5jb250YWluZXJXaWR0aCk7XG5cbiAgICAgIGlmIChmcm9tVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBsZXQgbmV4dEZyYW1lUG9zaXRpb24gPSBmcm9tVmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlTmF0aXZlQW5pbWF0aW9ucykge1xuICAgICAgICAgIC8vIFdoZW4gdXNpbmcgbmF0aXZlIGRyaXZlciwgd2UgcHJlZGljdCB0aGUgbmV4dCBwb3NpdGlvbiBvZiB0aGVcbiAgICAgICAgICAvLyBhbmltYXRpb24gYmVjYXVzZSBpdCB0YWtlcyBvbmUgZnJhbWUgb2YgYSByb3VuZHRyaXAgdG8gcGFzcyBSRUxFQVNFXG4gICAgICAgICAgLy8gZXZlbnQgZnJvbSBuYXRpdmUgZHJpdmVyIHRvIEpTIGJlZm9yZSB3ZSBjYW4gc3RhcnQgYW5pbWF0aW5nLiBXaXRob3V0XG4gICAgICAgICAgLy8gaXQsIGl0IGlzIG1vcmUgbm90aWNhYmxlIHRoYXQgdGhlIGZyYW1lIGlzIGRyb3BwZWQuXG4gICAgICAgICAgaWYgKGZyb21WYWx1ZSA8IHRvVmFsdWUgJiYgdmVsb2NpdHkgPiAwKSB7XG4gICAgICAgICAgICBuZXh0RnJhbWVQb3NpdGlvbiA9IE1hdGgubWluKGZyb21WYWx1ZSArIHZlbG9jaXR5IC8gNjAuMCwgdG9WYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmcm9tVmFsdWUgPiB0b1ZhbHVlICYmIHZlbG9jaXR5IDwgMCkge1xuICAgICAgICAgICAgbmV4dEZyYW1lUG9zaXRpb24gPSBNYXRoLm1heChmcm9tVmFsdWUgKyB2ZWxvY2l0eSAvIDYwLjAsIHRvVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUuZHJhd2VyVHJhbnNsYXRpb24uc2V0VmFsdWUobmV4dEZyYW1lUG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3aWxsU2hvdyA9IHRvVmFsdWUgIT09IDA7XG4gICAgICB0aGlzLnVwZGF0ZVNob3dpbmcod2lsbFNob3cpO1xuICAgICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2VkKFNFVFRMSU5HLCB3aWxsU2hvdyk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJhd2VyU3RhdGU6IFNFVFRMSU5HXG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaGlkZVN0YXR1c0Jhcikge1xuICAgICAgICBfcmVhY3ROYXRpdmUuU3RhdHVzQmFyLnNldEhpZGRlbih3aWxsU2hvdywgdGhpcy5wcm9wcy5zdGF0dXNCYXJBbmltYXRpb24gfHwgJ3NsaWRlJyk7XG4gICAgICB9XG5cbiAgICAgIF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5zcHJpbmcodGhpcy5zdGF0ZS5kcmF3ZXJUcmFuc2xhdGlvbiwge1xuICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgYm91bmNpbmVzczogMCxcbiAgICAgICAgdG9WYWx1ZSxcbiAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0aGlzLnByb3BzLnVzZU5hdGl2ZUFuaW1hdGlvbnMsXG4gICAgICAgIHNwZWVkOiBzcGVlZCAhPT0gbnVsbCAmJiBzcGVlZCAhPT0gdm9pZCAwID8gc3BlZWQgOiB1bmRlZmluZWRcbiAgICAgIH0pLnN0YXJ0KCh7XG4gICAgICAgIGZpbmlzaGVkXG4gICAgICB9KSA9PiB7XG4gICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZChJRExFLCB3aWxsU2hvdyk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkcmF3ZXJPcGVuZWQ6IHdpbGxTaG93XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5kcmF3ZXJTdGF0ZSAhPT0gRFJBR0dJTkcpIHtcbiAgICAgICAgICAgIC8vIGl0J3MgcG9zc2lsYmUgdGhhdCB1c2VyIHN0YXJ0ZWQgZHJhZyB3aGlsZSB0aGUgZHJhd2VyXG4gICAgICAgICAgICAvLyB3YXMgc2V0dGxpbmcsIGRvbid0IG92ZXJyaWRlIHN0YXRlIGluIHRoaXMgY2FzZVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGRyYXdlclN0YXRlOiBJRExFXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2lsbFNob3cpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyRvbkRyYXdlck8sIF90aGlzJHByb3BzMztcblxuICAgICAgICAgICAgKF90aGlzJHByb3BzJG9uRHJhd2VyTyA9IChfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzKS5vbkRyYXdlck9wZW4pID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uRHJhd2VyTyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25EcmF3ZXJPLmNhbGwoX3RoaXMkcHJvcHMzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF90aGlzJHByb3BzJG9uRHJhd2VyQywgX3RoaXMkcHJvcHM0O1xuXG4gICAgICAgICAgICAoX3RoaXMkcHJvcHMkb25EcmF3ZXJDID0gKF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMpLm9uRHJhd2VyQ2xvc2UpID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uRHJhd2VyQyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25EcmF3ZXJDLmNhbGwoX3RoaXMkcHJvcHM0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib3BlbkRyYXdlclwiLCAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGVEcmF3ZXIoIC8vIFRPRE86IGRlY2lkZSBpZiBpdCBzaG91bGQgYmUgbnVsbCBvciB1bmRlZmluZWQgaXMgdGhlIHByb3BlciB2YWx1ZVxuICAgICAgdW5kZWZpbmVkLCB0aGlzLnByb3BzLmRyYXdlcldpZHRoLCBvcHRpb25zLnZlbG9jaXR5ID8gb3B0aW9ucy52ZWxvY2l0eSA6IDAsIG9wdGlvbnMuc3BlZWQpOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoZSB1cGRhdGUsIG90aGVyd2lzZSB0aGUgb3ZlcmxheSBpcyBub3QgcmVyZW5kZXJlZCBhbmRcbiAgICAgIC8vIGl0IHdvdWxkIG5vdCBiZSBjbGlja2FibGVcblxuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xvc2VEcmF3ZXJcIiwgKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgLy8gVE9ETzogZGVjaWRlIGlmIGl0IHNob3VsZCBiZSBudWxsIG9yIHVuZGVmaW5lZCBpcyB0aGUgcHJvcGVyIHZhbHVlXG4gICAgICB0aGlzLmFuaW1hdGVEcmF3ZXIodW5kZWZpbmVkLCAwLCBvcHRpb25zLnZlbG9jaXR5ID8gb3B0aW9ucy52ZWxvY2l0eSA6IDAsIG9wdGlvbnMuc3BlZWQpOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoZSB1cGRhdGUsIG90aGVyd2lzZSB0aGUgb3ZlcmxheSBpcyBub3QgcmVyZW5kZXJlZCBhbmRcbiAgICAgIC8vIGl0IHdvdWxkIGJlIHN0aWxsIGNsaWNrYWJsZVxuXG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZW5kZXJPdmVybGF5XCIsICgpID0+IHtcbiAgICAgIC8qIE92ZXJsYXkgc3R5bGVzICovXG4gICAgICAoMCwgX2ludmFyaWFudC5kZWZhdWx0KSh0aGlzLm9wZW5WYWx1ZSwgJ3Nob3VsZCBiZSBzZXQnKTtcbiAgICAgIGxldCBvdmVybGF5T3BhY2l0eTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuZHJhd2VyU3RhdGUgIT09IElETEUpIHtcbiAgICAgICAgb3ZlcmxheU9wYWNpdHkgPSB0aGlzLm9wZW5WYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG92ZXJsYXlPcGFjaXR5ID0gdGhpcy5zdGF0ZS5kcmF3ZXJPcGVuZWQgPyAxIDogMDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZHluYW1pY092ZXJsYXlTdHlsZXMgPSB7XG4gICAgICAgIG9wYWNpdHk6IG92ZXJsYXlPcGFjaXR5LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMub3ZlcmxheUNvbG9yXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9UYXBHZXN0dXJlSGFuZGxlci5UYXBHZXN0dXJlSGFuZGxlciwge1xuICAgICAgICBvbkhhbmRsZXJTdGF0ZUNoYW5nZTogdGhpcy5vblRhcEhhbmRsZXJTdGF0ZUNoYW5nZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZpZXcsIHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogdGhpcy5kcmF3ZXJTaG93biA/ICdhdXRvJyA6ICdub25lJyxcbiAgICAgICAgcmVmOiB0aGlzLnBvaW50ZXJFdmVudHNWaWV3LFxuICAgICAgICBzdHlsZTogW3N0eWxlcy5vdmVybGF5LCBkeW5hbWljT3ZlcmxheVN0eWxlc11cbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlbmRlckRyYXdlclwiLCAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRyYXdlckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgZHJhd2VyV2lkdGgsXG4gICAgICAgIGRyYXdlclBvc2l0aW9uLFxuICAgICAgICBkcmF3ZXJUeXBlLFxuICAgICAgICBkcmF3ZXJDb250YWluZXJTdHlsZSxcbiAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IGZyb21MZWZ0ID0gZHJhd2VyUG9zaXRpb24gPT09ICdsZWZ0JztcbiAgICAgIGNvbnN0IGRyYXdlclNsaWRlID0gZHJhd2VyVHlwZSAhPT0gJ2JhY2snO1xuICAgICAgY29uc3QgY29udGFpbmVyU2xpZGUgPSBkcmF3ZXJUeXBlICE9PSAnZnJvbnQnOyAvLyB3ZSByZWx5IG9uIHJvdyBhbmQgcm93LXJldmVyc2UgZmxleCBkaXJlY3Rpb25zIHRvIHBvc2l0aW9uIHRoZSBkcmF3ZXJcbiAgICAgIC8vIHByb3Blcmx5LiBBcHBhcmVudGx5IGZvciBSVEwgdGhlc2UgYXJlIGZsaXBwZWQgd2hpY2ggcmVxdWlyZXMgdXMgdG8gdXNlXG4gICAgICAvLyB0aGUgb3Bwb3NpdGUgc2V0dGluZyBmb3IgdGhlIGRyYXdlciB0byBhcHBlYXIgZnJvbSBsZWZ0IG9yIHJpZ2h0XG4gICAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGRyYXdlclBvc2l0aW9uIHByb3BcblxuICAgICAgY29uc3QgcmV2ZXJzZUNvbnRlbnREaXJlY3Rpb24gPSBfcmVhY3ROYXRpdmUuSTE4bk1hbmFnZXIuaXNSVEwgPyBmcm9tTGVmdCA6ICFmcm9tTGVmdDtcbiAgICAgIGNvbnN0IGR5bmFtaWNEcmF3ZXJTdHlsZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZHJhd2VyQmFja2dyb3VuZENvbG9yLFxuICAgICAgICB3aWR0aDogZHJhd2VyV2lkdGhcbiAgICAgIH07XG4gICAgICBjb25zdCBvcGVuVmFsdWUgPSB0aGlzLm9wZW5WYWx1ZTtcbiAgICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKG9wZW5WYWx1ZSwgJ3Nob3VsZCBiZSBzZXQnKTtcbiAgICAgIGxldCBjb250YWluZXJTdHlsZXM7XG5cbiAgICAgIGlmIChjb250YWluZXJTbGlkZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXJUcmFuc2xhdGVYID0gb3BlblZhbHVlLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IGZyb21MZWZ0ID8gWzAsIGRyYXdlcldpZHRoXSA6IFswLCAtZHJhd2VyV2lkdGhdLFxuICAgICAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnXG4gICAgICAgIH0pO1xuICAgICAgICBjb250YWluZXJTdHlsZXMgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBbe1xuICAgICAgICAgICAgdHJhbnNsYXRlWDogY29udGFpbmVyVHJhbnNsYXRlWFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGxldCBkcmF3ZXJUcmFuc2xhdGVYID0gMDtcblxuICAgICAgaWYgKGRyYXdlclNsaWRlKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlZERyYXdlck9mZnNldCA9IGZyb21MZWZ0ID8gLWRyYXdlcldpZHRoIDogZHJhd2VyV2lkdGg7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZHJhd2VyU3RhdGUgIT09IElETEUpIHtcbiAgICAgICAgICBkcmF3ZXJUcmFuc2xhdGVYID0gb3BlblZhbHVlLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbY2xvc2VkRHJhd2VyT2Zmc2V0LCAwXSxcbiAgICAgICAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHJhd2VyVHJhbnNsYXRlWCA9IHRoaXMuc3RhdGUuZHJhd2VyT3BlbmVkID8gMCA6IGNsb3NlZERyYXdlck9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkcmF3ZXJTdHlsZXMgPSB7XG4gICAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgICB0cmFuc2xhdGVYOiBkcmF3ZXJUcmFuc2xhdGVYXG4gICAgICAgIH1dLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiByZXZlcnNlQ29udGVudERpcmVjdGlvbiA/ICdyb3ctcmV2ZXJzZScgOiAncm93J1xuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3ROYXRpdmUuQW5pbWF0ZWQuVmlldywge1xuICAgICAgICBzdHlsZTogc3R5bGVzLm1haW4sXG4gICAgICAgIG9uTGF5b3V0OiB0aGlzLmhhbmRsZUNvbnRhaW5lckxheW91dFxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZpZXcsIHtcbiAgICAgICAgc3R5bGU6IFtkcmF3ZXJUeXBlID09PSAnZnJvbnQnID8gc3R5bGVzLmNvbnRhaW5lck9uQmFjayA6IHN0eWxlcy5jb250YWluZXJJbkZyb250LCBjb250YWluZXJTdHlsZXMsIGNvbnRlbnRDb250YWluZXJTdHlsZV0sXG4gICAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk6IHRoaXMuZHJhd2VyU2hvd24gPyAnbm8taGlkZS1kZXNjZW5kYW50cycgOiAneWVzJ1xuICAgICAgfSwgdHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMub3BlblZhbHVlKSA6IHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMucmVuZGVyT3ZlcmxheSgpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZpZXcsIHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJib3gtbm9uZVwiLFxuICAgICAgICByZWY6IHRoaXMuYWNjZXNzaWJpbGl0eUlzTW9kYWxWaWV3LFxuICAgICAgICBhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWw6IHRoaXMuZHJhd2VyU2hvd24sXG4gICAgICAgIHN0eWxlOiBbc3R5bGVzLmRyYXdlckNvbnRhaW5lciwgZHJhd2VyU3R5bGVzLCBkcmF3ZXJDb250YWluZXJTdHlsZV1cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yZWFjdE5hdGl2ZS5WaWV3LCB7XG4gICAgICAgIHN0eWxlOiBkeW5hbWljRHJhd2VyU3R5bGVzXG4gICAgICB9LCB0aGlzLnByb3BzLnJlbmRlck5hdmlnYXRpb25WaWV3KHRoaXMub3BlblZhbHVlKSkpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNldFBhbkdlc3R1cmVSZWZcIiwgcmVmID0+IHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRvbkdlc3R1cmUsIF90aGlzJHByb3BzNTtcblxuICAgICAgLy8gVE9ETyhUUyk6IG1ha2Ugc3VyZSBpdCBpcyBPSyB0YWtlbiBmcm9tXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9pc3N1ZXMvMzEwNjUjaXNzdWVjb21tZW50LTU5NjA4MTg0MlxuICAgICAgdGhpcy5wYW5HZXN0dXJlSGFuZGxlci5jdXJyZW50ID0gcmVmO1xuICAgICAgKF90aGlzJHByb3BzJG9uR2VzdHVyZSA9IChfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzKS5vbkdlc3R1cmVSZWYpID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uR2VzdHVyZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25HZXN0dXJlLmNhbGwoX3RoaXMkcHJvcHM1LCByZWYpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgX2RyYWdYID0gbmV3IF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5WYWx1ZSgwKTtcblxuICAgIGNvbnN0IF90b3VjaFggPSBuZXcgX3JlYWN0TmF0aXZlLkFuaW1hdGVkLlZhbHVlKDApO1xuXG4gICAgY29uc3QgX2RyYXdlclRyYW5zbGF0aW9uID0gbmV3IF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5WYWx1ZSgwKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkcmFnWDogX2RyYWdYLFxuICAgICAgdG91Y2hYOiBfdG91Y2hYLFxuICAgICAgZHJhd2VyVHJhbnNsYXRpb246IF9kcmF3ZXJUcmFuc2xhdGlvbixcbiAgICAgIGNvbnRhaW5lcldpZHRoOiAwLFxuICAgICAgZHJhd2VyU3RhdGU6IElETEUsXG4gICAgICBkcmF3ZXJPcGVuZWQ6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZUFuaW1hdGVkRXZlbnQoX3Byb3BzLCB0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShwcm9wcywgc3RhdGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kcmF3ZXJQb3NpdGlvbiAhPT0gcHJvcHMuZHJhd2VyUG9zaXRpb24gfHwgdGhpcy5wcm9wcy5kcmF3ZXJXaWR0aCAhPT0gcHJvcHMuZHJhd2VyV2lkdGggfHwgdGhpcy5wcm9wcy5kcmF3ZXJUeXBlICE9PSBwcm9wcy5kcmF3ZXJUeXBlIHx8IHRoaXMuc3RhdGUuY29udGFpbmVyV2lkdGggIT09IHN0YXRlLmNvbnRhaW5lcldpZHRoKSB7XG4gICAgICB0aGlzLnVwZGF0ZUFuaW1hdGVkRXZlbnQocHJvcHMsIHN0YXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBkcmF3ZXJQb3NpdGlvbixcbiAgICAgIGRyYXdlckxvY2tNb2RlLFxuICAgICAgZWRnZVdpZHRoLFxuICAgICAgbWluU3dpcGVEaXN0YW5jZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZyb21MZWZ0ID0gZHJhd2VyUG9zaXRpb24gPT09ICdsZWZ0JzsgLy8gZ2VzdHVyZU9yaWVudGF0aW9uIGlzIDEgaWYgdGhlIGV4cGVjdGVkIGdlc3R1cmUgaXMgZnJvbSBsZWZ0IHRvIHJpZ2h0IGFuZFxuICAgIC8vIC0xIG90aGVyd2lzZSBlLmcuIHdoZW4gZHJhd2VyIGlzIG9uIHRoZSBsZWZ0IGFuZCBpcyBjbG9zZWQgd2UgZXhwZWN0IGxlZnRcbiAgICAvLyB0byByaWdodCBnZXN0dXJlLCB0aHVzIG9yaWVudGF0aW9uIHdpbGwgYmUgMS5cblxuICAgIGNvbnN0IGdlc3R1cmVPcmllbnRhdGlvbiA9IChmcm9tTGVmdCA/IDEgOiAtMSkgKiAodGhpcy5kcmF3ZXJTaG93biA/IC0xIDogMSk7IC8vIFdoZW4gZHJhd2VyIGlzIGNsb3NlZCB3ZSB3YW50IHRoZSBoaXRTbG9wIHRvIGJlIGhvcml6b250YWxseSBzaG9ydGVyIHRoYW5cbiAgICAvLyB0aGUgY29udGFpbmVyIHNpemUgYnkgdGhlIHZhbHVlIG9mIFNMT1AuIFRoaXMgd2lsbCBtYWtlIGl0IG9ubHkgYWN0aXZhdGVcbiAgICAvLyB3aGVuIGdlc3R1cmUgaGFwcGVucyBub3QgZnVydGhlciB0aGFuIFNMT1AgYXdheSBmcm9tIHRoZSBlZGdlXG5cbiAgICBjb25zdCBoaXRTbG9wID0gZnJvbUxlZnQgPyB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6IHRoaXMuZHJhd2VyU2hvd24gPyB1bmRlZmluZWQgOiBlZGdlV2lkdGhcbiAgICB9IDoge1xuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogdGhpcy5kcmF3ZXJTaG93biA/IHVuZGVmaW5lZCA6IGVkZ2VXaWR0aFxuICAgIH07XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9QYW5HZXN0dXJlSGFuZGxlci5QYW5HZXN0dXJlSGFuZGxlciAvLyBAdHMtaWdub3JlIGNvdWxkIGJlIGZpeGVkIGluIGhhbmRsZXIgdHlwZXNcbiAgICAsIHtcbiAgICAgIHVzZXJTZWxlY3Q6IHRoaXMucHJvcHMudXNlclNlbGVjdCxcbiAgICAgIHJlZjogdGhpcy5zZXRQYW5HZXN0dXJlUmVmLFxuICAgICAgaGl0U2xvcDogaGl0U2xvcCxcbiAgICAgIGFjdGl2ZU9mZnNldFg6IGdlc3R1cmVPcmllbnRhdGlvbiAqIG1pblN3aXBlRGlzdGFuY2UsXG4gICAgICBmYWlsT2Zmc2V0WTogWy0xNSwgMTVdLFxuICAgICAgb25HZXN0dXJlRXZlbnQ6IHRoaXMub25HZXN0dXJlRXZlbnQsXG4gICAgICBvbkhhbmRsZXJTdGF0ZUNoYW5nZTogdGhpcy5vcGVuaW5nSGFuZGxlclN0YXRlQ2hhbmdlLFxuICAgICAgZW5hYmxlVHJhY2twYWRUd29GaW5nZXJHZXN0dXJlOiB0aGlzLnByb3BzLmVuYWJsZVRyYWNrcGFkVHdvRmluZ2VyR2VzdHVyZSxcbiAgICAgIGVuYWJsZWQ6IGRyYXdlckxvY2tNb2RlICE9PSAnbG9ja2VkLWNsb3NlZCcgJiYgZHJhd2VyTG9ja01vZGUgIT09ICdsb2NrZWQtb3BlbidcbiAgICB9LCB0aGlzLnJlbmRlckRyYXdlcigpKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERyYXdlckxheW91dDtcblxuX2RlZmluZVByb3BlcnR5KERyYXdlckxheW91dCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkcmF3ZXJXaWR0aDogMjAwLFxuICBkcmF3ZXJQb3NpdGlvbjogJ2xlZnQnLFxuICB1c2VOYXRpdmVBbmltYXRpb25zOiB0cnVlLFxuICBkcmF3ZXJUeXBlOiAnZnJvbnQnLFxuICBlZGdlV2lkdGg6IDIwLFxuICBtaW5Td2lwZURpc3RhbmNlOiAzLFxuICBvdmVybGF5Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNyknLFxuICBkcmF3ZXJMb2NrTW9kZTogJ3VubG9ja2VkJyxcbiAgZW5hYmxlVHJhY2twYWRUd29GaW5nZXJHZXN0dXJlOiBmYWxzZVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcmF3ZXJMYXlvdXQsIFwicG9zaXRpb25zXCIsIHtcbiAgTGVmdDogJ2xlZnQnLFxuICBSaWdodDogJ3JpZ2h0J1xufSk7XG5cbmNvbnN0IHN0eWxlcyA9IF9yZWFjdE5hdGl2ZS5TdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGRyYXdlckNvbnRhaW5lcjogeyAuLi5fcmVhY3ROYXRpdmUuU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGxPYmplY3QsXG4gICAgekluZGV4OiAxMDAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnXG4gIH0sXG4gIGNvbnRhaW5lckluRnJvbnQ6IHsgLi4uX3JlYWN0TmF0aXZlLlN0eWxlU2hlZXQuYWJzb2x1dGVGaWxsT2JqZWN0LFxuICAgIHpJbmRleDogMTAwMlxuICB9LFxuICBjb250YWluZXJPbkJhY2s6IHsgLi4uX3JlYWN0TmF0aXZlLlN0eWxlU2hlZXQuYWJzb2x1dGVGaWxsT2JqZWN0XG4gIH0sXG4gIG1haW46IHtcbiAgICBmbGV4OiAxLFxuICAgIHpJbmRleDogMCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfSxcbiAgb3ZlcmxheTogeyAuLi5fcmVhY3ROYXRpdmUuU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGxPYmplY3QsXG4gICAgekluZGV4OiAxMDAwXG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJhd2VyTGF5b3V0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9pbnZhcmlhbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0TmF0aXZlIiwiX1Bhbkdlc3R1cmVIYW5kbGVyIiwiX1RhcEdlc3R1cmVIYW5kbGVyIiwiX1N0YXRlIiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJEUkFHX1RPU1MiLCJJRExFIiwiRFJBR0dJTkciLCJTRVRUTElORyIsIkRyYXdlckxheW91dCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiX3Byb3BzIiwiY3JlYXRlUmVmIiwicHJvcHMiLCJzdGF0ZSIsImRyYXdlclBvc2l0aW9uIiwiZHJhd2VyV2lkdGgiLCJkcmF3ZXJUeXBlIiwiZHJhZ1giLCJkcmFnWFZhbHVlIiwidG91Y2hYIiwidG91Y2hYVmFsdWUiLCJkcmF3ZXJUcmFuc2xhdGlvbiIsImNvbnRhaW5lcldpZHRoIiwiQW5pbWF0ZWQiLCJtdWx0aXBseSIsIlZhbHVlIiwiYWRkIiwic2V0VmFsdWUiLCJ0cmFuc2xhdGlvblgiLCJzdGFydFBvc2l0aW9uWCIsImRyYWdPZmZzZXRGcm9tT25TdGFydFBvc2l0aW9uIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJvcGVuVmFsdWUiLCJleHRyYXBvbGF0ZSIsImdlc3R1cmVPcHRpb25zIiwidXNlTmF0aXZlRHJpdmVyIiwidXNlTmF0aXZlQW5pbWF0aW9ucyIsIm9uRHJhd2VyU2xpZGUiLCJsaXN0ZW5lciIsImV2IiwiX3RoaXMkcHJvcHMkb25EcmF3ZXJTIiwiX3RoaXMkcHJvcHMiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJuYXRpdmVFdmVudCIsInBvc2l0aW9uIiwib25HZXN0dXJlRXZlbnQiLCJldmVudCIsIngiLCJzZXRTdGF0ZSIsImxheW91dCIsIndpZHRoIiwibmV3U3RhdGUiLCJkcmF3ZXJXaWxsU2hvdyIsIl90aGlzJHByb3BzJG9uRHJhd2VyUzIiLCJfdGhpcyRwcm9wczIiLCJvbkRyYXdlclN0YXRlQ2hhbmdlZCIsIm9sZFN0YXRlIiwiU3RhdGUiLCJBQ1RJVkUiLCJoYW5kbGVSZWxlYXNlIiwiZW1pdFN0YXRlQ2hhbmdlZCIsImRyYXdlclN0YXRlIiwia2V5Ym9hcmREaXNtaXNzTW9kZSIsIktleWJvYXJkIiwiZGlzbWlzcyIsImhpZGVTdGF0dXNCYXIiLCJTdGF0dXNCYXIiLCJzZXRIaWRkZW4iLCJzdGF0dXNCYXJBbmltYXRpb24iLCJkcmF3ZXJTaG93biIsImRyYXdlckxvY2tNb2RlIiwiY2xvc2VEcmF3ZXIiLCJ2ZWxvY2l0eVgiLCJnZXN0dXJlU3RhcnRYIiwiZHJhZ09mZnNldEJhc2VkT25TdGFydCIsInN0YXJ0T2Zmc2V0WCIsInByb2pPZmZzZXRYIiwic2hvdWxkT3BlbiIsImFuaW1hdGVEcmF3ZXIiLCJzaG93aW5nIiwiX3RoaXMkYWNjZXNzaWJpbGl0eUlzIiwiX3RoaXMkcG9pbnRlckV2ZW50c1ZpIiwiX3RoaXMkcGFuR2VzdHVyZUhhbmRsIiwiYWNjZXNzaWJpbGl0eUlzTW9kYWxWaWV3IiwiY3VycmVudCIsInNldE5hdGl2ZVByb3BzIiwiYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsIiwicG9pbnRlckV2ZW50c1ZpZXciLCJwb2ludGVyRXZlbnRzIiwibWluU3dpcGVEaXN0YW5jZSIsImVkZ2VXaWR0aCIsImZyb21MZWZ0IiwiZ2VzdHVyZU9yaWVudGF0aW9uIiwiaGl0U2xvcCIsImxlZnQiLCJ1bmRlZmluZWQiLCJyaWdodCIsInBhbkdlc3R1cmVIYW5kbGVyIiwiYWN0aXZlT2Zmc2V0WCIsImZyb21WYWx1ZSIsInRvVmFsdWUiLCJ2ZWxvY2l0eSIsInNwZWVkIiwibmV4dEZyYW1lUG9zaXRpb24iLCJtaW4iLCJtYXgiLCJ3aWxsU2hvdyIsInVwZGF0ZVNob3dpbmciLCJzcHJpbmciLCJib3VuY2luZXNzIiwic3RhcnQiLCJmaW5pc2hlZCIsImRyYXdlck9wZW5lZCIsIl90aGlzJHByb3BzJG9uRHJhd2VyTyIsIl90aGlzJHByb3BzMyIsIm9uRHJhd2VyT3BlbiIsIl90aGlzJHByb3BzJG9uRHJhd2VyQyIsIl90aGlzJHByb3BzNCIsIm9uRHJhd2VyQ2xvc2UiLCJvcHRpb25zIiwiZm9yY2VVcGRhdGUiLCJvdmVybGF5T3BhY2l0eSIsImR5bmFtaWNPdmVybGF5U3R5bGVzIiwib3BhY2l0eSIsImJhY2tncm91bmRDb2xvciIsIm92ZXJsYXlDb2xvciIsImNyZWF0ZUVsZW1lbnQiLCJUYXBHZXN0dXJlSGFuZGxlciIsIm9uSGFuZGxlclN0YXRlQ2hhbmdlIiwib25UYXBIYW5kbGVyU3RhdGVDaGFuZ2UiLCJWaWV3IiwicmVmIiwic3R5bGUiLCJzdHlsZXMiLCJvdmVybGF5IiwiZHJhd2VyQmFja2dyb3VuZENvbG9yIiwiZHJhd2VyQ29udGFpbmVyU3R5bGUiLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJkcmF3ZXJTbGlkZSIsImNvbnRhaW5lclNsaWRlIiwicmV2ZXJzZUNvbnRlbnREaXJlY3Rpb24iLCJJMThuTWFuYWdlciIsImlzUlRMIiwiZHluYW1pY0RyYXdlclN0eWxlcyIsImNvbnRhaW5lclN0eWxlcyIsImNvbnRhaW5lclRyYW5zbGF0ZVgiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGVYIiwiZHJhd2VyVHJhbnNsYXRlWCIsImNsb3NlZERyYXdlck9mZnNldCIsImRyYXdlclN0eWxlcyIsImZsZXhEaXJlY3Rpb24iLCJtYWluIiwib25MYXlvdXQiLCJoYW5kbGVDb250YWluZXJMYXlvdXQiLCJjb250YWluZXJPbkJhY2siLCJjb250YWluZXJJbkZyb250IiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsImNoaWxkcmVuIiwicmVuZGVyT3ZlcmxheSIsImRyYXdlckNvbnRhaW5lciIsInJlbmRlck5hdmlnYXRpb25WaWV3IiwiX3RoaXMkcHJvcHMkb25HZXN0dXJlIiwiX3RoaXMkcHJvcHM1Iiwib25HZXN0dXJlUmVmIiwiX2RyYWdYIiwiX3RvdWNoWCIsIl9kcmF3ZXJUcmFuc2xhdGlvbiIsInVwZGF0ZUFuaW1hdGVkRXZlbnQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJyZW5kZXIiLCJQYW5HZXN0dXJlSGFuZGxlciIsInVzZXJTZWxlY3QiLCJzZXRQYW5HZXN0dXJlUmVmIiwiZmFpbE9mZnNldFkiLCJvcGVuaW5nSGFuZGxlclN0YXRlQ2hhbmdlIiwiZW5hYmxlVHJhY2twYWRUd29GaW5nZXJHZXN0dXJlIiwiZW5hYmxlZCIsInJlbmRlckRyYXdlciIsIkxlZnQiLCJSaWdodCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJ6SW5kZXgiLCJmbGV4Iiwib3ZlcmZsb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"PureNativeButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureHandlerButton.default;\n    }\n}));\nexports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ../handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nvar _GestureHandlerButton = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerButton */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst RawButton = (0, _createNativeWrapper.default)(_GestureHandlerButton.default, {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: false\n});\nexports.RawButton = RawButton;\nclass BaseButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"lastActive\", void 0);\n        _defineProperty(this, \"longPressTimeout\", void 0);\n        _defineProperty(this, \"longPressDetected\", void 0);\n        _defineProperty(this, \"handleEvent\", ({ nativeEvent })=>{\n            const { state, oldState, pointerInside } = nativeEvent;\n            const active = pointerInside && state === _State.State.ACTIVE;\n            if (active !== this.lastActive && this.props.onActiveStateChange) {\n                this.props.onActiveStateChange(active);\n            }\n            if (!this.longPressDetected && oldState === _State.State.ACTIVE && state !== _State.State.CANCELLED && this.lastActive && this.props.onPress) {\n                this.props.onPress(active);\n            }\n            if (!this.lastActive && // NativeViewGestureHandler sends different events based on platform\n            state === (_reactNative.Platform.OS !== \"android\" ? _State.State.ACTIVE : _State.State.BEGAN) && pointerInside) {\n                this.longPressDetected = false;\n                if (this.props.onLongPress) {\n                    this.longPressTimeout = setTimeout(this.onLongPress, this.props.delayLongPress);\n                }\n            } else if (state === _State.State.ACTIVE && !pointerInside && this.longPressTimeout !== undefined) {\n                clearTimeout(this.longPressTimeout);\n                this.longPressTimeout = undefined;\n            } else if (this.longPressTimeout !== undefined && (state === _State.State.END || state === _State.State.CANCELLED || state === _State.State.FAILED)) {\n                clearTimeout(this.longPressTimeout);\n                this.longPressTimeout = undefined;\n            }\n            this.lastActive = active;\n        });\n        _defineProperty(this, \"onLongPress\", ()=>{\n            var _this$props$onLongPre, _this$props;\n            this.longPressDetected = true;\n            (_this$props$onLongPre = (_this$props = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props);\n        });\n        _defineProperty(this, \"onHandlerStateChange\", (e)=>{\n            var _this$props$onHandler, _this$props2;\n            (_this$props$onHandler = (_this$props2 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props2, e);\n            this.handleEvent(e);\n        });\n        _defineProperty(this, \"onGestureEvent\", (e)=>{\n            var _this$props$onGesture, _this$props3;\n            (_this$props$onGesture = (_this$props3 = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3, e);\n            this.handleEvent(e); // TODO: maybe it is not correct\n        });\n        this.lastActive = false;\n        this.longPressDetected = false;\n    }\n    render() {\n        const { rippleColor, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(RawButton, _extends({\n            rippleColor: (0, _reactNative.processColor)(rippleColor)\n        }, rest, {\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.onHandlerStateChange\n        }));\n    }\n}\nexports.BaseButton = BaseButton;\n_defineProperty(BaseButton, \"defaultProps\", {\n    delayLongPress: 600\n});\nconst AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);\nconst btnStyles = _reactNative.StyleSheet.create({\n    underlay: {\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        bottom: 0,\n        top: 0\n    }\n});\nclass RectButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"opacity\", void 0);\n        _defineProperty(this, \"onActiveStateChange\", (active)=>{\n            var _this$props$onActiveS, _this$props4;\n            if (_reactNative.Platform.OS !== \"android\") {\n                this.opacity.setValue(active ? this.props.activeOpacity : 0);\n            }\n            (_this$props$onActiveS = (_this$props4 = this.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props4, active);\n        });\n        this.opacity = new _reactNative.Animated.Value(0);\n    }\n    render() {\n        const { children, style, ...rest } = this.props;\n        const resolvedStyle = _reactNative.StyleSheet.flatten(style !== null && style !== void 0 ? style : {});\n        return /*#__PURE__*/ React.createElement(BaseButton, _extends({}, rest, {\n            style: resolvedStyle,\n            onActiveStateChange: this.onActiveStateChange\n        }), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                btnStyles.underlay,\n                {\n                    opacity: this.opacity,\n                    backgroundColor: this.props.underlayColor,\n                    borderRadius: resolvedStyle.borderRadius,\n                    borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n                    borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n                    borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n                    borderBottomRightRadius: resolvedStyle.borderBottomRightRadius\n                }\n            ]\n        }), children);\n    }\n}\nexports.RectButton = RectButton;\n_defineProperty(RectButton, \"defaultProps\", {\n    activeOpacity: 0.105,\n    underlayColor: \"black\"\n});\nclass BorderlessButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"opacity\", void 0);\n        _defineProperty(this, \"onActiveStateChange\", (active)=>{\n            var _this$props$onActiveS2, _this$props5;\n            if (_reactNative.Platform.OS !== \"android\") {\n                this.opacity.setValue(active ? this.props.activeOpacity : 1);\n            }\n            (_this$props$onActiveS2 = (_this$props5 = this.props).onActiveStateChange) === null || _this$props$onActiveS2 === void 0 ? void 0 : _this$props$onActiveS2.call(_this$props5, active);\n        });\n        this.opacity = new _reactNative.Animated.Value(1);\n    }\n    render() {\n        const { children, style, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(AnimatedBaseButton, _extends({}, rest, {\n            onActiveStateChange: this.onActiveStateChange,\n            style: [\n                style,\n                _reactNative.Platform.OS === \"ios\" && {\n                    opacity: this.opacity\n                }\n            ]\n        }), children);\n    }\n}\nexports.BorderlessButton = BorderlessButton;\n_defineProperty(BorderlessButton, \"defaultProps\", {\n    activeOpacity: 0.3,\n    borderless: true\n}); //# sourceMappingURL=GestureButtons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy9HZXN0dXJlQnV0dG9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkgsb0RBQW1EO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPQyxzQkFBc0JDLE9BQU87SUFDdEM7QUFDRixDQUFDLEVBQUM7QUFDRkwsd0JBQXdCLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUU5RixJQUFJVSxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlFLHVCQUF1QkMsdUJBQXVCSCxtQkFBT0EsQ0FBQyxpSUFBaUM7QUFFM0YsSUFBSVIsd0JBQXdCVyx1QkFBdUJILG1CQUFPQSxDQUFDLCtIQUF3QjtBQUVuRixJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQyxtRkFBVTtBQUUvQixTQUFTRyx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRVosU0FBU1k7SUFBSTtBQUFHO0FBRTlGLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNWLHdCQUF3Qk0sR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRVosU0FBU1k7UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFB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YyxDQUFBQSx5QkFBeUIsQ0FBQ0MsZUFBZSxJQUFJLENBQUN0RSxLQUFLLEVBQUVTLG1CQUFtQixNQUFNLFFBQVE0RCwyQkFBMkIsS0FBSyxJQUFJLEtBQUssSUFBSUEsdUJBQXVCdkYsSUFBSSxDQUFDd0YsY0FBY2pFO1FBQ2hMO1FBRUEsSUFBSSxDQUFDZ0QsT0FBTyxHQUFHLElBQUl2RixhQUFhMEUsUUFBUSxDQUFDZ0IsS0FBSyxDQUFDO0lBQ2pEO0lBRUF0QixTQUFTO1FBQ1AsTUFBTSxFQUNKdUIsUUFBUSxFQUNSQyxLQUFLLEVBQ0wsR0FBR3RCLE1BQ0osR0FBRyxJQUFJLENBQUNwQyxLQUFLO1FBQ2QsT0FBTyxXQUFXLEdBQUVyQyxNQUFNMEUsYUFBYSxDQUFDRSxvQkFBb0J0RCxTQUFTLENBQUMsR0FBR21ELE1BQU07WUFDN0UzQixxQkFBcUIsSUFBSSxDQUFDQSxtQkFBbUI7WUFDN0NpRCxPQUFPO2dCQUFDQTtnQkFBTzVGLGFBQWErQyxRQUFRLENBQUNDLEVBQUUsS0FBSyxTQUFTO29CQUNuRHVDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO2dCQUN2QjthQUFFO1FBQ0osSUFBSUk7SUFDTjtBQUVGO0FBRUF4Ryx3QkFBd0IsR0FBR007QUFFM0JrQyxnQkFBZ0JsQyxrQkFBa0IsZ0JBQWdCO0lBQ2hEZ0csZUFBZTtJQUNmZ0IsWUFBWTtBQUNkLElBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvR2VzdHVyZUJ1dHRvbnMuanM/ZGQwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlB1cmVOYXRpdmVCdXR0b25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0dlc3R1cmVIYW5kbGVyQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuZXhwb3J0cy5Cb3JkZXJsZXNzQnV0dG9uID0gZXhwb3J0cy5SZWN0QnV0dG9uID0gZXhwb3J0cy5CYXNlQnV0dG9uID0gZXhwb3J0cy5SYXdCdXR0b24gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG52YXIgX2NyZWF0ZU5hdGl2ZVdyYXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9oYW5kbGVycy9jcmVhdGVOYXRpdmVXcmFwcGVyXCIpKTtcblxudmFyIF9HZXN0dXJlSGFuZGxlckJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2VzdHVyZUhhbmRsZXJCdXR0b25cIikpO1xuXG52YXIgX1N0YXRlID0gcmVxdWlyZShcIi4uL1N0YXRlXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuY29uc3QgUmF3QnV0dG9uID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9HZXN0dXJlSGFuZGxlckJ1dHRvbi5kZWZhdWx0LCB7XG4gIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiBmYWxzZSxcbiAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0OiBmYWxzZVxufSk7XG5leHBvcnRzLlJhd0J1dHRvbiA9IFJhd0J1dHRvbjtcblxuY2xhc3MgQmFzZUJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibGFzdEFjdGl2ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibG9uZ1ByZXNzVGltZW91dFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibG9uZ1ByZXNzRGV0ZWN0ZWRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmRsZUV2ZW50XCIsICh7XG4gICAgICBuYXRpdmVFdmVudFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIG9sZFN0YXRlLFxuICAgICAgICBwb2ludGVySW5zaWRlXG4gICAgICB9ID0gbmF0aXZlRXZlbnQ7XG4gICAgICBjb25zdCBhY3RpdmUgPSBwb2ludGVySW5zaWRlICYmIHN0YXRlID09PSBfU3RhdGUuU3RhdGUuQUNUSVZFO1xuXG4gICAgICBpZiAoYWN0aXZlICE9PSB0aGlzLmxhc3RBY3RpdmUgJiYgdGhpcy5wcm9wcy5vbkFjdGl2ZVN0YXRlQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25BY3RpdmVTdGF0ZUNoYW5nZShhY3RpdmUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubG9uZ1ByZXNzRGV0ZWN0ZWQgJiYgb2xkU3RhdGUgPT09IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUgJiYgc3RhdGUgIT09IF9TdGF0ZS5TdGF0ZS5DQU5DRUxMRUQgJiYgdGhpcy5sYXN0QWN0aXZlICYmIHRoaXMucHJvcHMub25QcmVzcykge1xuICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3MoYWN0aXZlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmxhc3RBY3RpdmUgJiYgLy8gTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyIHNlbmRzIGRpZmZlcmVudCBldmVudHMgYmFzZWQgb24gcGxhdGZvcm1cbiAgICAgIHN0YXRlID09PSAoX3JlYWN0TmF0aXZlLlBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcgPyBfU3RhdGUuU3RhdGUuQUNUSVZFIDogX1N0YXRlLlN0YXRlLkJFR0FOKSAmJiBwb2ludGVySW5zaWRlKSB7XG4gICAgICAgIHRoaXMubG9uZ1ByZXNzRGV0ZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkxvbmdQcmVzcykge1xuICAgICAgICAgIHRoaXMubG9uZ1ByZXNzVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5vbkxvbmdQcmVzcywgdGhpcy5wcm9wcy5kZWxheUxvbmdQcmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIC8vIGNhbmNlbCBsb25ncHJlc3MgdGltZW91dCBpZiBpdCdzIHNldCBhbmQgdGhlIGZpbmdlciBtb3ZlZCBvdXQgb2YgdGhlIHZpZXdcbiAgICAgIHN0YXRlID09PSBfU3RhdGUuU3RhdGUuQUNUSVZFICYmICFwb2ludGVySW5zaWRlICYmIHRoaXMubG9uZ1ByZXNzVGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgICB0aGlzLmxvbmdQcmVzc1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKCAvLyBjYW5jZWwgbG9uZ3ByZXNzIHRpbWVvdXQgaWYgaXQncyBzZXQgYW5kIHRoZSBnZXN0dXJlIGhhcyBmaW5pc2hlZFxuICAgICAgdGhpcy5sb25nUHJlc3NUaW1lb3V0ICE9PSB1bmRlZmluZWQgJiYgKHN0YXRlID09PSBfU3RhdGUuU3RhdGUuRU5EIHx8IHN0YXRlID09PSBfU3RhdGUuU3RhdGUuQ0FOQ0VMTEVEIHx8IHN0YXRlID09PSBfU3RhdGUuU3RhdGUuRkFJTEVEKSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICAgICAgdGhpcy5sb25nUHJlc3NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxhc3RBY3RpdmUgPSBhY3RpdmU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJvbkxvbmdQcmVzc1wiLCAoKSA9PiB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25Mb25nUHJlLCBfdGhpcyRwcm9wcztcblxuICAgICAgdGhpcy5sb25nUHJlc3NEZXRlY3RlZCA9IHRydWU7XG4gICAgICAoX3RoaXMkcHJvcHMkb25Mb25nUHJlID0gKF90aGlzJHByb3BzID0gdGhpcy5wcm9wcykub25Mb25nUHJlc3MpID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uTG9uZ1ByZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25Mb25nUHJlLmNhbGwoX3RoaXMkcHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib25IYW5kbGVyU3RhdGVDaGFuZ2VcIiwgZSA9PiB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25IYW5kbGVyLCBfdGhpcyRwcm9wczI7XG5cbiAgICAgIChfdGhpcyRwcm9wcyRvbkhhbmRsZXIgPSAoX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcykub25IYW5kbGVyU3RhdGVDaGFuZ2UpID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uSGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25IYW5kbGVyLmNhbGwoX3RoaXMkcHJvcHMyLCBlKTtcbiAgICAgIHRoaXMuaGFuZGxlRXZlbnQoZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJvbkdlc3R1cmVFdmVudFwiLCBlID0+IHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRvbkdlc3R1cmUsIF90aGlzJHByb3BzMztcblxuICAgICAgKF90aGlzJHByb3BzJG9uR2VzdHVyZSA9IChfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzKS5vbkdlc3R1cmVFdmVudCkgPT09IG51bGwgfHwgX3RoaXMkcHJvcHMkb25HZXN0dXJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvbkdlc3R1cmUuY2FsbChfdGhpcyRwcm9wczMsIGUpO1xuICAgICAgdGhpcy5oYW5kbGVFdmVudChlKTsgLy8gVE9ETzogbWF5YmUgaXQgaXMgbm90IGNvcnJlY3RcbiAgICB9KTtcblxuICAgIHRoaXMubGFzdEFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMubG9uZ1ByZXNzRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICByaXBwbGVDb2xvcixcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmF3QnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgICByaXBwbGVDb2xvcjogKDAsIF9yZWFjdE5hdGl2ZS5wcm9jZXNzQ29sb3IpKHJpcHBsZUNvbG9yKVxuICAgIH0sIHJlc3QsIHtcbiAgICAgIG9uR2VzdHVyZUV2ZW50OiB0aGlzLm9uR2VzdHVyZUV2ZW50LFxuICAgICAgb25IYW5kbGVyU3RhdGVDaGFuZ2U6IHRoaXMub25IYW5kbGVyU3RhdGVDaGFuZ2VcbiAgICB9KSk7XG4gIH1cblxufVxuXG5leHBvcnRzLkJhc2VCdXR0b24gPSBCYXNlQnV0dG9uO1xuXG5fZGVmaW5lUHJvcGVydHkoQmFzZUJ1dHRvbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkZWxheUxvbmdQcmVzczogNjAwXG59KTtcblxuY29uc3QgQW5pbWF0ZWRCYXNlQnV0dG9uID0gX3JlYWN0TmF0aXZlLkFuaW1hdGVkLmNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50KEJhc2VCdXR0b24pO1xuXG5jb25zdCBidG5TdHlsZXMgPSBfcmVhY3ROYXRpdmUuU3R5bGVTaGVldC5jcmVhdGUoe1xuICB1bmRlcmxheToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHRvcDogMFxuICB9XG59KTtcblxuY2xhc3MgUmVjdEJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib3BhY2l0eVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib25BY3RpdmVTdGF0ZUNoYW5nZVwiLCBhY3RpdmUgPT4ge1xuICAgICAgdmFyIF90aGlzJHByb3BzJG9uQWN0aXZlUywgX3RoaXMkcHJvcHM0O1xuXG4gICAgICBpZiAoX3JlYWN0TmF0aXZlLlBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgdGhpcy5vcGFjaXR5LnNldFZhbHVlKGFjdGl2ZSA/IHRoaXMucHJvcHMuYWN0aXZlT3BhY2l0eSA6IDApO1xuICAgICAgfVxuXG4gICAgICAoX3RoaXMkcHJvcHMkb25BY3RpdmVTID0gKF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMpLm9uQWN0aXZlU3RhdGVDaGFuZ2UpID09PSBudWxsIHx8IF90aGlzJHByb3BzJG9uQWN0aXZlUyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25BY3RpdmVTLmNhbGwoX3RoaXMkcHJvcHM0LCBhY3RpdmUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vcGFjaXR5ID0gbmV3IF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5WYWx1ZSgwKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIHN0eWxlLFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcmVzb2x2ZWRTdHlsZSA9IF9yZWFjdE5hdGl2ZS5TdHlsZVNoZWV0LmZsYXR0ZW4oc3R5bGUgIT09IG51bGwgJiYgc3R5bGUgIT09IHZvaWQgMCA/IHN0eWxlIDoge30pO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VCdXR0b24sIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBzdHlsZTogcmVzb2x2ZWRTdHlsZSxcbiAgICAgIG9uQWN0aXZlU3RhdGVDaGFuZ2U6IHRoaXMub25BY3RpdmVTdGF0ZUNoYW5nZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3ROYXRpdmUuQW5pbWF0ZWQuVmlldywge1xuICAgICAgc3R5bGU6IFtidG5TdHlsZXMudW5kZXJsYXksIHtcbiAgICAgICAgb3BhY2l0eTogdGhpcy5vcGFjaXR5LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMudW5kZXJsYXlDb2xvcixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiByZXNvbHZlZFN0eWxlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcmVzb2x2ZWRTdHlsZS5ib3JkZXJUb3BMZWZ0UmFkaXVzLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogcmVzb2x2ZWRTdHlsZS5ib3JkZXJUb3BSaWdodFJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogcmVzb2x2ZWRTdHlsZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogcmVzb2x2ZWRTdHlsZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1c1xuICAgICAgfV1cbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbn1cblxuZXhwb3J0cy5SZWN0QnV0dG9uID0gUmVjdEJ1dHRvbjtcblxuX2RlZmluZVByb3BlcnR5KFJlY3RCdXR0b24sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYWN0aXZlT3BhY2l0eTogMC4xMDUsXG4gIHVuZGVybGF5Q29sb3I6ICdibGFjaydcbn0pO1xuXG5jbGFzcyBCb3JkZXJsZXNzQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJvcGFjaXR5XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJvbkFjdGl2ZVN0YXRlQ2hhbmdlXCIsIGFjdGl2ZSA9PiB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25BY3RpdmVTMiwgX3RoaXMkcHJvcHM1O1xuXG4gICAgICBpZiAoX3JlYWN0TmF0aXZlLlBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgdGhpcy5vcGFjaXR5LnNldFZhbHVlKGFjdGl2ZSA/IHRoaXMucHJvcHMuYWN0aXZlT3BhY2l0eSA6IDEpO1xuICAgICAgfVxuXG4gICAgICAoX3RoaXMkcHJvcHMkb25BY3RpdmVTMiA9IChfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzKS5vbkFjdGl2ZVN0YXRlQ2hhbmdlKSA9PT0gbnVsbCB8fCBfdGhpcyRwcm9wcyRvbkFjdGl2ZVMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvbkFjdGl2ZVMyLmNhbGwoX3RoaXMkcHJvcHM1LCBhY3RpdmUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vcGFjaXR5ID0gbmV3IF9yZWFjdE5hdGl2ZS5BbmltYXRlZC5WYWx1ZSgxKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIHN0eWxlLFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbmltYXRlZEJhc2VCdXR0b24sIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBvbkFjdGl2ZVN0YXRlQ2hhbmdlOiB0aGlzLm9uQWN0aXZlU3RhdGVDaGFuZ2UsXG4gICAgICBzdHlsZTogW3N0eWxlLCBfcmVhY3ROYXRpdmUuUGxhdGZvcm0uT1MgPT09ICdpb3MnICYmIHtcbiAgICAgICAgb3BhY2l0eTogdGhpcy5vcGFjaXR5XG4gICAgICB9XVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH1cblxufVxuXG5leHBvcnRzLkJvcmRlcmxlc3NCdXR0b24gPSBCb3JkZXJsZXNzQnV0dG9uO1xuXG5fZGVmaW5lUHJvcGVydHkoQm9yZGVybGVzc0J1dHRvbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhY3RpdmVPcGFjaXR5OiAwLjMsXG4gIGJvcmRlcmxlc3M6IHRydWVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2VzdHVyZUJ1dHRvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9HZXN0dXJlSGFuZGxlckJ1dHRvbiIsImRlZmF1bHQiLCJCb3JkZXJsZXNzQnV0dG9uIiwiUmVjdEJ1dHRvbiIsIkJhc2VCdXR0b24iLCJSYXdCdXR0b24iLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9jcmVhdGVOYXRpdmVXcmFwcGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9TdGF0ZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwic2hvdWxkQWN0aXZhdGVPblN0YXJ0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIm5hdGl2ZUV2ZW50Iiwic3RhdGUiLCJvbGRTdGF0ZSIsInBvaW50ZXJJbnNpZGUiLCJhY3RpdmUiLCJTdGF0ZSIsIkFDVElWRSIsImxhc3RBY3RpdmUiLCJvbkFjdGl2ZVN0YXRlQ2hhbmdlIiwibG9uZ1ByZXNzRGV0ZWN0ZWQiLCJDQU5DRUxMRUQiLCJvblByZXNzIiwiUGxhdGZvcm0iLCJPUyIsIkJFR0FOIiwib25Mb25nUHJlc3MiLCJsb25nUHJlc3NUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlbGF5TG9uZ1ByZXNzIiwidW5kZWZpbmVkIiwiY2xlYXJUaW1lb3V0IiwiRU5EIiwiRkFJTEVEIiwiX3RoaXMkcHJvcHMkb25Mb25nUHJlIiwiX3RoaXMkcHJvcHMiLCJlIiwiX3RoaXMkcHJvcHMkb25IYW5kbGVyIiwiX3RoaXMkcHJvcHMyIiwib25IYW5kbGVyU3RhdGVDaGFuZ2UiLCJoYW5kbGVFdmVudCIsIl90aGlzJHByb3BzJG9uR2VzdHVyZSIsIl90aGlzJHByb3BzMyIsIm9uR2VzdHVyZUV2ZW50IiwicmVuZGVyIiwicmlwcGxlQ29sb3IiLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsInByb2Nlc3NDb2xvciIsIkFuaW1hdGVkQmFzZUJ1dHRvbiIsIkFuaW1hdGVkIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJidG5TdHlsZXMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwidW5kZXJsYXkiLCJwb3NpdGlvbiIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsIl90aGlzJHByb3BzJG9uQWN0aXZlUyIsIl90aGlzJHByb3BzNCIsIm9wYWNpdHkiLCJzZXRWYWx1ZSIsImFjdGl2ZU9wYWNpdHkiLCJWYWx1ZSIsImNoaWxkcmVuIiwic3R5bGUiLCJyZXNvbHZlZFN0eWxlIiwiZmxhdHRlbiIsIlZpZXciLCJiYWNrZ3JvdW5kQ29sb3IiLCJ1bmRlcmxheUNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiX3RoaXMkcHJvcHMkb25BY3RpdmVTMiIsIl90aGlzJHByb3BzNSIsImJvcmRlcmxlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlatList = exports.RefreshControl = exports.DrawerLayoutAndroid = exports.TextInput = exports.Switch = exports.ScrollView = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ../handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst ScrollView = (0, _createNativeWrapper.default)(_reactNative.ScrollView, {\n    disallowInterruption: false\n});\nexports.ScrollView = ScrollView;\nconst Switch = (0, _createNativeWrapper.default)(_reactNative.Switch, {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: true,\n    disallowInterruption: true\n});\nexports.Switch = Switch;\nconst TextInput = (0, _createNativeWrapper.default)(_reactNative.TextInput);\nexports.TextInput = TextInput;\nconst DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactNative.DrawerLayoutAndroid, {\n    disallowInterruption: true\n}); // @ts-ignore -- TODO(TS) to investigate if it's needed\nexports.DrawerLayoutAndroid = DrawerLayoutAndroid;\nDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions; // RefreshControl is implemented as a functional component, rendering a View\n// NativeViewGestureHandler needs to set a ref on its child, which cannot be done\n// on functional components\nconst RefreshControl = (0, _createNativeWrapper.default)(_reactNative.View);\nexports.RefreshControl = RefreshControl;\nconst FlatList = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_reactNative.FlatList, _extends({\n        ref: ref\n    }, props, {\n        renderScrollComponent: (scrollProps)=>/*#__PURE__*/ React.createElement(ScrollView, scrollProps)\n    })));\nexports.FlatList = FlatList; //# sourceMappingURL=GestureComponents.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nvar _default = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_reactNative.View, _extends({\n        ref: ref,\n        accessibilityRole: \"button\"\n    }, props)));\nexports[\"default\"] = _default; //# sourceMappingURL=GestureHandlerButton.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy9HZXN0dXJlSGFuZGxlckJ1dHRvbi53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNMLHdCQUF3Qk0sR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRVIsU0FBU1E7UUFBSTtJQUFHO0lBQUUsSUFBSUQsUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUcsR0FBRyxDQUFDRixNQUFNO1FBQUUsT0FBT0QsTUFBTUksR0FBRyxDQUFDSDtJQUFNO0lBQUUsSUFBSUksU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCakIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPa0Isd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPUCxJQUFLO1FBQUUsSUFBSVosT0FBT29CLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNWLEtBQUtPLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JqQixPQUFPa0Isd0JBQXdCLENBQUNOLEtBQUtPLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRXhCLE9BQU9DLGNBQWMsQ0FBQ2UsUUFBUUcsS0FBS0k7WUFBTyxPQUFPO2dCQUFFUCxNQUFNLENBQUNHLElBQUksR0FBR1AsR0FBRyxDQUFDTyxJQUFJO1lBQUU7UUFBRTtJQUFFO0lBQUVILE9BQU9aLE9BQU8sR0FBR1E7SUFBSyxJQUFJRCxPQUFPO1FBQUVBLE1BQU1hLEdBQUcsQ0FBQ1osS0FBS0k7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFdHVCLFNBQVNTO0lBQWFBLFdBQVd6QixPQUFPMEIsTUFBTSxJQUFJLFNBQVVDLE1BQU07UUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1lBQUUsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBQUUsSUFBSyxJQUFJVCxPQUFPWSxPQUFRO2dCQUFFLElBQUkvQixPQUFPb0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1MsUUFBUVosTUFBTTtvQkFBRVEsTUFBTSxDQUFDUixJQUFJLEdBQUdZLE1BQU0sQ0FBQ1osSUFBSTtnQkFBRTtZQUFFO1FBQUU7UUFBRSxPQUFPUTtJQUFRO0lBQUcsT0FBT0YsU0FBU08sS0FBSyxDQUFDLElBQUksRUFBRUg7QUFBWTtBQUU1VCxJQUFJSSxXQUFXLFdBQVcsR0FBRTVCLE1BQU02QixVQUFVLENBQUMsQ0FBQ0MsT0FBT0MsTUFBUSxXQUFXLEdBQUUvQixNQUFNZ0MsYUFBYSxDQUFDN0IsYUFBYThCLElBQUksRUFBRWIsU0FBUztRQUN4SFcsS0FBS0E7UUFDTEcsbUJBQW1CO0lBQ3JCLEdBQUdKO0FBRUhqQyxrQkFBZSxHQUFHK0IsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvR2VzdHVyZUhhbmRsZXJCdXR0b24ud2ViLmpzPzgzMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIF9kZWZhdWx0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yZWFjdE5hdGl2ZS5WaWV3LCBfZXh0ZW5kcyh7XG4gIHJlZjogcmVmLFxuICBhY2Nlc3NpYmlsaXR5Um9sZTogXCJidXR0b25cIlxufSwgcHJvcHMpKSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2VzdHVyZUhhbmRsZXJCdXR0b24ud2ViLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJfZGVmYXVsdCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiYWNjZXNzaWJpbGl0eVJvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DRAG_TOSS = 0.05;\nclass Swipeable extends React.Component {\n    constructor(_props){\n        super(_props);\n        _defineProperty(this, \"onGestureEvent\", void 0);\n        _defineProperty(this, \"transX\", void 0);\n        _defineProperty(this, \"showLeftAction\", void 0);\n        _defineProperty(this, \"leftActionTranslate\", void 0);\n        _defineProperty(this, \"showRightAction\", void 0);\n        _defineProperty(this, \"rightActionTranslate\", void 0);\n        _defineProperty(this, \"updateAnimatedEvent\", (props, state)=>{\n            const { friction, overshootFriction } = props;\n            const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n            const { rightOffset = rowWidth } = state;\n            const rightWidth = Math.max(0, rowWidth - rightOffset);\n            const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } = props;\n            const transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({\n                inputRange: [\n                    0,\n                    friction\n                ],\n                outputRange: [\n                    0,\n                    1\n                ]\n            })).interpolate({\n                inputRange: [\n                    -rightWidth - 1,\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + 1\n                ],\n                outputRange: [\n                    -rightWidth - (overshootRight ? 1 / overshootFriction : 0),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft ? 1 / overshootFriction : 0)\n                ]\n            });\n            this.transX = transX;\n            this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n                inputRange: [\n                    -1,\n                    0,\n                    leftWidth\n                ],\n                outputRange: [\n                    0,\n                    0,\n                    1\n                ]\n            }) : new _reactNative.Animated.Value(0);\n            this.leftActionTranslate = this.showLeftAction.interpolate({\n                inputRange: [\n                    0,\n                    Number.MIN_VALUE\n                ],\n                outputRange: [\n                    -10000,\n                    0\n                ],\n                extrapolate: \"clamp\"\n            });\n            this.showRightAction = rightWidth > 0 ? transX.interpolate({\n                inputRange: [\n                    -rightWidth,\n                    0,\n                    1\n                ],\n                outputRange: [\n                    1,\n                    0,\n                    0\n                ]\n            }) : new _reactNative.Animated.Value(0);\n            this.rightActionTranslate = this.showRightAction.interpolate({\n                inputRange: [\n                    0,\n                    Number.MIN_VALUE\n                ],\n                outputRange: [\n                    -10000,\n                    0\n                ],\n                extrapolate: \"clamp\"\n            });\n        });\n        _defineProperty(this, \"onTapHandlerStateChange\", ({ nativeEvent })=>{\n            if (nativeEvent.oldState === _State.State.ACTIVE) {\n                this.close();\n            }\n        });\n        _defineProperty(this, \"onHandlerStateChange\", (ev)=>{\n            if (ev.nativeEvent.oldState === _State.State.ACTIVE) {\n                this.handleRelease(ev);\n            }\n        });\n        _defineProperty(this, \"handleRelease\", (ev)=>{\n            const { velocityX, translationX: dragX } = ev.nativeEvent;\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            const { friction, leftThreshold = leftWidth / 2, rightThreshold = rightWidth / 2 } = this.props;\n            const startOffsetX = this.currentOffset() + dragX / friction;\n            const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n            let toValue = 0;\n            if (rowState === 0) {\n                if (translationX > leftThreshold) {\n                    toValue = leftWidth;\n                } else if (translationX < -rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            } else if (rowState === 1) {\n                // swiped to left\n                if (translationX > -leftThreshold) {\n                    toValue = leftWidth;\n                }\n            } else {\n                // swiped to right\n                if (translationX < rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            this.animateRow(startOffsetX, toValue, velocityX / friction);\n        });\n        _defineProperty(this, \"animateRow\", (fromValue, toValue, velocityX)=>{\n            const { dragX, rowTranslation } = this.state;\n            dragX.setValue(0);\n            rowTranslation.setValue(fromValue);\n            this.setState({\n                rowState: Math.sign(toValue)\n            });\n            _reactNative.Animated.spring(rowTranslation, {\n                restSpeedThreshold: 1.7,\n                restDisplacementThreshold: 0.4,\n                velocity: velocityX,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                ...this.props.animationOptions\n            }).start(({ finished })=>{\n                if (finished) {\n                    if (toValue > 0) {\n                        var _this$props$onSwipeab, _this$props, _this$props$onSwipeab2, _this$props2;\n                        (_this$props$onSwipeab = (_this$props = this.props).onSwipeableLeftOpen) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n                        (_this$props$onSwipeab2 = (_this$props2 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2, \"left\", this);\n                    } else if (toValue < 0) {\n                        var _this$props$onSwipeab3, _this$props3, _this$props$onSwipeab4, _this$props4;\n                        (_this$props$onSwipeab3 = (_this$props3 = this.props).onSwipeableRightOpen) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n                        (_this$props$onSwipeab4 = (_this$props4 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4, \"right\", this);\n                    } else {\n                        var _this$props$onSwipeab5, _this$props5;\n                        const closingDirection = fromValue > 0 ? \"left\" : \"right\";\n                        (_this$props$onSwipeab5 = (_this$props5 = this.props).onSwipeableClose) === null || _this$props$onSwipeab5 === void 0 ? void 0 : _this$props$onSwipeab5.call(_this$props5, closingDirection, this);\n                    }\n                }\n            });\n            if (toValue > 0) {\n                var _this$props$onSwipeab6, _this$props6, _this$props$onSwipeab7, _this$props7;\n                (_this$props$onSwipeab6 = (_this$props6 = this.props).onSwipeableLeftWillOpen) === null || _this$props$onSwipeab6 === void 0 ? void 0 : _this$props$onSwipeab6.call(_this$props6);\n                (_this$props$onSwipeab7 = (_this$props7 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab7 === void 0 ? void 0 : _this$props$onSwipeab7.call(_this$props7, \"left\");\n            } else if (toValue < 0) {\n                var _this$props$onSwipeab8, _this$props8, _this$props$onSwipeab9, _this$props9;\n                (_this$props$onSwipeab8 = (_this$props8 = this.props).onSwipeableRightWillOpen) === null || _this$props$onSwipeab8 === void 0 ? void 0 : _this$props$onSwipeab8.call(_this$props8);\n                (_this$props$onSwipeab9 = (_this$props9 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab9 === void 0 ? void 0 : _this$props$onSwipeab9.call(_this$props9, \"right\");\n            } else {\n                var _this$props$onSwipeab10, _this$props10;\n                const closingDirection = fromValue > 0 ? \"left\" : \"right\";\n                (_this$props$onSwipeab10 = (_this$props10 = this.props).onSwipeableWillClose) === null || _this$props$onSwipeab10 === void 0 ? void 0 : _this$props$onSwipeab10.call(_this$props10, closingDirection);\n            }\n        });\n        _defineProperty(this, \"onRowLayout\", ({ nativeEvent })=>{\n            this.setState({\n                rowWidth: nativeEvent.layout.width\n            });\n        });\n        _defineProperty(this, \"currentOffset\", ()=>{\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            if (rowState === 1) {\n                return leftWidth;\n            } else if (rowState === -1) {\n                return -rightWidth;\n            }\n            return 0;\n        });\n        _defineProperty(this, \"close\", ()=>{\n            this.animateRow(this.currentOffset(), 0);\n        });\n        _defineProperty(this, \"openLeft\", ()=>{\n            const { leftWidth = 0 } = this.state;\n            this.animateRow(this.currentOffset(), leftWidth);\n        });\n        _defineProperty(this, \"openRight\", ()=>{\n            const { rowWidth = 0 } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            this.animateRow(this.currentOffset(), -rightWidth);\n        });\n        const _dragX = new _reactNative.Animated.Value(0);\n        this.state = {\n            dragX: _dragX,\n            rowTranslation: new _reactNative.Animated.Value(0),\n            rowState: 0,\n            leftWidth: undefined,\n            rightOffset: undefined,\n            rowWidth: undefined\n        };\n        this.updateAnimatedEvent(_props, this.state);\n        this.onGestureEvent = _reactNative.Animated.event([\n            {\n                nativeEvent: {\n                    translationX: _dragX\n                }\n            }\n        ], {\n            useNativeDriver: _props.useNativeAnimations\n        });\n    }\n    shouldComponentUpdate(props, state) {\n        if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n        return true;\n    }\n    render() {\n        const { rowState } = this.state;\n        const { children, renderLeftActions, renderRightActions } = this.props;\n        const left = renderLeftActions && /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                styles.leftActions,\n                // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n                // it for some reason\n                {\n                    transform: [\n                        {\n                            translateX: this.leftActionTranslate\n                        }\n                    ]\n                }\n            ]\n        }, renderLeftActions(this.showLeftAction, this.transX), /*#__PURE__*/ React.createElement(_reactNative.View, {\n            onLayout: ({ nativeEvent })=>this.setState({\n                    leftWidth: nativeEvent.layout.x\n                })\n        }));\n        const right = renderRightActions && /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                styles.rightActions,\n                {\n                    transform: [\n                        {\n                            translateX: this.rightActionTranslate\n                        }\n                    ]\n                }\n            ]\n        }, renderRightActions(this.showRightAction, this.transX, this), /*#__PURE__*/ React.createElement(_reactNative.View, {\n            onLayout: ({ nativeEvent })=>this.setState({\n                    rightOffset: nativeEvent.layout.x\n                })\n        }));\n        return /*#__PURE__*/ React.createElement(_PanGestureHandler.PanGestureHandler, _extends({\n            activeOffsetX: [\n                -10,\n                10\n            ]\n        }, this.props, {\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.onHandlerStateChange\n        }), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            onLayout: this.onRowLayout,\n            style: [\n                styles.container,\n                this.props.containerStyle\n            ]\n        }, left, right, /*#__PURE__*/ React.createElement(_TapGestureHandler.TapGestureHandler, {\n            enabled: rowState !== 0,\n            onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            pointerEvents: rowState === 0 ? \"auto\" : \"box-only\",\n            style: [\n                {\n                    transform: [\n                        {\n                            translateX: this.transX\n                        }\n                    ]\n                },\n                this.props.childrenContainerStyle\n            ]\n        }, children))));\n    }\n}\nexports[\"default\"] = Swipeable;\n_defineProperty(Swipeable, \"defaultProps\", {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true\n});\nconst styles = _reactNative.StyleSheet.create({\n    container: {\n        overflow: \"hidden\"\n    },\n    leftActions: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        flexDirection: _reactNative.I18nManager.isRTL ? \"row-reverse\" : \"row\"\n    },\n    rightActions: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        flexDirection: _reactNative.I18nManager.isRTL ? \"row\" : \"row-reverse\"\n    }\n}); //# sourceMappingURL=Swipeable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.TOUCHABLE_STATE = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureButtons = __webpack_require__(/*! ../GestureButtons */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */ const TOUCHABLE_STATE = {\n    UNDETERMINED: 0,\n    BEGAN: 1,\n    MOVED_OUTSIDE: 2\n};\nexports.TOUCHABLE_STATE = TOUCHABLE_STATE;\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */ class GenericTouchable extends React.Component {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"pressInTimeout\", void 0);\n        _defineProperty(this, \"pressOutTimeout\", void 0);\n        _defineProperty(this, \"longPressTimeout\", void 0);\n        _defineProperty(this, \"longPressDetected\", false);\n        _defineProperty(this, \"pointerInside\", true);\n        _defineProperty(this, \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n        _defineProperty(this, \"onGestureEvent\", ({ nativeEvent: { pointerInside } })=>{\n            if (this.pointerInside !== pointerInside) {\n                if (pointerInside) {\n                    this.onMoveIn();\n                } else {\n                    this.onMoveOut();\n                }\n            }\n            this.pointerInside = pointerInside;\n        });\n        _defineProperty(this, \"onHandlerStateChange\", ({ nativeEvent })=>{\n            const { state } = nativeEvent;\n            if (state === _State.State.CANCELLED || state === _State.State.FAILED) {\n                // Need to handle case with external cancellation (e.g. by ScrollView)\n                this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n            } else if (// And Android \"Active\" state is achieving on first move of a finger, not on press in.\n            // On iOS event on \"Began\" is not delivered.\n            state === (_reactNative.Platform.OS !== \"android\" ? _State.State.ACTIVE : _State.State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                // Moving inside requires\n                this.handlePressIn();\n            } else if (state === _State.State.END) {\n                const shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n                this.handleGoToUndetermined();\n                if (shouldCallOnPress) {\n                    var _this$props$onPress, _this$props;\n                    // Calls only inside component whether no long press was called previously\n                    (_this$props$onPress = (_this$props = this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);\n                }\n            }\n        });\n        _defineProperty(this, \"onLongPressDetected\", ()=>{\n            var _this$props$onLongPre, _this$props2;\n            this.longPressDetected = true; // checked for in the caller of `onLongPressDetected`, but better to check twice\n            (_this$props$onLongPre = (_this$props2 = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);\n        });\n    }\n    // handlePressIn in called on first touch on traveling inside component.\n    // Handles state transition with delay.\n    handlePressIn() {\n        if (this.props.delayPressIn) {\n            this.pressInTimeout = setTimeout(()=>{\n                this.moveToState(TOUCHABLE_STATE.BEGAN);\n                this.pressInTimeout = null;\n            }, this.props.delayPressIn);\n        } else {\n            this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        if (this.props.onLongPress) {\n            const time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n            this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n        }\n    }\n    // Handles state transition with delay.\n    handleMoveOutside() {\n        if (this.props.delayPressOut) {\n            this.pressOutTimeout = this.pressOutTimeout || setTimeout(()=>{\n                this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n                this.pressOutTimeout = null;\n            }, this.props.delayPressOut);\n        } else {\n            this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n        }\n    }\n    handleGoToUndetermined() {\n        clearTimeout(this.pressOutTimeout); // TODO: maybe it can be undefined\n        if (this.props.delayPressOut) {\n            this.pressOutTimeout = setTimeout(()=>{\n                if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                    this.moveToState(TOUCHABLE_STATE.BEGAN);\n                }\n                this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n                this.pressOutTimeout = null;\n            }, this.props.delayPressOut);\n        } else {\n            if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                this.moveToState(TOUCHABLE_STATE.BEGAN);\n            }\n            this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        }\n    }\n    componentDidMount() {\n        this.reset();\n    }\n    reset() {\n        this.longPressDetected = false;\n        this.pointerInside = true;\n        clearTimeout(this.pressInTimeout);\n        clearTimeout(this.pressOutTimeout);\n        clearTimeout(this.longPressTimeout);\n        this.pressOutTimeout = null;\n        this.longPressTimeout = null;\n        this.pressInTimeout = null;\n    }\n    moveToState(newState) {\n        var _this$props$onStateCh, _this$props6;\n        if (newState === this.STATE) {\n            // Ignore dummy transitions\n            return;\n        }\n        if (newState === TOUCHABLE_STATE.BEGAN) {\n            var _this$props$onPressIn, _this$props3;\n            // First touch and moving inside\n            (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);\n        } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n            var _this$props$onPressOu, _this$props4;\n            // Moving outside\n            (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);\n        } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n            // Need to reset each time on transition to UNDETERMINED\n            this.reset();\n            if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n                var _this$props$onPressOu2, _this$props5;\n                // ... and if it happens inside button.\n                (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);\n            }\n        } // Finally call lister (used by subclasses)\n        (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState); // ... and make transition.\n        this.STATE = newState;\n    }\n    componentWillUnmount() {\n        // to prevent memory leaks\n        this.reset();\n    }\n    onMoveIn() {\n        if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n            // This call is not throttled with delays (like in RN's implementation).\n            this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n    }\n    onMoveOut() {\n        // long press should no longer be detected\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n        if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n            this.handleMoveOutside();\n        }\n    }\n    render() {\n        var _this$props$touchSoun;\n        const coreProps = {\n            accessible: this.props.accessible !== false,\n            accessibilityLabel: this.props.accessibilityLabel,\n            accessibilityHint: this.props.accessibilityHint,\n            accessibilityRole: this.props.accessibilityRole,\n            // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n            // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n            accessibilityState: this.props.accessibilityState,\n            accessibilityActions: this.props.accessibilityActions,\n            onAccessibilityAction: this.props.onAccessibilityAction,\n            nativeID: this.props.nativeID,\n            onLayout: this.props.onLayout,\n            hitSlop: this.props.hitSlop\n        };\n        return /*#__PURE__*/ React.createElement(_GestureButtons.BaseButton, _extends({\n            style: this.props.containerStyle,\n            onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,\n            onGestureEvent: this.onGestureEvent,\n            hitSlop: this.props.hitSlop,\n            shouldActivateOnStart: this.props.shouldActivateOnStart,\n            disallowInterruption: this.props.disallowInterruption,\n            testID: this.props.testID,\n            touchSoundDisabled: (_this$props$touchSoun = this.props.touchSoundDisabled) !== null && _this$props$touchSoun !== void 0 ? _this$props$touchSoun : false,\n            enabled: !this.props.disabled\n        }, this.props.extraButtonProps), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, _extends({}, coreProps, {\n            style: this.props.style\n        }), this.props.children));\n    }\n}\nexports[\"default\"] = GenericTouchable;\n_defineProperty(GenericTouchable, \"defaultProps\", {\n    delayLongPress: 600,\n    extraButtonProps: {\n        rippleColor: \"transparent\",\n        exclusive: true\n    }\n}); //# sourceMappingURL=GenericTouchable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _GenericTouchable = _interopRequireWildcard(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * TouchableHighlight follows RN's implementation\n */ class TouchableHighlight extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"showUnderlay\", ()=>{\n            var _this$props$onShowUnd, _this$props;\n            if (!this.hasPressHandler()) {\n                return;\n            }\n            this.setState({\n                extraChildStyle: {\n                    opacity: this.props.activeOpacity\n                },\n                extraUnderlayStyle: {\n                    backgroundColor: this.props.underlayColor\n                }\n            });\n            (_this$props$onShowUnd = (_this$props = this.props).onShowUnderlay) === null || _this$props$onShowUnd === void 0 ? void 0 : _this$props$onShowUnd.call(_this$props);\n        });\n        _defineProperty(this, \"hasPressHandler\", ()=>this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);\n        _defineProperty(this, \"hideUnderlay\", ()=>{\n            var _this$props$onHideUnd, _this$props2;\n            this.setState({\n                extraChildStyle: null,\n                extraUnderlayStyle: null\n            });\n            (_this$props$onHideUnd = (_this$props2 = this.props).onHideUnderlay) === null || _this$props$onHideUnd === void 0 ? void 0 : _this$props$onHideUnd.call(_this$props2);\n        });\n        _defineProperty(this, \"onStateChange\", (_from, to)=>{\n            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {\n                this.showUnderlay();\n            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {\n                this.hideUnderlay();\n            }\n        });\n        this.state = {\n            extraChildStyle: null,\n            extraUnderlayStyle: null\n        };\n    }\n    renderChildren() {\n        if (!this.props.children) {\n            return /*#__PURE__*/ React.createElement(_reactNative.View, null);\n        }\n        const child = React.Children.only(this.props.children); // TODO: not sure if OK but fixes error\n        return /*#__PURE__*/ React.cloneElement(child, {\n            style: _reactNative.StyleSheet.compose(child.props.style, this.state.extraChildStyle)\n        });\n    }\n    render() {\n        const { style = {}, ...rest } = this.props;\n        const { extraUnderlayStyle } = this.state;\n        return /*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({}, rest, {\n            style: [\n                style,\n                extraUnderlayStyle\n            ],\n            onStateChange: this.onStateChange\n        }), this.renderChildren());\n    }\n}\nexports[\"default\"] = TouchableHighlight;\n_defineProperty(TouchableHighlight, \"defaultProps\", {\n    ..._GenericTouchable.default.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: \"black\"\n}); //# sourceMappingURL=TouchableHighlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _default = _reactNative.TouchableNativeFeedback;\nexports[\"default\"] = _default; //# sourceMappingURL=TouchableNativeFeedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsZUFBZUMsbUJBQU9BLENBQUMsdUVBQWM7QUFFekMsSUFBSUMsV0FBV0YsYUFBYUcsdUJBQXVCO0FBQ25ETixrQkFBZSxHQUFHSyxVQUNsQixtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLmpzP2MwMGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcmVhY3ROYXRpdmUuVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2s7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJUb3VjaGFibGVOYXRpdmVGZWVkYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _GenericTouchable = _interopRequireWildcard(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * TouchableOpacity bases on timing animation which has been used in RN's core\n */ class TouchableOpacity extends React.Component {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"getChildStyleOpacityWithDefault\", ()=>{\n            const childStyle = _reactNative.StyleSheet.flatten(this.props.style) || {};\n            return childStyle.opacity == null ? 1 : childStyle.opacity;\n        });\n        _defineProperty(this, \"opacity\", new _reactNative.Animated.Value(this.getChildStyleOpacityWithDefault()));\n        _defineProperty(this, \"setOpacityTo\", (value, duration)=>{\n            var _this$props$useNative;\n            _reactNative.Animated.timing(this.opacity, {\n                toValue: value,\n                duration: duration,\n                easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),\n                useNativeDriver: (_this$props$useNative = this.props.useNativeAnimations) !== null && _this$props$useNative !== void 0 ? _this$props$useNative : true\n            }).start();\n        });\n        _defineProperty(this, \"onStateChange\", (_from, to)=>{\n            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {\n                this.setOpacityTo(this.props.activeOpacity, 0);\n            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {\n                this.setOpacityTo(this.getChildStyleOpacityWithDefault(), 150);\n            }\n        });\n    }\n    render() {\n        const { style = {}, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({}, rest, {\n            style: [\n                style,\n                {\n                    opacity: this.opacity // TODO: fix this\n                }\n            ],\n            onStateChange: this.onStateChange\n        }), this.props.children ? this.props.children : /*#__PURE__*/ React.createElement(_reactNative.View, null));\n    }\n}\nexports[\"default\"] = TouchableOpacity;\n_defineProperty(TouchableOpacity, \"defaultProps\", {\n    ..._GenericTouchable.default.defaultProps,\n    activeOpacity: 0.2\n}); //# sourceMappingURL=TouchableOpacity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _GenericTouchable = _interopRequireDefault(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst TouchableWithoutFeedback = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({\n        ref: ref\n    }, props)));\nTouchableWithoutFeedback.defaultProps = _GenericTouchable.default.defaultProps;\nvar _default = TouchableWithoutFeedback;\nexports[\"default\"] = _default; //# sourceMappingURL=TouchableWithoutFeedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBRXZCLElBQUlHLFFBQVFDLHdCQUF3QkMsbUJBQU9BLENBQUMsb0JBQU87QUFFbkQsSUFBSUMsb0JBQW9CQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDhIQUFvQjtBQUUzRSxTQUFTRSx1QkFBdUJDLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRU4sU0FBU007SUFBSTtBQUFHO0FBRTlGLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNSLHdCQUF3QkksR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRU4sU0FBU007UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUMsR0FBRyxDQUFDTCxNQUFNO1FBQUUsT0FBT0ksTUFBTUUsR0FBRyxDQUFDTjtJQUFNO0lBQUUsSUFBSU8sU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCbEIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPbUIsd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVixJQUFLO1FBQUUsSUFBSVYsT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNiLEtBQUtVLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JsQixPQUFPbUIsd0JBQXdCLENBQUNULEtBQUtVLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRXpCLE9BQU9DLGNBQWMsQ0FBQ2dCLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1UsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxPQUFPYixPQUFPLEdBQUdNO0lBQUssSUFBSUksT0FBTztRQUFFQSxNQUFNVyxHQUFHLENBQUNmLEtBQUtPO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBRXR1QixTQUFTUztJQUFhQSxXQUFXMUIsT0FBTzJCLE1BQU0sSUFBSSxTQUFVQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztZQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtZQUFFLElBQUssSUFBSVQsT0FBT1ksT0FBUTtnQkFBRSxJQUFJaEMsT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNTLFFBQVFaLE1BQU07b0JBQUVRLE1BQU0sQ0FBQ1IsSUFBSSxHQUFHWSxNQUFNLENBQUNaLElBQUk7Z0JBQUU7WUFBRTtRQUFFO1FBQUUsT0FBT1E7SUFBUTtJQUFHLE9BQU9GLFNBQVNPLEtBQUssQ0FBQyxJQUFJLEVBQUVIO0FBQVk7QUFFNVQsTUFBTUksMkJBQTJCLFdBQVcsR0FBRTdCLE1BQU04QixVQUFVLENBQUMsQ0FBQ0MsT0FBT0MsTUFBUSxXQUFXLEdBQUVoQyxNQUFNaUMsYUFBYSxDQUFDOUIsa0JBQWtCSixPQUFPLEVBQUVzQixTQUFTO1FBQ2xKVyxLQUFLQTtJQUNQLEdBQUdEO0FBQ0hGLHlCQUF5QkssWUFBWSxHQUFHL0Isa0JBQWtCSixPQUFPLENBQUNtQyxZQUFZO0FBQzlFLElBQUlDLFdBQVdOO0FBQ2ZoQyxrQkFBZSxHQUFHc0MsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvdG91Y2hhYmxlcy9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2suanM/NTQ0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9HZW5lcmljVG91Y2hhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZW5lcmljVG91Y2hhYmxlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmNvbnN0IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfR2VuZXJpY1RvdWNoYWJsZS5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gIHJlZjogcmVmXG59LCBwcm9wcykpKTtcblRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5kZWZhdWx0UHJvcHMgPSBfR2VuZXJpY1RvdWNoYWJsZS5kZWZhdWx0LmRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9HZW5lcmljVG91Y2hhYmxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"TouchableNativeFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableNativeFeedback.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableWithoutFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableWithoutFeedback.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableOpacity\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableOpacity.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableHighlight\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableHighlight.default;\n    }\n}));\nvar _TouchableNativeFeedback = _interopRequireDefault(__webpack_require__(/*! ./TouchableNativeFeedback */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js\"));\nvar _TouchableWithoutFeedback = _interopRequireDefault(__webpack_require__(/*! ./TouchableWithoutFeedback */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js\"));\nvar _TouchableOpacity = _interopRequireDefault(__webpack_require__(/*! ./TouchableOpacity */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js\"));\nvar _TouchableHighlight = _interopRequireDefault(__webpack_require__(/*! ./TouchableHighlight */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCwyREFBMEQ7SUFDeERJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9DLHlCQUF5QkMsT0FBTztJQUN6QztBQUNGLENBQUMsRUFBQztBQUNGUCw0REFBMkQ7SUFDekRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9HLDBCQUEwQkQsT0FBTztJQUMxQztBQUNGLENBQUMsRUFBQztBQUNGUCxvREFBbUQ7SUFDakRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9JLGtCQUFrQkYsT0FBTztJQUNsQztBQUNGLENBQUMsRUFBQztBQUNGUCxzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9LLG9CQUFvQkgsT0FBTztJQUNwQztBQUNGLENBQUMsRUFBQztBQUVGLElBQUlELDJCQUEyQkssdUJBQXVCQyxtQkFBT0EsQ0FBQyw0SUFBMkI7QUFFekYsSUFBSUosNEJBQTRCRyx1QkFBdUJDLG1CQUFPQSxDQUFDLDhJQUE0QjtBQUUzRixJQUFJSCxvQkFBb0JFLHVCQUF1QkMsbUJBQU9BLENBQUMsOEhBQW9CO0FBRTNFLElBQUlGLHNCQUFzQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxrSUFBc0I7QUFFL0UsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVOLFNBQVNNO0lBQUk7QUFBRyxFQUM5RixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL2luZGV4LmpzPzBiOGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaGFibGVOYXRpdmVGZWVkYmFja1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2suZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2tcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvdWNoYWJsZU9wYWNpdHlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1RvdWNoYWJsZU9wYWNpdHkuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaGFibGVIaWdobGlnaHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1RvdWNoYWJsZUhpZ2hsaWdodC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ub3VjaGFibGVOYXRpdmVGZWVkYmFjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2tcIikpO1xuXG52YXIgX1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXCIpKTtcblxudmFyIF9Ub3VjaGFibGVPcGFjaXR5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub3VjaGFibGVPcGFjaXR5XCIpKTtcblxudmFyIF9Ub3VjaGFibGVIaWdobGlnaHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RvdWNoYWJsZUhpZ2hsaWdodFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIiwiZGVmYXVsdCIsIl9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJfVG91Y2hhYmxlT3BhY2l0eSIsIl9Ub3VjaGFibGVIaWdobGlnaHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = gestureHandlerRootHOC;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _hoistNonReactStatics = _interopRequireDefault(__webpack_require__(/*! hoist-non-react-statics */ \"hoist-non-react-statics\"));\nvar _GestureHandlerRootView = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerRootView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction gestureHandlerRootHOC(Component, containerStyles) {\n    function Wrapper(props) {\n        return /*#__PURE__*/ React.createElement(_GestureHandlerRootView.default, {\n            style: [\n                styles.container,\n                containerStyles\n            ]\n        }, /*#__PURE__*/ React.createElement(Component, props));\n    }\n    Wrapper.displayName = `gestureHandlerRootHOC(${Component.displayName || Component.name})`; // @ts-ignore - hoistNonReactStatics uses old version of @types/react\n    (0, _hoistNonReactStatics.default)(Wrapper, Component);\n    return Wrapper;\n}\nconst styles = _reactNative.StyleSheet.create({\n    container: {\n        flex: 1\n    }\n}); //# sourceMappingURL=gestureHandlerRootHOC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2VzdHVyZUhhbmRsZXJSb290SE9DLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHRztBQUVsQixJQUFJQyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlFLHdCQUF3QkMsdUJBQXVCSCxtQkFBT0EsQ0FBQyx3REFBeUI7QUFFcEYsSUFBSUksMEJBQTBCRCx1QkFBdUJILG1CQUFPQSxDQUFDLHdIQUEwQjtBQUV2RixTQUFTRyx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRVQsU0FBU1M7SUFBSTtBQUFHO0FBRTlGLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNWLHdCQUF3Qk0sR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRVQsU0FBU1M7UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUMsR0FBRyxDQUFDTCxNQUFNO1FBQUUsT0FBT0ksTUFBTUUsR0FBRyxDQUFDTjtJQUFNO0lBQUUsSUFBSU8sU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCckIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPc0Isd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVixJQUFLO1FBQUUsSUFBSWIsT0FBT3dCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNiLEtBQUtVLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JyQixPQUFPc0Isd0JBQXdCLENBQUNULEtBQUtVLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRTVCLE9BQU9DLGNBQWMsQ0FBQ21CLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1UsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxPQUFPaEIsT0FBTyxHQUFHUztJQUFLLElBQUlJLE9BQU87UUFBRUEsTUFBTVcsR0FBRyxDQUFDZixLQUFLTztJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU2Ysc0JBQXNCd0IsU0FBUyxFQUFFQyxlQUFlO0lBQ3ZELFNBQVNDLFFBQVFDLEtBQUs7UUFDcEIsT0FBTyxXQUFXLEdBQUUxQixNQUFNMkIsYUFBYSxDQUFDckIsd0JBQXdCUixPQUFPLEVBQUU7WUFDdkU4QixPQUFPO2dCQUFDQyxPQUFPQyxTQUFTO2dCQUFFTjthQUFnQjtRQUM1QyxHQUFHLFdBQVcsR0FBRXhCLE1BQU0yQixhQUFhLENBQUNKLFdBQVdHO0lBQ2pEO0lBRUFELFFBQVFNLFdBQVcsR0FBRyxDQUFDLHNCQUFzQixFQUFFUixVQUFVUSxXQUFXLElBQUlSLFVBQVVTLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxxRUFBcUU7SUFFL0osSUFBRzVCLHNCQUFzQk4sT0FBTyxFQUFFMkIsU0FBU0Y7SUFDNUMsT0FBT0U7QUFDVDtBQUVBLE1BQU1JLFNBQVMxQixhQUFhOEIsVUFBVSxDQUFDQyxNQUFNLENBQUM7SUFDNUNKLFdBQVc7UUFDVEssTUFBTTtJQUNSO0FBQ0YsSUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2VzdHVyZUhhbmRsZXJSb290SE9DLmpzPzdkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXN0dXJlSGFuZGxlclJvb3RIT0M7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyUm9vdFZpZXcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dlc3R1cmVIYW5kbGVyUm9vdFZpZXdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gZ2VzdHVyZUhhbmRsZXJSb290SE9DKENvbXBvbmVudCwgY29udGFpbmVyU3R5bGVzKSB7XG4gIGZ1bmN0aW9uIFdyYXBwZXIocHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0dlc3R1cmVIYW5kbGVyUm9vdFZpZXcuZGVmYXVsdCwge1xuICAgICAgc3R5bGU6IFtzdHlsZXMuY29udGFpbmVyLCBjb250YWluZXJTdHlsZXNdXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcykpO1xuICB9XG5cbiAgV3JhcHBlci5kaXNwbGF5TmFtZSA9IGBnZXN0dXJlSGFuZGxlclJvb3RIT0MoJHtDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWV9KWA7IC8vIEB0cy1pZ25vcmUgLSBob2lzdE5vblJlYWN0U3RhdGljcyB1c2VzIG9sZCB2ZXJzaW9uIG9mIEB0eXBlcy9yZWFjdFxuXG4gICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoV3JhcHBlciwgQ29tcG9uZW50KTtcbiAgcmV0dXJuIFdyYXBwZXI7XG59XG5cbmNvbnN0IHN0eWxlcyA9IF9yZWFjdE5hdGl2ZS5TdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDFcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXN0dXJlSGFuZGxlclJvb3RIT0MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImdlc3R1cmVIYW5kbGVyUm9vdEhPQyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9HZXN0dXJlSGFuZGxlclJvb3RWaWV3Iiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJDb21wb25lbnQiLCJjb250YWluZXJTdHlsZXMiLCJXcmFwcGVyIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getShadowNodeFromRef = getShadowNodeFromRef;\n// Used by GestureDetector (unsupported on web at the moment) to check whether the\n// attached view may get flattened on Fabric. Original implementation causes errors\n// on web due to the static resolution of `require` statements by webpack breaking\n// the conditional importing.\nfunction getShadowNodeFromRef(_ref) {\n    return null;\n} //# sourceMappingURL=getShadowNodeFromRef.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2V0U2hhZG93Tm9kZUZyb21SZWYud2ViLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCw0QkFBNEIsR0FBR0U7QUFFL0Isa0ZBQWtGO0FBQ2xGLG1GQUFtRjtBQUNuRixrRkFBa0Y7QUFDbEYsNkJBQTZCO0FBQzdCLFNBQVNBLHFCQUFxQkMsSUFBSTtJQUNoQyxPQUFPO0FBQ1QsRUFDQSxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2V0U2hhZG93Tm9kZUZyb21SZWYud2ViLmpzPzAxODAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFNoYWRvd05vZGVGcm9tUmVmID0gZ2V0U2hhZG93Tm9kZUZyb21SZWY7XG5cbi8vIFVzZWQgYnkgR2VzdHVyZURldGVjdG9yICh1bnN1cHBvcnRlZCBvbiB3ZWIgYXQgdGhlIG1vbWVudCkgdG8gY2hlY2sgd2hldGhlciB0aGVcbi8vIGF0dGFjaGVkIHZpZXcgbWF5IGdldCBmbGF0dGVuZWQgb24gRmFicmljLiBPcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBjYXVzZXMgZXJyb3JzXG4vLyBvbiB3ZWIgZHVlIHRvIHRoZSBzdGF0aWMgcmVzb2x1dGlvbiBvZiBgcmVxdWlyZWAgc3RhdGVtZW50cyBieSB3ZWJwYWNrIGJyZWFraW5nXG4vLyB0aGUgY29uZGl0aW9uYWwgaW1wb3J0aW5nLlxuZnVuY3Rpb24gZ2V0U2hhZG93Tm9kZUZyb21SZWYoX3JlZikge1xuICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFNoYWRvd05vZGVGcm9tUmVmLndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRTaGFkb3dOb2RlRnJvbVJlZiIsIl9yZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlingGestureHandler = exports.flingHandlerName = exports.flingGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst flingGestureHandlerProps = [\n    \"numberOfPointers\",\n    \"direction\"\n];\nexports.flingGestureHandlerProps = flingGestureHandlerProps;\nconst flingHandlerName = \"FlingGestureHandler\";\nexports.flingHandlerName = flingHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst FlingGestureHandler = (0, _createHandler.default)({\n    name: flingHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...flingGestureHandlerProps\n    ],\n    config: {}\n});\nexports.FlingGestureHandler = FlingGestureHandler; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRmxpbmdHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsMkJBQTJCLEdBQUdBLHdCQUF3QixHQUFHQSxnQ0FBZ0MsR0FBRyxLQUFLO0FBRWpHLElBQUlLLGlCQUFpQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNTCwyQkFBMkI7SUFBQztJQUFvQjtDQUFZO0FBQ2xFSixnQ0FBZ0MsR0FBR0k7QUFDbkMsTUFBTUQsbUJBQW1CO0FBQ3pCSCx3QkFBd0IsR0FBR0c7QUFDM0IsaUpBQWlKO0FBQ2pKLE1BQU1ELHNCQUFzQixDQUFDLEdBQUdHLGVBQWVNLE9BQU8sRUFBRTtJQUN0REMsTUFBTVQ7SUFDTlUsY0FBYztXQUFJTCxzQkFBc0JNLHVCQUF1QjtXQUFLVjtLQUF5QjtJQUM3RlcsUUFBUSxDQUFDO0FBQ1g7QUFDQWYsMkJBQTJCLEdBQUdFLHFCQUM5QiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRmxpbmdHZXN0dXJlSGFuZGxlci5qcz9jNThkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GbGluZ0dlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5mbGluZ0hhbmRsZXJOYW1lID0gZXhwb3J0cy5mbGluZ0dlc3R1cmVIYW5kbGVyUHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlSGFuZGxlclwiKSk7XG5cbnZhciBfZ2VzdHVyZUhhbmRsZXJDb21tb24gPSByZXF1aXJlKFwiLi9nZXN0dXJlSGFuZGxlckNvbW1vblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZmxpbmdHZXN0dXJlSGFuZGxlclByb3BzID0gWydudW1iZXJPZlBvaW50ZXJzJywgJ2RpcmVjdGlvbiddO1xuZXhwb3J0cy5mbGluZ0dlc3R1cmVIYW5kbGVyUHJvcHMgPSBmbGluZ0dlc3R1cmVIYW5kbGVyUHJvcHM7XG5jb25zdCBmbGluZ0hhbmRsZXJOYW1lID0gJ0ZsaW5nR2VzdHVyZUhhbmRsZXInO1xuZXhwb3J0cy5mbGluZ0hhbmRsZXJOYW1lID0gZmxpbmdIYW5kbGVyTmFtZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcbmNvbnN0IEZsaW5nR2VzdHVyZUhhbmRsZXIgPSAoMCwgX2NyZWF0ZUhhbmRsZXIuZGVmYXVsdCkoe1xuICBuYW1lOiBmbGluZ0hhbmRsZXJOYW1lLFxuICBhbGxvd2VkUHJvcHM6IFsuLi5fZ2VzdHVyZUhhbmRsZXJDb21tb24uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsIC4uLmZsaW5nR2VzdHVyZUhhbmRsZXJQcm9wc10sXG4gIGNvbmZpZzoge31cbn0pO1xuZXhwb3J0cy5GbGluZ0dlc3R1cmVIYW5kbGVyID0gRmxpbmdHZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZsaW5nR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmxpbmdHZXN0dXJlSGFuZGxlciIsImZsaW5nSGFuZGxlck5hbWUiLCJmbGluZ0dlc3R1cmVIYW5kbGVyUHJvcHMiLCJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJuYW1lIiwiYWxsb3dlZFByb3BzIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ForceTouchGestureHandler = exports.forceTouchHandlerName = exports.forceTouchGestureHandlerProps = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _PlatformConstants = _interopRequireDefault(__webpack_require__(/*! ../PlatformConstants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js\"));\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst forceTouchGestureHandlerProps = [\n    \"minForce\",\n    \"maxForce\",\n    \"feedbackOnActivation\"\n]; // implicit `children` prop has been removed in @types/react^18.0.0\nexports.forceTouchGestureHandlerProps = forceTouchGestureHandlerProps;\nclass ForceTouchFallback extends _react.default.Component {\n    componentDidMount() {\n        console.warn((0, _utils.tagMessage)(\"ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase\"));\n    }\n    render() {\n        return this.props.children;\n    }\n}\n_defineProperty(ForceTouchFallback, \"forceTouchAvailable\", false);\nconst forceTouchHandlerName = \"ForceTouchGestureHandler\"; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexports.forceTouchHandlerName = forceTouchHandlerName;\nconst ForceTouchGestureHandler = _PlatformConstants.default !== null && _PlatformConstants.default !== void 0 && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)({\n    name: forceTouchHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps\n    ],\n    config: {}\n}) : ForceTouchFallback;\nexports.ForceTouchGestureHandler = ForceTouchGestureHandler;\nForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false; //# sourceMappingURL=ForceTouchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxnQ0FBZ0MsR0FBR0EsNkJBQTZCLEdBQUdBLHFDQUFxQyxHQUFHLEtBQUs7QUFFaEgsSUFBSUssU0FBU0MsdUJBQXVCQyxtQkFBT0EsQ0FBQyxvQkFBTztBQUVuRCxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxtRkFBVTtBQUUvQixJQUFJRSxxQkFBcUJILHVCQUF1QkMsbUJBQU9BLENBQUMsK0dBQXNCO0FBRTlFLElBQUlHLGlCQUFpQkosdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUksd0JBQXdCSixtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCTSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixTQUFTRyxnQkFBZ0JILEdBQUcsRUFBRUksR0FBRyxFQUFFZixLQUFLO0lBQUksSUFBSWUsT0FBT0osS0FBSztRQUFFZCxPQUFPQyxjQUFjLENBQUNhLEtBQUtJLEtBQUs7WUFBRWYsT0FBT0E7WUFBT2dCLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVQLEdBQUcsQ0FBQ0ksSUFBSSxHQUFHZjtJQUFPO0lBQUUsT0FBT1c7QUFBSztBQUVoTixNQUFNUixnQ0FBZ0M7SUFBQztJQUFZO0lBQVk7Q0FBdUIsRUFBRSxtRUFBbUU7QUFFM0pKLHFDQUFxQyxHQUFHSTtBQUV4QyxNQUFNZ0IsMkJBQTJCZixPQUFPUyxPQUFPLENBQUNPLFNBQVM7SUFDdkRDLG9CQUFvQjtRQUNsQkMsUUFBUUMsSUFBSSxDQUFDLENBQUMsR0FBR2hCLE9BQU9pQixVQUFVLEVBQUU7SUFDdEM7SUFFQUMsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDQyxLQUFLLENBQUNDLFFBQVE7SUFDNUI7QUFFRjtBQUVBYixnQkFBZ0JLLG9CQUFvQix1QkFBdUI7QUFFM0QsTUFBTWpCLHdCQUF3Qiw0QkFBNEIsaUpBQWlKO0FBRTNNSCw2QkFBNkIsR0FBR0c7QUFDaEMsTUFBTUQsMkJBQTJCTyxtQkFBbUJLLE9BQU8sS0FBSyxRQUFRTCxtQkFBbUJLLE9BQU8sS0FBSyxLQUFLLEtBQUtMLG1CQUFtQkssT0FBTyxDQUFDZSxtQkFBbUIsR0FBRyxDQUFDLEdBQUduQixlQUFlSSxPQUFPLEVBQUU7SUFDNUxnQixNQUFNM0I7SUFDTjRCLGNBQWM7V0FBSXBCLHNCQUFzQnFCLHVCQUF1QjtXQUFLNUI7S0FBOEI7SUFDbEc2QixRQUFRLENBQUM7QUFDWCxLQUFLYjtBQUNMcEIsZ0NBQWdDLEdBQUdFO0FBQ25DQSx5QkFBeUIyQixtQkFBbUIsR0FBRyxDQUFDcEIsbUJBQW1CSyxPQUFPLEtBQUssUUFBUUwsbUJBQW1CSyxPQUFPLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUwsbUJBQW1CSyxPQUFPLENBQUNlLG1CQUFtQixLQUFLLE9BQzNMLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9Gb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIuanM/NTE4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5mb3JjZVRvdWNoSGFuZGxlck5hbWUgPSBleHBvcnRzLmZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlclByb3BzID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX1BsYXRmb3JtQ29uc3RhbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGxhdGZvcm1Db25zdGFudHNcIikpO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmNvbnN0IGZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlclByb3BzID0gWydtaW5Gb3JjZScsICdtYXhGb3JjZScsICdmZWVkYmFja09uQWN0aXZhdGlvbiddOyAvLyBpbXBsaWNpdCBgY2hpbGRyZW5gIHByb3AgaGFzIGJlZW4gcmVtb3ZlZCBpbiBAdHlwZXMvcmVhY3ReMTguMC4wXG5cbmV4cG9ydHMuZm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHMgPSBmb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wcztcblxuY2xhc3MgRm9yY2VUb3VjaEZhbGxiYWNrIGV4dGVuZHMgX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc29sZS53YXJuKCgwLCBfdXRpbHMudGFnTWVzc2FnZSkoJ0ZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlciBpcyBub3QgYXZhaWxhYmxlIG9uIHRoaXMgcGxhdGZvcm0uIFBsZWFzZSB1c2UgRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmZvcmNlVG91Y2hBdmFpbGFibGUgdG8gY29uZGl0aW9uYWxseSByZW5kZXIgb3RoZXIgY29tcG9uZW50cyB0aGF0IHdvdWxkIHByb3ZpZGUgYSBmYWxsYmFjayBiZWhhdmlvciBzcGVjaWZpYyB0byB5b3VyIHVzZWNhc2UnKSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cblxufVxuXG5fZGVmaW5lUHJvcGVydHkoRm9yY2VUb3VjaEZhbGxiYWNrLCBcImZvcmNlVG91Y2hBdmFpbGFibGVcIiwgZmFsc2UpO1xuXG5jb25zdCBmb3JjZVRvdWNoSGFuZGxlck5hbWUgPSAnRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuXG5leHBvcnRzLmZvcmNlVG91Y2hIYW5kbGVyTmFtZSA9IGZvcmNlVG91Y2hIYW5kbGVyTmFtZTtcbmNvbnN0IEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlciA9IF9QbGF0Zm9ybUNvbnN0YW50cy5kZWZhdWx0ICE9PSBudWxsICYmIF9QbGF0Zm9ybUNvbnN0YW50cy5kZWZhdWx0ICE9PSB2b2lkIDAgJiYgX1BsYXRmb3JtQ29uc3RhbnRzLmRlZmF1bHQuZm9yY2VUb3VjaEF2YWlsYWJsZSA/ICgwLCBfY3JlYXRlSGFuZGxlci5kZWZhdWx0KSh7XG4gIG5hbWU6IGZvcmNlVG91Y2hIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBbLi4uX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLCAuLi5mb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wc10sXG4gIGNvbmZpZzoge31cbn0pIDogRm9yY2VUb3VjaEZhbGxiYWNrO1xuZXhwb3J0cy5Gb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgPSBGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXI7XG5Gb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIuZm9yY2VUb3VjaEF2YWlsYWJsZSA9IChfUGxhdGZvcm1Db25zdGFudHMuZGVmYXVsdCA9PT0gbnVsbCB8fCBfUGxhdGZvcm1Db25zdGFudHMuZGVmYXVsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX1BsYXRmb3JtQ29uc3RhbnRzLmRlZmF1bHQuZm9yY2VUb3VjaEF2YWlsYWJsZSkgfHwgZmFsc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyIiwiZm9yY2VUb3VjaEhhbmRsZXJOYW1lIiwiZm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHMiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIl9QbGF0Zm9ybUNvbnN0YW50cyIsIl9jcmVhdGVIYW5kbGVyIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJGb3JjZVRvdWNoRmFsbGJhY2siLCJDb21wb25lbnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwidGFnTWVzc2FnZSIsInJlbmRlciIsInByb3BzIiwiY2hpbGRyZW4iLCJmb3JjZVRvdWNoQXZhaWxhYmxlIiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongPressGestureHandler = exports.longPressHandlerName = exports.longPressGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst longPressGestureHandlerProps = [\n    \"minDurationMs\",\n    \"maxDist\"\n];\nexports.longPressGestureHandlerProps = longPressGestureHandlerProps;\nconst longPressHandlerName = \"LongPressGestureHandler\";\nexports.longPressHandlerName = longPressHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst LongPressGestureHandler = (0, _createHandler.default)({\n    name: longPressHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...longPressGestureHandlerProps\n    ],\n    config: {\n        shouldCancelWhenOutside: true\n    }\n});\nexports.LongPressGestureHandler = LongPressGestureHandler; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELCtCQUErQixHQUFHQSw0QkFBNEIsR0FBR0Esb0NBQW9DLEdBQUcsS0FBSztBQUU3RyxJQUFJSyxpQkFBaUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsMkdBQWlCO0FBRXJFLElBQUlDLHdCQUF3QkQsbUJBQU9BLENBQUMseUhBQXdCO0FBRTVELFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwsK0JBQStCO0lBQUM7SUFBaUI7Q0FBVTtBQUNqRUosb0NBQW9DLEdBQUdJO0FBQ3ZDLE1BQU1ELHVCQUF1QjtBQUM3QkgsNEJBQTRCLEdBQUdHO0FBQy9CLGlKQUFpSjtBQUNqSixNQUFNRCwwQkFBMEIsQ0FBQyxHQUFHRyxlQUFlTSxPQUFPLEVBQUU7SUFDMURDLE1BQU1UO0lBQ05VLGNBQWM7V0FBSUwsc0JBQXNCTSx1QkFBdUI7V0FBS1Y7S0FBNkI7SUFDakdXLFFBQVE7UUFDTkMseUJBQXlCO0lBQzNCO0FBQ0Y7QUFDQWhCLCtCQUErQixHQUFHRSx5QkFDbEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL0xvbmdQcmVzc0dlc3R1cmVIYW5kbGVyLmpzPzEzNGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5sb25nUHJlc3NIYW5kbGVyTmFtZSA9IGV4cG9ydHMubG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXJQcm9wcyA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVIYW5kbGVyXCIpKTtcblxudmFyIF9nZXN0dXJlSGFuZGxlckNvbW1vbiA9IHJlcXVpcmUoXCIuL2dlc3R1cmVIYW5kbGVyQ29tbW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBsb25nUHJlc3NHZXN0dXJlSGFuZGxlclByb3BzID0gWydtaW5EdXJhdGlvbk1zJywgJ21heERpc3QnXTtcbmV4cG9ydHMubG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXJQcm9wcyA9IGxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyUHJvcHM7XG5jb25zdCBsb25nUHJlc3NIYW5kbGVyTmFtZSA9ICdMb25nUHJlc3NHZXN0dXJlSGFuZGxlcic7XG5leHBvcnRzLmxvbmdQcmVzc0hhbmRsZXJOYW1lID0gbG9uZ1ByZXNzSGFuZGxlck5hbWU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBzZWUgZGVzY3JpcHRpb24gb24gdGhlIHRvcCBvZiBnZXN0dXJlSGFuZGxlckNvbW1vbi50cyBmaWxlXG5jb25zdCBMb25nUHJlc3NHZXN0dXJlSGFuZGxlciA9ICgwLCBfY3JlYXRlSGFuZGxlci5kZWZhdWx0KSh7XG4gIG5hbWU6IGxvbmdQcmVzc0hhbmRsZXJOYW1lLFxuICBhbGxvd2VkUHJvcHM6IFsuLi5fZ2VzdHVyZUhhbmRsZXJDb21tb24uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsIC4uLmxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyUHJvcHNdLFxuICBjb25maWc6IHtcbiAgICBzaG91bGRDYW5jZWxXaGVuT3V0c2lkZTogdHJ1ZVxuICB9XG59KTtcbmV4cG9ydHMuTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIgPSBMb25nUHJlc3NHZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyIiwibG9uZ1ByZXNzSGFuZGxlck5hbWUiLCJsb25nUHJlc3NHZXN0dXJlSGFuZGxlclByb3BzIiwiX2NyZWF0ZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXN0dXJlSGFuZGxlckNvbW1vbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwiY29uZmlnIiwic2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NativeViewGestureHandler = exports.nativeViewHandlerName = exports.nativeViewProps = exports.nativeViewGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst nativeViewGestureHandlerProps = [\n    \"shouldActivateOnStart\",\n    \"disallowInterruption\"\n];\nexports.nativeViewGestureHandlerProps = nativeViewGestureHandlerProps;\nconst nativeViewProps = [\n    ..._gestureHandlerCommon.baseGestureHandlerProps,\n    ...nativeViewGestureHandlerProps\n];\nexports.nativeViewProps = nativeViewProps;\nconst nativeViewHandlerName = \"NativeViewGestureHandler\";\nexports.nativeViewHandlerName = nativeViewHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst NativeViewGestureHandler = (0, _createHandler.default)({\n    name: nativeViewHandlerName,\n    allowedProps: nativeViewProps,\n    config: {}\n});\nexports.NativeViewGestureHandler = NativeViewGestureHandler; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxnQ0FBZ0MsR0FBR0EsNkJBQTZCLEdBQUdBLHVCQUF1QixHQUFHQSxxQ0FBcUMsR0FBRyxLQUFLO0FBRTFJLElBQUlNLGlCQUFpQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNTCxnQ0FBZ0M7SUFBQztJQUF5QjtDQUF1QjtBQUN2RkwscUNBQXFDLEdBQUdLO0FBQ3hDLE1BQU1ELGtCQUFrQjtPQUFJSyxzQkFBc0JJLHVCQUF1QjtPQUFLUjtDQUE4QjtBQUM1R0wsdUJBQXVCLEdBQUdJO0FBQzFCLE1BQU1ELHdCQUF3QjtBQUM5QkgsNkJBQTZCLEdBQUdHO0FBQ2hDLGlKQUFpSjtBQUNqSixNQUFNRCwyQkFBMkIsQ0FBQyxHQUFHSSxlQUFlTSxPQUFPLEVBQUU7SUFDM0RFLE1BQU1YO0lBQ05ZLGNBQWNYO0lBQ2RZLFFBQVEsQ0FBQztBQUNYO0FBQ0FoQixnQ0FBZ0MsR0FBR0UsMEJBQ25DLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanM/NWFjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5uYXRpdmVWaWV3SGFuZGxlck5hbWUgPSBleHBvcnRzLm5hdGl2ZVZpZXdQcm9wcyA9IGV4cG9ydHMubmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlSGFuZGxlclwiKSk7XG5cbnZhciBfZ2VzdHVyZUhhbmRsZXJDb21tb24gPSByZXF1aXJlKFwiLi9nZXN0dXJlSGFuZGxlckNvbW1vblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgbmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHMgPSBbJ3Nob3VsZEFjdGl2YXRlT25TdGFydCcsICdkaXNhbGxvd0ludGVycnVwdGlvbiddO1xuZXhwb3J0cy5uYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcyA9IG5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzO1xuY29uc3QgbmF0aXZlVmlld1Byb3BzID0gWy4uLl9nZXN0dXJlSGFuZGxlckNvbW1vbi5iYXNlR2VzdHVyZUhhbmRsZXJQcm9wcywgLi4ubmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHNdO1xuZXhwb3J0cy5uYXRpdmVWaWV3UHJvcHMgPSBuYXRpdmVWaWV3UHJvcHM7XG5jb25zdCBuYXRpdmVWaWV3SGFuZGxlck5hbWUgPSAnTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyJztcbmV4cG9ydHMubmF0aXZlVmlld0hhbmRsZXJOYW1lID0gbmF0aXZlVmlld0hhbmRsZXJOYW1lO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuY29uc3QgTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyID0gKDAsIF9jcmVhdGVIYW5kbGVyLmRlZmF1bHQpKHtcbiAgbmFtZTogbmF0aXZlVmlld0hhbmRsZXJOYW1lLFxuICBhbGxvd2VkUHJvcHM6IG5hdGl2ZVZpZXdQcm9wcyxcbiAgY29uZmlnOiB7fVxufSk7XG5leHBvcnRzLk5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciA9IE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIiLCJuYXRpdmVWaWV3SGFuZGxlck5hbWUiLCJuYXRpdmVWaWV3UHJvcHMiLCJuYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcyIsIl9jcmVhdGVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZ2VzdHVyZUhhbmRsZXJDb21tb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.managePanProps = managePanProps;\nexports.PanGestureHandler = exports.panHandlerName = exports.panGestureHandlerCustomNativeProps = exports.panGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst panGestureHandlerProps = [\n    \"activeOffsetY\",\n    \"activeOffsetX\",\n    \"failOffsetY\",\n    \"failOffsetX\",\n    \"minDist\",\n    \"minVelocity\",\n    \"minVelocityX\",\n    \"minVelocityY\",\n    \"minPointers\",\n    \"maxPointers\",\n    \"avgTouches\",\n    \"enableTrackpadTwoFingerGesture\",\n    \"activateAfterLongPress\"\n];\nexports.panGestureHandlerProps = panGestureHandlerProps;\nconst panGestureHandlerCustomNativeProps = [\n    \"activeOffsetYStart\",\n    \"activeOffsetYEnd\",\n    \"activeOffsetXStart\",\n    \"activeOffsetXEnd\",\n    \"failOffsetYStart\",\n    \"failOffsetYEnd\",\n    \"failOffsetXStart\",\n    \"failOffsetXEnd\"\n];\nexports.panGestureHandlerCustomNativeProps = panGestureHandlerCustomNativeProps;\nconst panHandlerName = \"PanGestureHandler\";\nexports.panHandlerName = panHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst PanGestureHandler = (0, _createHandler.default)({\n    name: panHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...panGestureHandlerProps\n    ],\n    config: {},\n    transformProps: managePanProps,\n    customNativeProps: panGestureHandlerCustomNativeProps\n});\nexports.PanGestureHandler = PanGestureHandler;\nfunction validatePanGestureHandlerProps(props) {\n    if (Array.isArray(props.activeOffsetX) && (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)) {\n        throw new Error(`First element of activeOffsetX should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.activeOffsetY) && (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)) {\n        throw new Error(`First element of activeOffsetY should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.failOffsetX) && (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)) {\n        throw new Error(`First element of failOffsetX should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.failOffsetY) && (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)) {\n        throw new Error(`First element of failOffsetY should be negative, a the second one should be positive`);\n    }\n    if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n        throw new Error(`It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`);\n    }\n    if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n        throw new Error(`It is not supported to use minDist with activeOffsetX or activeOffsetY`);\n    }\n}\nfunction transformPanGestureHandlerProps(props) {\n    const res = {\n        ...props\n    };\n    if (props.activeOffsetX !== undefined) {\n        delete res.activeOffsetX;\n        if (Array.isArray(props.activeOffsetX)) {\n            res.activeOffsetXStart = props.activeOffsetX[0];\n            res.activeOffsetXEnd = props.activeOffsetX[1];\n        } else if (props.activeOffsetX < 0) {\n            res.activeOffsetXStart = props.activeOffsetX;\n        } else {\n            res.activeOffsetXEnd = props.activeOffsetX;\n        }\n    }\n    if (props.activeOffsetY !== undefined) {\n        delete res.activeOffsetY;\n        if (Array.isArray(props.activeOffsetY)) {\n            res.activeOffsetYStart = props.activeOffsetY[0];\n            res.activeOffsetYEnd = props.activeOffsetY[1];\n        } else if (props.activeOffsetY < 0) {\n            res.activeOffsetYStart = props.activeOffsetY;\n        } else {\n            res.activeOffsetYEnd = props.activeOffsetY;\n        }\n    }\n    if (props.failOffsetX !== undefined) {\n        delete res.failOffsetX;\n        if (Array.isArray(props.failOffsetX)) {\n            res.failOffsetXStart = props.failOffsetX[0];\n            res.failOffsetXEnd = props.failOffsetX[1];\n        } else if (props.failOffsetX < 0) {\n            res.failOffsetXStart = props.failOffsetX;\n        } else {\n            res.failOffsetXEnd = props.failOffsetX;\n        }\n    }\n    if (props.failOffsetY !== undefined) {\n        delete res.failOffsetY;\n        if (Array.isArray(props.failOffsetY)) {\n            res.failOffsetYStart = props.failOffsetY[0];\n            res.failOffsetYEnd = props.failOffsetY[1];\n        } else if (props.failOffsetY < 0) {\n            res.failOffsetYStart = props.failOffsetY;\n        } else {\n            res.failOffsetYEnd = props.failOffsetY;\n        }\n    }\n    return res;\n}\nfunction managePanProps(props) {\n    if (true) {\n        validatePanGestureHandlerProps(props);\n    }\n    return transformPanGestureHandlerProps(props);\n} //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PinchGestureHandler = exports.pinchHandlerName = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst pinchHandlerName = \"PinchGestureHandler\";\nexports.pinchHandlerName = pinchHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst PinchGestureHandler = (0, _createHandler.default)({\n    name: pinchHandlerName,\n    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,\n    config: {}\n});\nexports.PinchGestureHandler = PinchGestureHandler; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUGluY2hHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsMkJBQTJCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFFOUQsSUFBSUksaUJBQWlCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJHQUFpQjtBQUVyRSxJQUFJQyx3QkFBd0JELG1CQUFPQSxDQUFDLHlIQUF3QjtBQUU1RCxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU1MLG1CQUFtQjtBQUN6Qkgsd0JBQXdCLEdBQUdHO0FBQzNCLGlKQUFpSjtBQUNqSixNQUFNRCxzQkFBc0IsQ0FBQyxHQUFHRSxlQUFlTSxPQUFPLEVBQUU7SUFDdERDLE1BQU1SO0lBQ05TLGNBQWNMLHNCQUFzQk0sdUJBQXVCO0lBQzNEQyxRQUFRLENBQUM7QUFDWDtBQUNBZCwyQkFBMkIsR0FBR0UscUJBQzlCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9QaW5jaEdlc3R1cmVIYW5kbGVyLmpzPzgzMGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBpbmNoR2VzdHVyZUhhbmRsZXIgPSBleHBvcnRzLnBpbmNoSGFuZGxlck5hbWUgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlSGFuZGxlclwiKSk7XG5cbnZhciBfZ2VzdHVyZUhhbmRsZXJDb21tb24gPSByZXF1aXJlKFwiLi9nZXN0dXJlSGFuZGxlckNvbW1vblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgcGluY2hIYW5kbGVyTmFtZSA9ICdQaW5jaEdlc3R1cmVIYW5kbGVyJztcbmV4cG9ydHMucGluY2hIYW5kbGVyTmFtZSA9IHBpbmNoSGFuZGxlck5hbWU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBzZWUgZGVzY3JpcHRpb24gb24gdGhlIHRvcCBvZiBnZXN0dXJlSGFuZGxlckNvbW1vbi50cyBmaWxlXG5jb25zdCBQaW5jaEdlc3R1cmVIYW5kbGVyID0gKDAsIF9jcmVhdGVIYW5kbGVyLmRlZmF1bHQpKHtcbiAgbmFtZTogcGluY2hIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBfZ2VzdHVyZUhhbmRsZXJDb21tb24uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIGNvbmZpZzoge31cbn0pO1xuZXhwb3J0cy5QaW5jaEdlc3R1cmVIYW5kbGVyID0gUGluY2hHZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBpbmNoR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGluY2hHZXN0dXJlSGFuZGxlciIsInBpbmNoSGFuZGxlck5hbWUiLCJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJuYW1lIiwiYWxsb3dlZFByb3BzIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PressabilityDebugView = PressabilityDebugView;\n// PressabilityDebugView is not implemented in react-native-web\nfunction PressabilityDebugView() {\n    return null;\n} //# sourceMappingURL=PressabilityDebugView.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUHJlc3NhYmlsaXR5RGVidWdWaWV3LndlYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsNkJBQTZCLEdBQUdFO0FBRWhDLCtEQUErRDtBQUMvRCxTQUFTQTtJQUNQLE9BQU87QUFDVCxFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9QcmVzc2FiaWxpdHlEZWJ1Z1ZpZXcud2ViLmpzPzZiMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlByZXNzYWJpbGl0eURlYnVnVmlldyA9IFByZXNzYWJpbGl0eURlYnVnVmlldztcblxuLy8gUHJlc3NhYmlsaXR5RGVidWdWaWV3IGlzIG5vdCBpbXBsZW1lbnRlZCBpbiByZWFjdC1uYXRpdmUtd2ViXG5mdW5jdGlvbiBQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXcoKSB7XG4gIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJlc3NhYmlsaXR5RGVidWdWaWV3LndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RotationGestureHandler = exports.rotationHandlerName = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst rotationHandlerName = \"RotationGestureHandler\";\nexports.rotationHandlerName = rotationHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst RotationGestureHandler = (0, _createHandler.default)({\n    name: rotationHandlerName,\n    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,\n    config: {}\n});\nexports.RotationGestureHandler = RotationGestureHandler; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUm90YXRpb25HZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsOEJBQThCLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFFcEUsSUFBSUksaUJBQWlCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJHQUFpQjtBQUVyRSxJQUFJQyx3QkFBd0JELG1CQUFPQSxDQUFDLHlIQUF3QjtBQUU1RCxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU1MLHNCQUFzQjtBQUM1QkgsMkJBQTJCLEdBQUdHO0FBQzlCLGlKQUFpSjtBQUNqSixNQUFNRCx5QkFBeUIsQ0FBQyxHQUFHRSxlQUFlTSxPQUFPLEVBQUU7SUFDekRDLE1BQU1SO0lBQ05TLGNBQWNMLHNCQUFzQk0sdUJBQXVCO0lBQzNEQyxRQUFRLENBQUM7QUFDWDtBQUNBZCw4QkFBOEIsR0FBR0Usd0JBQ2pDLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyLmpzPzgwOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJvdGF0aW9uR2VzdHVyZUhhbmRsZXIgPSBleHBvcnRzLnJvdGF0aW9uSGFuZGxlck5hbWUgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlSGFuZGxlclwiKSk7XG5cbnZhciBfZ2VzdHVyZUhhbmRsZXJDb21tb24gPSByZXF1aXJlKFwiLi9nZXN0dXJlSGFuZGxlckNvbW1vblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3Qgcm90YXRpb25IYW5kbGVyTmFtZSA9ICdSb3RhdGlvbkdlc3R1cmVIYW5kbGVyJztcbmV4cG9ydHMucm90YXRpb25IYW5kbGVyTmFtZSA9IHJvdGF0aW9uSGFuZGxlck5hbWU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBzZWUgZGVzY3JpcHRpb24gb24gdGhlIHRvcCBvZiBnZXN0dXJlSGFuZGxlckNvbW1vbi50cyBmaWxlXG5jb25zdCBSb3RhdGlvbkdlc3R1cmVIYW5kbGVyID0gKDAsIF9jcmVhdGVIYW5kbGVyLmRlZmF1bHQpKHtcbiAgbmFtZTogcm90YXRpb25IYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBfZ2VzdHVyZUhhbmRsZXJDb21tb24uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIGNvbmZpZzoge31cbn0pO1xuZXhwb3J0cy5Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyID0gUm90YXRpb25HZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJvdGF0aW9uR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUm90YXRpb25HZXN0dXJlSGFuZGxlciIsInJvdGF0aW9uSGFuZGxlck5hbWUiLCJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJuYW1lIiwiYWxsb3dlZFByb3BzIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TapGestureHandler = exports.tapHandlerName = exports.tapGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst tapGestureHandlerProps = [\n    \"maxDurationMs\",\n    \"maxDelayMs\",\n    \"numberOfTaps\",\n    \"maxDeltaX\",\n    \"maxDeltaY\",\n    \"maxDist\",\n    \"minPointers\"\n];\nexports.tapGestureHandlerProps = tapGestureHandlerProps;\nconst tapHandlerName = \"TapGestureHandler\";\nexports.tapHandlerName = tapHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst TapGestureHandler = (0, _createHandler.default)({\n    name: tapHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...tapGestureHandlerProps\n    ],\n    config: {\n        shouldCancelWhenOutside: true\n    }\n});\nexports.TapGestureHandler = TapGestureHandler; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvVGFwR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHQSxzQkFBc0IsR0FBR0EsOEJBQThCLEdBQUcsS0FBSztBQUUzRixJQUFJSyxpQkFBaUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsMkdBQWlCO0FBRXJFLElBQUlDLHdCQUF3QkQsbUJBQU9BLENBQUMseUhBQXdCO0FBRTVELFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwseUJBQXlCO0lBQUM7SUFBaUI7SUFBYztJQUFnQjtJQUFhO0lBQWE7SUFBVztDQUFjO0FBQ2xJSiw4QkFBOEIsR0FBR0k7QUFDakMsTUFBTUQsaUJBQWlCO0FBQ3ZCSCxzQkFBc0IsR0FBR0c7QUFDekIsaUpBQWlKO0FBQ2pKLE1BQU1ELG9CQUFvQixDQUFDLEdBQUdHLGVBQWVNLE9BQU8sRUFBRTtJQUNwREMsTUFBTVQ7SUFDTlUsY0FBYztXQUFJTCxzQkFBc0JNLHVCQUF1QjtXQUFLVjtLQUF1QjtJQUMzRlcsUUFBUTtRQUNOQyx5QkFBeUI7SUFDM0I7QUFDRjtBQUNBaEIseUJBQXlCLEdBQUdFLG1CQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvVGFwR2VzdHVyZUhhbmRsZXIuanM/M2Y4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVGFwR2VzdHVyZUhhbmRsZXIgPSBleHBvcnRzLnRhcEhhbmRsZXJOYW1lID0gZXhwb3J0cy50YXBHZXN0dXJlSGFuZGxlclByb3BzID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IHRhcEdlc3R1cmVIYW5kbGVyUHJvcHMgPSBbJ21heER1cmF0aW9uTXMnLCAnbWF4RGVsYXlNcycsICdudW1iZXJPZlRhcHMnLCAnbWF4RGVsdGFYJywgJ21heERlbHRhWScsICdtYXhEaXN0JywgJ21pblBvaW50ZXJzJ107XG5leHBvcnRzLnRhcEdlc3R1cmVIYW5kbGVyUHJvcHMgPSB0YXBHZXN0dXJlSGFuZGxlclByb3BzO1xuY29uc3QgdGFwSGFuZGxlck5hbWUgPSAnVGFwR2VzdHVyZUhhbmRsZXInO1xuZXhwb3J0cy50YXBIYW5kbGVyTmFtZSA9IHRhcEhhbmRsZXJOYW1lO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuY29uc3QgVGFwR2VzdHVyZUhhbmRsZXIgPSAoMCwgX2NyZWF0ZUhhbmRsZXIuZGVmYXVsdCkoe1xuICBuYW1lOiB0YXBIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBbLi4uX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLCAuLi50YXBHZXN0dXJlSGFuZGxlclByb3BzXSxcbiAgY29uZmlnOiB7XG4gICAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IHRydWVcbiAgfVxufSk7XG5leHBvcnRzLlRhcEdlc3R1cmVIYW5kbGVyID0gVGFwR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UYXBHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUYXBHZXN0dXJlSGFuZGxlciIsInRhcEhhbmRsZXJOYW1lIiwidGFwR2VzdHVyZUhhbmRsZXJQcm9wcyIsIl9jcmVhdGVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZ2VzdHVyZUhhbmRsZXJDb21tb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsImNvbmZpZyIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = createHandler;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _isEqual = _interopRequireDefault(__webpack_require__(/*! lodash/isEqual */ \"lodash/isEqual\"));\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _ActionType = __webpack_require__(/*! ../ActionType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\");\nvar _PressabilityDebugView = __webpack_require__(/*! ./PressabilityDebugView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js\");\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst UIManagerAny = _reactNative.UIManager;\nconst customGHEventsConfigFabricAndroid = {\n    topOnGestureHandlerEvent: {\n        registrationName: \"onGestureHandlerEvent\"\n    },\n    topOnGestureHandlerStateChange: {\n        registrationName: \"onGestureHandlerStateChange\"\n    }\n};\nconst customGHEventsConfig = {\n    onGestureHandlerEvent: {\n        registrationName: \"onGestureHandlerEvent\"\n    },\n    onGestureHandlerStateChange: {\n        registrationName: \"onGestureHandlerStateChange\"\n    },\n    // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n    // on Android with Fabric enabled, the native part still sends the native events to JS\n    // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n    // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n    // That's why we need to register another pair of event names.\n    // The incoming events will be queued but never handled.\n    // Without this piece of code below, you'll get the following JS error:\n    // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n    ...(0, _utils.isFabric)() && _reactNative.Platform.OS === \"android\" && customGHEventsConfigFabricAndroid\n}; // Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n    ...UIManagerAny.genericDirectEventTypes,\n    ...customGHEventsConfig\n}; // In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, \"getConstants\")) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n    UIManagerConstants.genericDirectEventTypes = {\n        ...UIManagerConstants.genericDirectEventTypes,\n        ...customGHEventsConfig\n    };\n} // Wrap JS responder calls and notify gesture handler manager\nconst { setJSResponder: oldSetJSResponder = ()=>{}, clearJSResponder: oldClearJSResponder = ()=>{} } = UIManagerAny;\nUIManagerAny.setJSResponder = (tag, blockNativeResponder)=>{\n    _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n    oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = ()=>{\n    _RNGestureHandlerModule.default.handleClearJSResponder();\n    oldClearJSResponder();\n};\nlet allowTouches = true;\nconst DEV_ON_ANDROID =  true && _reactNative.Platform.OS === \"android\"; // Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n    _reactNative.DeviceEventEmitter.addListener(\"toggleElementInspector\", ()=>{\n        allowTouches = !allowTouches;\n    });\n}\nfunction hasUnresolvedRefs(props) {\n    // TODO(TS) - add type for extract arg\n    const extract = (refs)=>{\n        if (!Array.isArray(refs)) {\n            return refs && refs.current === null;\n        }\n        return refs.some((r)=>r && r.current === null);\n    };\n    return extract(props[\"simultaneousHandlers\"]) || extract(props[\"waitFor\"]);\n}\nconst stateToPropMappings = {\n    [_State.State.UNDETERMINED]: undefined,\n    [_State.State.BEGAN]: \"onBegan\",\n    [_State.State.FAILED]: \"onFailed\",\n    [_State.State.CANCELLED]: \"onCancelled\",\n    [_State.State.ACTIVE]: \"onActivated\",\n    [_State.State.END]: \"onEnded\"\n};\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1; // TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nfunction createHandler({ name, allowedProps = [], config = {}, transformProps, customNativeProps = [] }) {\n    class Handler extends React.Component {\n        constructor(props){\n            super(props);\n            _defineProperty(this, \"handlerTag\", void 0);\n            _defineProperty(this, \"config\", void 0);\n            _defineProperty(this, \"propsRef\", void 0);\n            _defineProperty(this, \"viewNode\", void 0);\n            _defineProperty(this, \"viewTag\", void 0);\n            _defineProperty(this, \"updateEnqueued\", null);\n            _defineProperty(this, \"inspectorToggleListener\", void 0);\n            _defineProperty(this, \"onGestureHandlerEvent\", (event)=>{\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    if (typeof this.props.onGestureEvent === \"function\") {\n                        var _this$props$onGesture, _this$props;\n                        (_this$props$onGesture = (_this$props = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n                    }\n                } else {\n                    var _this$props$onGesture2, _this$props2;\n                    (_this$props$onGesture2 = (_this$props2 = this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n                }\n            });\n            _defineProperty(this, \"onGestureHandlerStateChange\", (event)=>{\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    if (typeof this.props.onHandlerStateChange === \"function\") {\n                        var _this$props$onHandler, _this$props3;\n                        (_this$props$onHandler = (_this$props3 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n                    }\n                    const state = event.nativeEvent.state;\n                    const stateEventName = stateToPropMappings[state];\n                    const eventHandler = stateEventName && this.props[stateEventName];\n                    if (eventHandler && typeof eventHandler === \"function\") {\n                        eventHandler(event);\n                    }\n                } else {\n                    var _this$props$onGesture3, _this$props4;\n                    (_this$props$onGesture3 = (_this$props4 = this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n                }\n            });\n            _defineProperty(this, \"refHandler\", (node)=>{\n                this.viewNode = node;\n                const child = React.Children.only(this.props.children); // TODO(TS) fix ref type\n                const { ref } = child;\n                if (ref !== null) {\n                    if (typeof ref === \"function\") {\n                        ref(node);\n                    } else {\n                        ref.current = node;\n                    }\n                }\n            });\n            _defineProperty(this, \"createGestureHandler\", (newConfig)=>{\n                this.config = newConfig;\n                _RNGestureHandlerModule.default.createGestureHandler(name, this.handlerTag, newConfig);\n            });\n            _defineProperty(this, \"attachGestureHandler\", (newViewTag)=>{\n                this.viewTag = newViewTag;\n                if (_reactNative.Platform.OS === \"web\") {\n                    // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n                    _RNGestureHandlerModule.default.attachGestureHandler(this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, this.propsRef);\n                } else {\n                    (0, _handlersRegistry.registerOldGestureHandler)(this.handlerTag, {\n                        onGestureEvent: this.onGestureHandlerEvent,\n                        onGestureStateChange: this.onGestureHandlerStateChange\n                    });\n                    const actionType = (()=>{\n                        var _this$props5, _this$props6;\n                        if ((_this$props5 = this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && \"current\" in this.props.onGestureEvent) {\n                            // Reanimated worklet\n                            return _ActionType.ActionType.REANIMATED_WORKLET;\n                        } else if ((_this$props6 = this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && \"__isNative\" in this.props.onGestureEvent) {\n                            // Animated.event with useNativeDriver: true\n                            return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;\n                        } else {\n                            // JS callback or Animated.event with useNativeDriver: false\n                            return _ActionType.ActionType.JS_FUNCTION_OLD_API;\n                        }\n                    })();\n                    _RNGestureHandlerModule.default.attachGestureHandler(this.handlerTag, newViewTag, actionType);\n                }\n                (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            });\n            _defineProperty(this, \"updateGestureHandler\", (newConfig)=>{\n                this.config = newConfig;\n                _RNGestureHandlerModule.default.updateGestureHandler(this.handlerTag, newConfig);\n                (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            });\n            this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n            this.config = {};\n            this.propsRef = /*#__PURE__*/ React.createRef();\n            this.state = {\n                allowTouches\n            };\n            if (props.id) {\n                if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n                    throw new Error(`Handler with ID \"${props.id}\" already registered`);\n                }\n                _handlersRegistry.handlerIDToTag[props.id] = this.handlerTag;\n            }\n        }\n        componentDidMount() {\n            const props = this.props;\n            if (DEV_ON_ANDROID) {\n                this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener(\"toggleElementInspector\", ()=>{\n                    this.setState((_)=>({\n                            allowTouches\n                        }));\n                    this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n                });\n            }\n            if (hasUnresolvedRefs(props)) {\n                // If there are unresolved refs (e.g. \".current\" has not yet been set)\n                // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n                // _update method that will try to update native handler props using\n                // setImmediate. This makes it so update() function gets called after all\n                // react components are mounted and we expect the missing ref object to\n                // be resolved by then.\n                this.updateEnqueued = setImmediate(()=>{\n                    this.updateEnqueued = null;\n                    this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n                });\n            }\n            this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [\n                ...allowedProps,\n                ...customNativeProps\n            ], config));\n            this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode)); // TODO(TS) - check if this can be null\n        }\n        componentDidUpdate() {\n            const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n            if (this.viewTag !== viewTag) {\n                this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n            }\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        }\n        componentWillUnmount() {\n            var _this$inspectorToggle;\n            (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n            _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n            (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            if (this.updateEnqueued) {\n                clearImmediate(this.updateEnqueued);\n            } // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n            const handlerID = this.props.id;\n            if (handlerID) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete _handlersRegistry.handlerIDToTag[handlerID];\n            }\n        }\n        update(remainingTries) {\n            const props = this.props; // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n            // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n            // again is easy enough fix.\n            if (hasUnresolvedRefs(props) && remainingTries > 0) {\n                this.updateEnqueued = setImmediate(()=>{\n                    this.updateEnqueued = null;\n                    this.update(remainingTries - 1);\n                });\n            } else {\n                const newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [\n                    ...allowedProps,\n                    ...customNativeProps\n                ], config);\n                if (!(0, _isEqual.default)(this.config, newConfig)) {\n                    this.updateGestureHandler(newConfig);\n                }\n            }\n        }\n        setNativeProps(updates) {\n            const mergedProps = {\n                ...this.props,\n                ...updates\n            };\n            const newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [\n                ...allowedProps,\n                ...customNativeProps\n            ], config);\n            this.updateGestureHandler(newConfig);\n        }\n        render() {\n            var _this$props$testID;\n            let gestureEventHandler = this.onGestureHandlerEvent; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n            const { onGestureEvent, onGestureHandlerEvent } = this.props;\n            if (onGestureEvent && typeof onGestureEvent !== \"function\") {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerEvent) {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n                gestureEventHandler = onGestureEvent;\n            } else {\n                if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== \"function\") {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n            }\n            let gestureStateEventHandler = this.onGestureHandlerStateChange; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n            const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\n            if (onHandlerStateChange && typeof onHandlerStateChange !== \"function\") {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerStateChange) {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n                gestureStateEventHandler = onHandlerStateChange;\n            } else {\n                if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== \"function\") {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n            }\n            const events = {\n                onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n                onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n            };\n            this.propsRef.current = events;\n            let child = null;\n            try {\n                child = React.Children.only(this.props.children);\n            } catch (e) {\n                throw new Error((0, _utils.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n            }\n            let grandChildren = child.props.children;\n            if ( true && child.type && (child.type === \"RNGestureHandlerButton\" || child.type.name === \"View\" || child.type.displayName === \"View\")) {\n                grandChildren = React.Children.toArray(grandChildren);\n                grandChildren.push(/*#__PURE__*/ React.createElement(_PressabilityDebugView.PressabilityDebugView, {\n                    key: \"pressabilityDebugView\",\n                    color: \"mediumspringgreen\",\n                    hitSlop: child.props.hitSlop\n                }));\n            }\n            return /*#__PURE__*/ React.cloneElement(child, {\n                ref: this.refHandler,\n                collapsable: false,\n                ...(0, _utils.isJestEnv)() ? {\n                    handlerType: name,\n                    handlerTag: this.handlerTag\n                } : {},\n                testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID,\n                ...events\n            }, grandChildren);\n        }\n    }\n    _defineProperty(Handler, \"displayName\", name);\n    return Handler;\n} //# sourceMappingURL=createHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = createNativeWrapper;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _NativeViewGestureHandler = __webpack_require__(/*! ./NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */ const NATIVE_WRAPPER_PROPS_FILTER = [\n    ..._NativeViewGestureHandler.nativeViewProps,\n    \"onGestureHandlerEvent\",\n    \"onGestureHandlerStateChange\"\n];\nfunction createNativeWrapper(Component, config = {}) {\n    var _Component$render;\n    const ComponentWrapper = /*#__PURE__*/ React.forwardRef((props, ref)=>{\n        // filter out props that should be passed to gesture handler wrapper\n        const gestureHandlerProps = Object.keys(props).reduce((res, key)=>{\n            // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n            const allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n            if (allowedKeys.includes(key)) {\n                // @ts-ignore FIXME(TS)\n                res[key] = props[key];\n            }\n            return res;\n        }, {\n            ...config\n        } // watch out not to modify config\n        );\n        const _ref = (0, React.useRef)();\n        const _gestureHandlerRef = (0, React.useRef)();\n        (0, React.useImperativeHandle)(ref, ()=>{\n            const node = _gestureHandlerRef.current; // add handlerTag for relations config\n            if (_ref.current && node) {\n                // @ts-ignore FIXME(TS) think about createHandler return type\n                _ref.current.handlerTag = node.handlerTag;\n                return _ref.current;\n            }\n            return null;\n        }, [\n            _ref,\n            _gestureHandlerRef\n        ]);\n        return /*#__PURE__*/ React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n            // @ts-ignore TODO(TS)\n            ref: _gestureHandlerRef\n        }), /*#__PURE__*/ React.createElement(Component, _extends({}, props, {\n            ref: _ref\n        })));\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    ComponentWrapper.displayName = (Component === null || Component === void 0 ? void 0 : Component.displayName) || (Component === null || Component === void 0 ? void 0 : (_Component$render = Component.render) === null || _Component$render === void 0 ? void 0 : _Component$render.name) || typeof Component === \"string\" && Component || \"ComponentWrapper\";\n    return ComponentWrapper;\n} //# sourceMappingURL=createNativeWrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.filterConfig = filterConfig;\nexports.findNodeHandle = findNodeHandle;\nexports.scheduleFlushOperations = scheduleFlushOperations;\nexports.baseGestureHandlerWithMonitorProps = exports.baseGestureHandlerProps = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nconst commonProps = [\n    \"id\",\n    \"enabled\",\n    \"shouldCancelWhenOutside\",\n    \"hitSlop\",\n    \"cancelsTouchesInView\",\n    \"userSelect\"\n];\nconst componentInteractionProps = [\n    \"waitFor\",\n    \"simultaneousHandlers\"\n];\nconst baseGestureHandlerProps = [\n    ...commonProps,\n    ...componentInteractionProps,\n    \"onBegan\",\n    \"onFailed\",\n    \"onCancelled\",\n    \"onActivated\",\n    \"onEnded\",\n    \"onGestureEvent\",\n    \"onHandlerStateChange\"\n];\nexports.baseGestureHandlerProps = baseGestureHandlerProps;\nconst baseGestureHandlerWithMonitorProps = [\n    ...commonProps,\n    \"needsPointerData\",\n    \"manualActivation\"\n];\nexports.baseGestureHandlerWithMonitorProps = baseGestureHandlerWithMonitorProps;\nfunction isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return param !== undefined && (param !== Object(param) || !(\"__isNative\" in param)) && name !== \"onHandlerStateChange\" && name !== \"onGestureEvent\";\n}\nfunction filterConfig(props, validProps, defaults = {}) {\n    const filteredConfig = {\n        ...defaults\n    };\n    for (const key of validProps){\n        let value = props[key];\n        if (isConfigParam(value, key)) {\n            if (key === \"simultaneousHandlers\" || key === \"waitFor\") {\n                value = transformIntoHandlerTags(props[key]);\n            } else if (key === \"hitSlop\" && typeof value !== \"object\") {\n                value = {\n                    top: value,\n                    left: value,\n                    bottom: value,\n                    right: value\n                };\n            }\n            filteredConfig[key] = value;\n        }\n    }\n    return filteredConfig;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n    handlerIDs = (0, _utils.toArray)(handlerIDs);\n    if (_reactNative.Platform.OS === \"web\") {\n        return handlerIDs.map(({ current })=>current).filter((handle)=>handle);\n    } // converts handler string IDs into their numeric tags\n    return handlerIDs.map((handlerID)=>{\n        var _handlerID$current;\n        return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n    }).filter((handlerTag)=>handlerTag > 0);\n}\nfunction findNodeHandle(node) {\n    if (_reactNative.Platform.OS === \"web\") {\n        return node;\n    }\n    return (0, _reactNative.findNodeHandle)(node);\n}\nlet scheduledFlushOperationsId = null;\nfunction scheduleFlushOperations() {\n    if (scheduledFlushOperationsId === null) {\n        scheduledFlushOperationsId = requestAnimationFrame(()=>{\n            _RNGestureHandlerModule.default.flushOperations();\n            scheduledFlushOperationsId = null;\n        });\n    }\n} //# sourceMappingURL=gestureHandlerCommon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureDetector = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nvar _reanimatedWrapper = __webpack_require__(/*! ./reanimatedWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js\");\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ../gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nvar _gestureStateManager = __webpack_require__(/*! ./gestureStateManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\");\nvar _FlingGestureHandler = __webpack_require__(/*! ../FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\");\nvar _ForceTouchGestureHandler = __webpack_require__(/*! ../ForceTouchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\");\nvar _LongPressGestureHandler = __webpack_require__(/*! ../LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _TouchEventType = __webpack_require__(/*! ../../TouchEventType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\");\nvar _ActionType = __webpack_require__(/*! ../../ActionType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _getShadowNodeFromRef = __webpack_require__(/*! ../../getShadowNodeFromRef */ \"./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js\");\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _eventReceiver = __webpack_require__(/*! ./eventReceiver */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\");\nvar _RNRenderer = __webpack_require__(/*! ../../RNRenderer */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js\");\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ../../EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nvar _Reanimated$default$c, _Reanimated$default;\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst ALLOWED_PROPS = [\n    ..._gestureHandlerCommon.baseGestureHandlerWithMonitorProps,\n    ..._TapGestureHandler.tapGestureHandlerProps,\n    ..._PanGestureHandler.panGestureHandlerProps,\n    ..._PanGestureHandler.panGestureHandlerCustomNativeProps,\n    ..._LongPressGestureHandler.longPressGestureHandlerProps,\n    ..._ForceTouchGestureHandler.forceTouchGestureHandlerProps,\n    ..._FlingGestureHandler.flingGestureHandlerProps\n];\nfunction convertToHandlerTag(ref) {\n    if (typeof ref === \"number\") {\n        return ref;\n    } else if (ref instanceof _gesture.BaseGesture) {\n        return ref.handlerTag;\n    } else {\n        var _ref$current$handlerT, _ref$current;\n        // @ts-ignore in this case it should be a ref either to gesture object or\n        // a gesture handler component, in both cases handlerTag property exists\n        return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n    }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n    var _interactionGroup$map, _interactionGroup$map2;\n    return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter((tag)=>tag > 0)) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n    for (const handler of preparedGesture.config){\n        _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);\n        (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);\n    }\n    (0, _gestureHandlerCommon.scheduleFlushOperations)();\n}\nfunction checkGestureCallbacksForWorklets(gesture) {\n    // if a gesture is explicitly marked to run on the JS thread there is no need to check\n    // if callbacks are worklets as the user is aware they will be ran on the JS thread\n    if (gesture.config.runOnJS) {\n        return;\n    }\n    const areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n    const areSomeWorklets = gesture.handlers.isWorklet.includes(true); // if some of the callbacks are worklets and some are not, and the gesture is not\n    // explicitly marked with `.runOnJS(true)` show an error\n    if (areSomeNotWorklets && areSomeWorklets) {\n        console.error((0, _utils.tagMessage)(`Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`));\n    }\n}\nfunction attachHandlers({ preparedGesture, gestureConfig, gesture, viewTag, webEventHandlersRef, mountedRef }) {\n    if (!preparedGesture.firstExecution) {\n        gestureConfig.initialize();\n    } else {\n        preparedGesture.firstExecution = false;\n    } // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        gestureConfig.prepare();\n    });\n    for (const handler of gesture){\n        checkGestureCallbacksForWorklets(handler);\n        _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n    } // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        for (const handler of gesture){\n            let requireToFail = [];\n            if (handler.config.requireToFail) {\n                requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n            }\n            let simultaneousWith = [];\n            if (handler.config.simultaneousWith) {\n                simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n            }\n            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n                simultaneousHandlers: simultaneousWith,\n                waitFor: requireToFail\n            }));\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n    });\n    preparedGesture.config = gesture;\n    for (const gesture of preparedGesture.config){\n        const actionType = gesture.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;\n        if (_reactNative.Platform.OS === \"web\") {\n            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n        } else {\n            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n        }\n    }\n    if (preparedGesture.animatedHandlers) {\n        const isAnimatedGesture = (g)=>g.shouldUseReanimated;\n        preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map((g)=>g.handlers);\n    }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef) {\n    gestureConfig.prepare();\n    for(let i = 0; i < gesture.length; i++){\n        const handler = preparedGesture.config[i];\n        checkGestureCallbacksForWorklets(handler); // only update handlerTag when it's actually different, it may be the same\n        // if gesture config object is wrapped with useMemo\n        if (gesture[i].handlerTag !== handler.handlerTag) {\n            gesture[i].handlerTag = handler.handlerTag;\n            gesture[i].handlers.handlerTag = handler.handlerTag;\n        }\n    } // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        for(let i = 0; i < gesture.length; i++){\n            const handler = preparedGesture.config[i];\n            handler.config = gesture[i].config;\n            handler.handlers = gesture[i].handlers;\n            const requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n            const simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n                simultaneousHandlers: simultaneousWith,\n                waitFor: requireToFail\n            }));\n            (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n        }\n        if (preparedGesture.animatedHandlers) {\n            var _preparedGesture$anim;\n            const previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];\n            const newHandlersValue = preparedGesture.config.filter((g)=>g.shouldUseReanimated) // ignore gestures that shouldn't run on UI\n            .map((g)=>g.handlers); // if amount of gesture configs changes, we need to update the callbacks in shared value\n            let shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;\n            if (!shouldUpdateSharedValue) {\n                // if the amount is the same, we need to check if any of the configs inside has changed\n                for(let i = 0; i < newHandlersValue.length; i++){\n                    if (newHandlersValue[i].gestureId !== previousHandlersValue[i].gestureId) {\n                        shouldUpdateSharedValue = true;\n                        break;\n                    }\n                }\n            }\n            if (shouldUpdateSharedValue) {\n                preparedGesture.animatedHandlers.value = newHandlersValue;\n            }\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n    });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n    if (gesture.length !== preparedGesture.config.length) {\n        return true;\n    }\n    for(let i = 0; i < gesture.length; i++){\n        if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isStateChangeEvent(event) {\n    \"worklet\"; // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n    \"worklet\";\n    return event.eventType != null;\n}\nfunction getHandler(type, gesture) {\n    \"worklet\";\n    switch(type){\n        case _gesture.CALLBACK_TYPE.BEGAN:\n            return gesture.onBegin;\n        case _gesture.CALLBACK_TYPE.START:\n            return gesture.onStart;\n        case _gesture.CALLBACK_TYPE.UPDATE:\n            return gesture.onUpdate;\n        case _gesture.CALLBACK_TYPE.CHANGE:\n            return gesture.onChange;\n        case _gesture.CALLBACK_TYPE.END:\n            return gesture.onEnd;\n        case _gesture.CALLBACK_TYPE.FINALIZE:\n            return gesture.onFinalize;\n        case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n            return gesture.onTouchesDown;\n        case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n            return gesture.onTouchesMove;\n        case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n            return gesture.onTouchesUp;\n        case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n            return gesture.onTouchesCancelled;\n    }\n}\nfunction touchEventTypeToCallbackType(eventType) {\n    \"worklet\";\n    switch(eventType){\n        case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n            return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n        case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n            return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n        case _TouchEventType.TouchEventType.TOUCHES_UP:\n            return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n        case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n            return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return _gesture.CALLBACK_TYPE.UNDEFINED;\n}\nfunction runWorklet(type, gesture, event, ...args) {\n    \"worklet\";\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n        // @ts-ignore Logic below makes sure the correct event is send to the\n        // correct handler.\n        handler === null || handler === void 0 ? void 0 : handler(event, ...args);\n    } else if (handler) {\n        console.warn((0, _utils.tagMessage)(\"Animated gesture callback must be a worklet\"));\n    }\n}\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n    if (!_reanimatedWrapper.Reanimated) {\n        return;\n    } // Hooks are called conditionally, but the condition is whether the\n    // react-native-reanimated is installed, which shouldn't change while running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null); // eslint-disable-next-line react-hooks/rules-of-hooks\n    const lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]); // not every gesture needs a state controller, init them lazily\n    const stateControllers = [];\n    const callback = (event)=>{\n        \"worklet\";\n        const currentCallback = sharedHandlersCallbacks.value;\n        if (!currentCallback) {\n            return;\n        }\n        for(let i = 0; i < currentCallback.length; i++){\n            const gesture = currentCallback[i];\n            if (event.handlerTag === gesture.handlerTag) {\n                if (isStateChangeEvent(event)) {\n                    if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n                        runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n                    } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n                        runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n                        lastUpdateEvent.value[gesture.handlerTag] = undefined;\n                    } else if (event.oldState !== event.state && event.state === _State.State.END) {\n                        if (event.oldState === _State.State.ACTIVE) {\n                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n                        }\n                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n                    } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n                        if (event.oldState === _State.State.ACTIVE) {\n                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n                        }\n                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n                    }\n                } else if (isTouchEvent(event)) {\n                    if (!stateControllers[i]) {\n                        stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n                    }\n                    if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {\n                        runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n                    }\n                } else {\n                    runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n                    if (gesture.onChange && gesture.changeEventCalculator) {\n                        var _gesture$changeEventC;\n                        runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n                        lastUpdateEvent.value[gesture.handlerTag] = event;\n                    }\n                }\n            }\n        }\n    }; // eslint-disable-next-line react-hooks/rules-of-hooks\n    const event = _reanimatedWrapper.Reanimated.useEvent(callback, [\n        \"onGestureHandlerStateChange\",\n        \"onGestureHandlerEvent\"\n    ], needsRebuild);\n    preparedGesture.animatedEventHandler = event;\n    preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateDetectorChildren(ref) {\n    // finds the first native view under the Wrap component and traverses the fiber tree upwards\n    // to check whether there is more than one native view as a pseudo-direct child of GestureDetector\n    // i.e. this is not ok:\n    //            Wrap\n    //             |\n    //            / \\\n    //           /   \\\n    //          /     \\\n    //         /       \\\n    //   NativeView  NativeView\n    //\n    // but this is fine:\n    //            Wrap\n    //             |\n    //         NativeView\n    //             |\n    //            / \\\n    //           /   \\\n    //          /     \\\n    //         /       \\\n    //   NativeView  NativeView\n    if ( true && _reactNative.Platform.OS !== \"web\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const wrapType = _utils.REACT_NATIVE_VERSION.minor > 63 || _utils.REACT_NATIVE_VERSION.major > 0 ? ref._reactInternals.elementType : ref._reactInternalFiber.elementType; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let instance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        while(instance && instance.elementType !== wrapType){\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (instance.sibling) {\n                throw new Error(\"GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.\");\n            } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n            instance = instance.return;\n        }\n    }\n}\nconst applyUserSelectProp = (userSelect, gesture)=>{\n    for (const g of gesture.toGestureArray()){\n        g.config.userSelect = userSelect;\n    }\n};\nconst GestureDetector = (props)=>{\n    const gestureConfig = props.gesture;\n    if (props.userSelect) {\n        applyUserSelectProp(props.userSelect, gestureConfig);\n    }\n    const gesture = gestureConfig.toGestureArray();\n    const useReanimatedHook = gesture.some((g)=>g.shouldUseReanimated); // store state in ref to prevent unnecessary renders\n    const state = (0, _react.useRef)({\n        firstRender: true,\n        viewRef: null,\n        previousViewTag: -1,\n        forceReattach: false\n    }).current;\n    const mountedRef = (0, _react.useRef)(false);\n    const webEventHandlersRef = (0, _react.useRef)({\n        onGestureHandlerEvent: (e)=>{\n            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);\n        },\n        onGestureHandlerStateChange: (0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)() ? (e)=>{\n            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);\n        } : undefined\n    });\n    const [renderState, setRenderState] = (0, _react.useState)(false);\n    function forceRender() {\n        setRenderState(!renderState);\n    }\n    const preparedGesture = _react.default.useRef({\n        config: gesture,\n        animatedEventHandler: null,\n        animatedHandlers: null,\n        firstExecution: true,\n        useReanimatedHook: useReanimatedHook\n    }).current;\n    if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n        throw new Error((0, _utils.tagMessage)(\"You cannot change the thread the callbacks are ran on while the app is running\"));\n    }\n    function onHandlersUpdate(skipConfigUpdate) {\n        // if the underlying view has changed we need to reattach handlers to the new view\n        const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n        const forceReattach = viewTag !== state.previousViewTag;\n        if (forceReattach || needsToReattach(preparedGesture, gesture)) {\n            validateDetectorChildren(state.viewRef);\n            dropHandlers(preparedGesture);\n            attachHandlers({\n                preparedGesture,\n                gestureConfig,\n                gesture,\n                webEventHandlersRef,\n                viewTag,\n                mountedRef\n            });\n            state.previousViewTag = viewTag;\n            state.forceReattach = forceReattach;\n            if (forceReattach) {\n                forceRender();\n            }\n        } else if (!skipConfigUpdate) {\n            updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);\n        }\n    } // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n    // config update will be enough as all necessary items are stored in shared values anyway\n    const needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture) || state.forceReattach;\n    state.forceReattach = false;\n    if (preparedGesture.firstExecution) {\n        gestureConfig.initialize();\n    }\n    if (useReanimatedHook) {\n        // Whether animatedGesture or gesture is used shouldn't change while the app is running\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n    }\n    (0, _react.useEffect)(()=>{\n        const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n        state.firstRender = true;\n        mountedRef.current = true;\n        validateDetectorChildren(state.viewRef);\n        attachHandlers({\n            preparedGesture,\n            gestureConfig,\n            gesture,\n            webEventHandlersRef,\n            viewTag,\n            mountedRef\n        });\n        return ()=>{\n            mountedRef.current = false;\n            dropHandlers(preparedGesture);\n        };\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (!state.firstRender) {\n            onHandlersUpdate();\n        } else {\n            state.firstRender = false;\n        }\n    }, [\n        props\n    ]);\n    const refFunction = (ref)=>{\n        if (ref !== null) {\n            // @ts-ignore Just setting the view ref\n            state.viewRef = ref; // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n            if (state.previousViewTag === -1) {\n                state.previousViewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n            } // pass true as `skipConfigUpdate`, here we only want to trigger the eventual reattaching of handlers\n            // in case the view has changed, while config update would be handled be the `useEffect` above\n            onHandlersUpdate(true);\n            if ((0, _utils.isFabric)()) {\n                const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n                if (global.isFormsStackingContext(node) === false) {\n                    console.error((0, _utils.tagMessage)(\"GestureDetector has received a child that may get view-flattened. \" + \"\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.\"));\n                }\n            }\n        }\n    };\n    if (useReanimatedHook) {\n        return /*#__PURE__*/ _react.default.createElement(AnimatedWrap, {\n            ref: refFunction,\n            onGestureHandlerEvent: preparedGesture.animatedEventHandler\n        }, props.children);\n    } else {\n        return /*#__PURE__*/ _react.default.createElement(Wrap, {\n            ref: refFunction\n        }, props.children);\n    }\n};\nexports.GestureDetector = GestureDetector;\nclass Wrap extends _react.default.Component {\n    render() {\n        try {\n            // I don't think that fighting with types over such a simple function is worth it\n            // The only thing it does is add 'collapsable: false' to the child component\n            // to make sure it is in the native view hierarchy so the detector can find\n            // correct viewTag to attach to.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const child = _react.default.Children.only(this.props.children);\n            return /*#__PURE__*/ _react.default.cloneElement(child, {\n                collapsable: false\n            }, child.props.children);\n        } catch (e) {\n            throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n        }\n    }\n}\nconst AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap; //# sourceMappingURL=GestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.onGestureHandlerEvent = onGestureHandlerEvent;\nexports.startListening = startListening;\nexports.stopListening = stopListening;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _TouchEventType = __webpack_require__(/*! ../../TouchEventType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\");\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _gestureStateManager = __webpack_require__(/*! ./gestureStateManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\");\nlet gestureHandlerEventSubscription = null;\nlet gestureHandlerStateChangeEventSubscription = null;\nconst gestureStateManagers = new Map();\nconst lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n    // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n    return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n    return event.eventType != null;\n}\nfunction onGestureHandlerEvent(event) {\n    var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n    const handler = (0, _handlersRegistry.findHandler)(event.handlerTag);\n    if (handler) {\n        if (isStateChangeEvent(event)) {\n            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n                var _handler$handlers$onB, _handler$handlers;\n                (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n                var _handler$handlers$onS, _handler$handlers2;\n                (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n                lastUpdateEvent[handler.handlers.handlerTag] = event;\n            } else if (event.oldState !== event.state && event.state === _State.State.END) {\n                var _handler$handlers$onF, _handler$handlers4;\n                if (event.oldState === _State.State.ACTIVE) {\n                    var _handler$handlers$onE, _handler$handlers3;\n                    (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n                }\n                (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n                lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.oldState !== event.state) {\n                var _handler$handlers$onF2, _handler$handlers6;\n                if (event.oldState === _State.State.ACTIVE) {\n                    var _handler$handlers$onE2, _handler$handlers5;\n                    (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n                }\n                (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n                gestureStateManagers.delete(event.handlerTag);\n                lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n            }\n        } else if (isTouchEvent(event)) {\n            if (!gestureStateManagers.has(event.handlerTag)) {\n                gestureStateManagers.set(event.handlerTag, _gestureStateManager.GestureStateManager.create(event.handlerTag));\n            } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const manager = gestureStateManagers.get(event.handlerTag);\n            switch(event.eventType){\n                case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n                    (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n                    (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_UP:\n                    (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n                    (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n                    break;\n            }\n        } else {\n            var _handler$handlers$onU, _handler$handlers11;\n            (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n            if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n                var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n                (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n                lastUpdateEvent[handler.handlers.handlerTag] = event;\n            }\n        }\n    } else {\n        const oldHandler = (0, _handlersRegistry.findOldGestureHandler)(event.handlerTag);\n        if (oldHandler) {\n            const nativeEvent = {\n                nativeEvent: event\n            };\n            if (isStateChangeEvent(event)) {\n                oldHandler.onGestureStateChange(nativeEvent);\n            } else {\n                oldHandler.onGestureEvent(nativeEvent);\n            }\n            return;\n        }\n    }\n}\nfunction startListening() {\n    stopListening();\n    gestureHandlerEventSubscription = _reactNative.DeviceEventEmitter.addListener(\"onGestureHandlerEvent\", onGestureHandlerEvent);\n    gestureHandlerStateChangeEventSubscription = _reactNative.DeviceEventEmitter.addListener(\"onGestureHandlerStateChange\", onGestureHandlerEvent);\n}\nfunction stopListening() {\n    if (gestureHandlerEventSubscription) {\n        gestureHandlerEventSubscription.remove();\n        gestureHandlerEventSubscription = null;\n    }\n    if (gestureHandlerStateChangeEventSubscription) {\n        gestureHandlerStateChangeEventSubscription.remove();\n        gestureHandlerStateChangeEventSubscription = null;\n    }\n} //# sourceMappingURL=eventReceiver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlingGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass FlingGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"FlingGestureHandler\";\n    }\n    numberOfPointers(pointers) {\n        this.config.numberOfPointers = pointers;\n        return this;\n    }\n    direction(direction) {\n        this.config.direction = direction;\n        return this;\n    }\n}\nexports.FlingGesture = FlingGesture; //# sourceMappingURL=flingGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZmxpbmdHZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxvQkFBb0IsR0FBRyxLQUFLO0FBRTVCLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUVOLEtBQUs7SUFBSSxJQUFJTSxPQUFPRCxLQUFLO1FBQUVSLE9BQU9DLGNBQWMsQ0FBQ08sS0FBS0MsS0FBSztZQUFFTixPQUFPQTtZQUFPTyxZQUFZO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFSixHQUFHLENBQUNDLElBQUksR0FBR047SUFBTztJQUFFLE9BQU9LO0FBQUs7QUFFaE4sTUFBTUoscUJBQXFCQyxTQUFTUSxXQUFXO0lBQzdDQyxhQUFjO1FBQ1osS0FBSztRQUVMUCxnQkFBZ0IsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUVqQyxJQUFJLENBQUNRLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxpQkFBaUJDLFFBQVEsRUFBRTtRQUN6QixJQUFJLENBQUNDLE1BQU0sQ0FBQ0YsZ0JBQWdCLEdBQUdDO1FBQy9CLE9BQU8sSUFBSTtJQUNiO0lBRUFFLFVBQVVBLFNBQVMsRUFBRTtRQUNuQixJQUFJLENBQUNELE1BQU0sQ0FBQ0MsU0FBUyxHQUFHQTtRQUN4QixPQUFPLElBQUk7SUFDYjtBQUVGO0FBRUFqQixvQkFBb0IsR0FBR0UsY0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL2ZsaW5nR2VzdHVyZS5qcz81N2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GbGluZ0dlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmNsYXNzIEZsaW5nR2VzdHVyZSBleHRlbmRzIF9nZXN0dXJlLkJhc2VHZXN0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmZpZ1wiLCB7fSk7XG5cbiAgICB0aGlzLmhhbmRsZXJOYW1lID0gJ0ZsaW5nR2VzdHVyZUhhbmRsZXInO1xuICB9XG5cbiAgbnVtYmVyT2ZQb2ludGVycyhwb2ludGVycykge1xuICAgIHRoaXMuY29uZmlnLm51bWJlck9mUG9pbnRlcnMgPSBwb2ludGVycztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICB0aGlzLmNvbmZpZy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG5leHBvcnRzLkZsaW5nR2VzdHVyZSA9IEZsaW5nR2VzdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZsaW5nR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGbGluZ0dlc3R1cmUiLCJfZ2VzdHVyZSIsInJlcXVpcmUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJCYXNlR2VzdHVyZSIsImNvbnN0cnVjdG9yIiwiaGFuZGxlck5hbWUiLCJudW1iZXJPZlBvaW50ZXJzIiwicG9pbnRlcnMiLCJjb25maWciLCJkaXJlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ForceTouchGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            forceChange: current.force\n        };\n    } else {\n        changePayload = {\n            forceChange: current.force - previous.force\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass ForceTouchGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"ForceTouchGestureHandler\";\n    }\n    minForce(force) {\n        this.config.minForce = force;\n        return this;\n    }\n    maxForce(force) {\n        this.config.maxForce = force;\n        return this;\n    }\n    feedbackOnActivation(value) {\n        this.config.feedbackOnActivation = value;\n        return this;\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.ForceTouchGesture = ForceTouchGesture; //# sourceMappingURL=forceTouchGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZm9yY2VUb3VjaEdlc3R1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHLEtBQUs7QUFFakMsSUFBSUcsV0FBV0MsbUJBQU9BLENBQUMsd0dBQVc7QUFFbEMsU0FBU0MsZ0JBQWdCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRU4sS0FBSztJQUFJLElBQUlNLE9BQU9ELEtBQUs7UUFBRVIsT0FBT0MsY0FBYyxDQUFDTyxLQUFLQyxLQUFLO1lBQUVOLE9BQU9BO1lBQU9PLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHTjtJQUFPO0lBQUUsT0FBT0s7QUFBSztBQUVoTixTQUFTSyxzQkFBc0JDLE9BQU8sRUFBRUMsUUFBUTtJQUM5QztJQUVBLElBQUlDO0lBRUosSUFBSUQsYUFBYUUsV0FBVztRQUMxQkQsZ0JBQWdCO1lBQ2RFLGFBQWFKLFFBQVFLLEtBQUs7UUFDNUI7SUFDRixPQUFPO1FBQ0xILGdCQUFnQjtZQUNkRSxhQUFhSixRQUFRSyxLQUFLLEdBQUdKLFNBQVNJLEtBQUs7UUFDN0M7SUFDRjtJQUVBLE9BQU87UUFBRSxHQUFHTCxPQUFPO1FBQ2pCLEdBQUdFLGFBQWE7SUFDbEI7QUFDRjtBQUVBLE1BQU1aLDBCQUEwQkMsU0FBU2Usb0JBQW9CO0lBQzNEQyxhQUFjO1FBQ1osS0FBSztRQUVMZCxnQkFBZ0IsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUVqQyxJQUFJLENBQUNlLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxTQUFTSixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLE1BQU0sQ0FBQ0QsUUFBUSxHQUFHSjtRQUN2QixPQUFPLElBQUk7SUFDYjtJQUVBTSxTQUFTTixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHTjtRQUN2QixPQUFPLElBQUk7SUFDYjtJQUVBTyxxQkFBcUJ2QixLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDcUIsTUFBTSxDQUFDRSxvQkFBb0IsR0FBR3ZCO1FBQ25DLE9BQU8sSUFBSTtJQUNiO0lBRUF3QixTQUFTQyxRQUFRLEVBQUU7UUFDakIscUZBQXFGO1FBQ3JGLElBQUksQ0FBQ0MsUUFBUSxDQUFDaEIscUJBQXFCLEdBQUdBO1FBQ3RDLE9BQU8sS0FBSyxDQUFDYyxTQUFTQztJQUN4QjtBQUVGO0FBRUExQix5QkFBeUIsR0FBR0UsbUJBQzVCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9mb3JjZVRvdWNoR2VzdHVyZS5qcz8wYzM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Gb3JjZVRvdWNoR2VzdHVyZSA9IHZvaWQgMDtcblxudmFyIF9nZXN0dXJlID0gcmVxdWlyZShcIi4vZ2VzdHVyZVwiKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gY2hhbmdlRXZlbnRDYWxjdWxhdG9yKGN1cnJlbnQsIHByZXZpb3VzKSB7XG4gICd3b3JrbGV0JztcblxuICBsZXQgY2hhbmdlUGF5bG9hZDtcblxuICBpZiAocHJldmlvdXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNoYW5nZVBheWxvYWQgPSB7XG4gICAgICBmb3JjZUNoYW5nZTogY3VycmVudC5mb3JjZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY2hhbmdlUGF5bG9hZCA9IHtcbiAgICAgIGZvcmNlQ2hhbmdlOiBjdXJyZW50LmZvcmNlIC0gcHJldmlvdXMuZm9yY2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgLi4uY3VycmVudCxcbiAgICAuLi5jaGFuZ2VQYXlsb2FkXG4gIH07XG59XG5cbmNsYXNzIEZvcmNlVG91Y2hHZXN0dXJlIGV4dGVuZHMgX2dlc3R1cmUuQ29udGlub3VzQmFzZUdlc3R1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29uZmlnXCIsIHt9KTtcblxuICAgIHRoaXMuaGFuZGxlck5hbWUgPSAnRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIG1pbkZvcmNlKGZvcmNlKSB7XG4gICAgdGhpcy5jb25maWcubWluRm9yY2UgPSBmb3JjZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1heEZvcmNlKGZvcmNlKSB7XG4gICAgdGhpcy5jb25maWcubWF4Rm9yY2UgPSBmb3JjZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZlZWRiYWNrT25BY3RpdmF0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcuZmVlZGJhY2tPbkFjdGl2YXRpb24gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBUUyBiZWluZyBvdmVycHJvdGVjdGl2ZSwgRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyRXZlbnRQYXlsb2FkIGlzIFJlY29yZFxuICAgIHRoaXMuaGFuZGxlcnMuY2hhbmdlRXZlbnRDYWxjdWxhdG9yID0gY2hhbmdlRXZlbnRDYWxjdWxhdG9yO1xuICAgIHJldHVybiBzdXBlci5vbkNoYW5nZShjYWxsYmFjayk7XG4gIH1cblxufVxuXG5leHBvcnRzLkZvcmNlVG91Y2hHZXN0dXJlID0gRm9yY2VUb3VjaEdlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JjZVRvdWNoR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGb3JjZVRvdWNoR2VzdHVyZSIsIl9nZXN0dXJlIiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImNoYW5nZUV2ZW50Q2FsY3VsYXRvciIsImN1cnJlbnQiLCJwcmV2aW91cyIsImNoYW5nZVBheWxvYWQiLCJ1bmRlZmluZWQiLCJmb3JjZUNoYW5nZSIsImZvcmNlIiwiQ29udGlub3VzQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwibWluRm9yY2UiLCJjb25maWciLCJtYXhGb3JjZSIsImZlZWRiYWNrT25BY3RpdmF0aW9uIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImhhbmRsZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ContinousBaseGesture = exports.BaseGesture = exports.Gesture = exports.CALLBACK_TYPE = void 0;\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst CALLBACK_TYPE = {\n    UNDEFINED: 0,\n    BEGAN: 1,\n    START: 2,\n    UPDATE: 3,\n    CHANGE: 4,\n    END: 5,\n    FINALIZE: 6,\n    TOUCHES_DOWN: 7,\n    TOUCHES_MOVE: 8,\n    TOUCHES_UP: 9,\n    TOUCHES_CANCELLED: 10\n}; // Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexports.CALLBACK_TYPE = CALLBACK_TYPE;\nclass Gesture {\n}\nexports.Gesture = Gesture;\nlet nextGestureId = 0;\nclass BaseGesture extends Gesture {\n    constructor(){\n        super(); // Used to check whether the gesture config has been updated when wrapping it\n        // with `useMemo`. Since every config will have a unique id, when the dependencies\n        // don't change, the config won't be recreated and the id will stay the same.\n        // If the id is different, it means that the config has changed and the gesture\n        // needs to be updated.\n        _defineProperty(this, \"gestureId\", -1);\n        _defineProperty(this, \"handlerTag\", -1);\n        _defineProperty(this, \"handlerName\", \"\");\n        _defineProperty(this, \"config\", {});\n        _defineProperty(this, \"handlers\", {\n            gestureId: -1,\n            handlerTag: -1,\n            isWorklet: []\n        });\n        this.gestureId = nextGestureId++;\n        this.handlers.gestureId = this.gestureId;\n    }\n    addDependency(key, gesture) {\n        const value = this.config[key];\n        this.config[key] = value ? Array().concat(value, gesture) : [\n            gesture\n        ];\n    }\n    withRef(ref) {\n        this.config.ref = ref;\n        return this;\n    }\n    isWorklet(callback) {\n        //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        return callback.__workletHash !== undefined;\n    }\n    onBegin(callback) {\n        this.handlers.onBegin = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n        return this;\n    }\n    onStart(callback) {\n        this.handlers.onStart = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n        return this;\n    }\n    onEnd(callback) {\n        this.handlers.onEnd = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n        return this;\n    }\n    onFinalize(callback) {\n        this.handlers.onFinalize = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesDown(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesDown = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesMove(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesMove = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesUp(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesUp = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesCancelled(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesCancelled = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n        return this;\n    }\n    enabled(enabled) {\n        this.config.enabled = enabled;\n        return this;\n    }\n    shouldCancelWhenOutside(value) {\n        this.config.shouldCancelWhenOutside = value;\n        return this;\n    }\n    hitSlop(hitSlop) {\n        this.config.hitSlop = hitSlop;\n        return this;\n    }\n    runOnJS(runOnJS) {\n        this.config.runOnJS = runOnJS;\n        return this;\n    }\n    simultaneousWithExternalGesture(...gestures) {\n        for (const gesture of gestures){\n            this.addDependency(\"simultaneousWith\", gesture);\n        }\n        return this;\n    }\n    requireExternalGestureToFail(...gestures) {\n        for (const gesture of gestures){\n            this.addDependency(\"requireToFail\", gesture);\n        }\n        return this;\n    }\n    withTestId(id) {\n        this.config.testId = id;\n        return this;\n    }\n    cancelsTouchesInView(value) {\n        this.config.cancelsTouchesInView = value;\n        return this;\n    }\n    initialize() {\n        this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n        this.handlers = {\n            ...this.handlers,\n            handlerTag: this.handlerTag\n        };\n        if (this.config.ref) {\n            this.config.ref.current = this;\n        }\n    }\n    toGestureArray() {\n        return [\n            this\n        ];\n    }\n    prepare() {}\n    get shouldUseReanimated() {\n        // use Reanimated when runOnJS isn't set explicitly,\n        // and all defined callbacks are worklets,\n        // and remote debugging is disabled\n        return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();\n    }\n}\nexports.BaseGesture = BaseGesture;\nclass ContinousBaseGesture extends BaseGesture {\n    onUpdate(callback) {\n        this.handlers.onUpdate = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n        return this;\n    }\n    onChange(callback) {\n        this.handlers.onChange = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n        return this;\n    }\n    manualActivation(manualActivation) {\n        this.config.manualActivation = manualActivation;\n        return this;\n    }\n}\nexports.ContinousBaseGesture = ContinousBaseGesture; //# sourceMappingURL=gesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExclusiveGesture = exports.SimultaneousGesture = exports.ComposedGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction extendRelation(currentRelation, extendWith) {\n    if (currentRelation === undefined) {\n        return [\n            ...extendWith\n        ];\n    } else {\n        return [\n            ...currentRelation,\n            ...extendWith\n        ];\n    }\n}\nclass ComposedGesture extends _gesture.Gesture {\n    constructor(...gestures){\n        super();\n        _defineProperty(this, \"gestures\", []);\n        _defineProperty(this, \"simultaneousGestures\", []);\n        _defineProperty(this, \"requireGesturesToFail\", []);\n        this.gestures = gestures;\n    }\n    prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {\n        if (gesture instanceof _gesture.BaseGesture) {\n            const newConfig = {\n                ...gesture.config\n            };\n            newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);\n            newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);\n            gesture.config = newConfig;\n        } else if (gesture instanceof ComposedGesture) {\n            gesture.simultaneousGestures = simultaneousGestures;\n            gesture.requireGesturesToFail = requireGesturesToFail;\n            gesture.prepare();\n        }\n    }\n    prepare() {\n        for (const gesture of this.gestures){\n            this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);\n        }\n    }\n    initialize() {\n        for (const gesture of this.gestures){\n            gesture.initialize();\n        }\n    }\n    toGestureArray() {\n        return this.gestures.flatMap((gesture)=>gesture.toGestureArray());\n    }\n}\nexports.ComposedGesture = ComposedGesture;\nclass SimultaneousGesture extends ComposedGesture {\n    prepare() {\n        // this piece of magic works something like this:\n        // for every gesture in the array\n        const simultaneousArrays = this.gestures.map((gesture)=>this.gestures // and make a copy without it\n            .filter((x)=>x !== gesture) // then we flatmap the result to get list of raw (not composed) gestures\n            // this way we don't make the gestures simultaneous with themselves, which is\n            // important when the gesture is `ExclusiveGesture` - we don't want to make\n            // exclusive gestures simultaneous\n            .flatMap((x)=>x.toGestureArray()));\n        for(let i = 0; i < this.gestures.length; i++){\n            this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);\n        }\n    }\n}\nexports.SimultaneousGesture = SimultaneousGesture;\nclass ExclusiveGesture extends ComposedGesture {\n    prepare() {\n        // transforms the array of gestures into array of grouped raw (not composed) gestures\n        // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n        const gestureArrays = this.gestures.map((gesture)=>gesture.toGestureArray());\n        let requireToFail = [];\n        for(let i = 0; i < this.gestures.length; i++){\n            this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail)); // every group gets to wait for all groups before it\n            requireToFail = requireToFail.concat(gestureArrays[i]);\n        }\n    }\n}\nexports.ExclusiveGesture = ExclusiveGesture; //# sourceMappingURL=gestureComposition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureObjects = void 0;\nvar _flingGesture = __webpack_require__(/*! ./flingGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js\");\nvar _forceTouchGesture = __webpack_require__(/*! ./forceTouchGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js\");\nvar _gestureComposition = __webpack_require__(/*! ./gestureComposition */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js\");\nvar _longPressGesture = __webpack_require__(/*! ./longPressGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js\");\nvar _panGesture = __webpack_require__(/*! ./panGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js\");\nvar _pinchGesture = __webpack_require__(/*! ./pinchGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js\");\nvar _rotationGesture = __webpack_require__(/*! ./rotationGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js\");\nvar _tapGesture = __webpack_require__(/*! ./tapGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js\");\nvar _nativeGesture = __webpack_require__(/*! ./nativeGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js\");\nvar _manualGesture = __webpack_require__(/*! ./manualGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js\");\nconst GestureObjects = {\n    Tap: ()=>{\n        return new _tapGesture.TapGesture();\n    },\n    Pan: ()=>{\n        return new _panGesture.PanGesture();\n    },\n    Pinch: ()=>{\n        return new _pinchGesture.PinchGesture();\n    },\n    Rotation: ()=>{\n        return new _rotationGesture.RotationGesture();\n    },\n    Fling: ()=>{\n        return new _flingGesture.FlingGesture();\n    },\n    LongPress: ()=>{\n        return new _longPressGesture.LongPressGesture();\n    },\n    ForceTouch: ()=>{\n        return new _forceTouchGesture.ForceTouchGesture();\n    },\n    Native: ()=>{\n        return new _nativeGesture.NativeGesture();\n    },\n    Manual: ()=>{\n        return new _manualGesture.ManualGesture();\n    },\n    /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */ Race: (...gestures)=>{\n        return new _gestureComposition.ComposedGesture(...gestures);\n    },\n    /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */ Simultaneous (...gestures) {\n        return new _gestureComposition.SimultaneousGesture(...gestures);\n    },\n    /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */ Exclusive (...gestures) {\n        return new _gestureComposition.ExclusiveGesture(...gestures);\n    }\n};\nexports.GestureObjects = GestureObjects; //# sourceMappingURL=gestureObjects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZ2VzdHVyZU9iamVjdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHNCQUFzQixHQUFHLEtBQUs7QUFFOUIsSUFBSUcsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxrSEFBZ0I7QUFFNUMsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQyw0SEFBcUI7QUFFdEQsSUFBSUUsc0JBQXNCRixtQkFBT0EsQ0FBQyw4SEFBc0I7QUFFeEQsSUFBSUcsb0JBQW9CSCxtQkFBT0EsQ0FBQywwSEFBb0I7QUFFcEQsSUFBSUksY0FBY0osbUJBQU9BLENBQUMsOEdBQWM7QUFFeEMsSUFBSUssZ0JBQWdCTCxtQkFBT0EsQ0FBQyxrSEFBZ0I7QUFFNUMsSUFBSU0sbUJBQW1CTixtQkFBT0EsQ0FBQyx3SEFBbUI7QUFFbEQsSUFBSU8sY0FBY1AsbUJBQU9BLENBQUMsOEdBQWM7QUFFeEMsSUFBSVEsaUJBQWlCUixtQkFBT0EsQ0FBQyxvSEFBaUI7QUFFOUMsSUFBSVMsaUJBQWlCVCxtQkFBT0EsQ0FBQyxvSEFBaUI7QUFFOUMsTUFBTUYsaUJBQWlCO0lBQ3JCWSxLQUFLO1FBQ0gsT0FBTyxJQUFJSCxZQUFZSSxVQUFVO0lBQ25DO0lBQ0FDLEtBQUs7UUFDSCxPQUFPLElBQUlSLFlBQVlTLFVBQVU7SUFDbkM7SUFDQUMsT0FBTztRQUNMLE9BQU8sSUFBSVQsY0FBY1UsWUFBWTtJQUN2QztJQUNBQyxVQUFVO1FBQ1IsT0FBTyxJQUFJVixpQkFBaUJXLGVBQWU7SUFDN0M7SUFDQUMsT0FBTztRQUNMLE9BQU8sSUFBSW5CLGNBQWNvQixZQUFZO0lBQ3ZDO0lBQ0FDLFdBQVc7UUFDVCxPQUFPLElBQUlqQixrQkFBa0JrQixnQkFBZ0I7SUFDL0M7SUFDQUMsWUFBWTtRQUNWLE9BQU8sSUFBSXJCLG1CQUFtQnNCLGlCQUFpQjtJQUNqRDtJQUNBQyxRQUFRO1FBQ04sT0FBTyxJQUFJaEIsZUFBZWlCLGFBQWE7SUFDekM7SUFDQUMsUUFBUTtRQUNOLE9BQU8sSUFBSWpCLGVBQWVrQixhQUFhO0lBQ3pDO0lBRUE7OztHQUdDLEdBQ0RDLE1BQU0sQ0FBQyxHQUFHQztRQUNSLE9BQU8sSUFBSTNCLG9CQUFvQjRCLGVBQWUsSUFBSUQ7SUFDcEQ7SUFFQTs7R0FFQyxHQUNERSxjQUFhLEdBQUdGLFFBQVE7UUFDdEIsT0FBTyxJQUFJM0Isb0JBQW9COEIsbUJBQW1CLElBQUlIO0lBQ3hEO0lBRUE7Ozs7OztHQU1DLEdBQ0RJLFdBQVUsR0FBR0osUUFBUTtRQUNuQixPQUFPLElBQUkzQixvQkFBb0JnQyxnQkFBZ0IsSUFBSUw7SUFDckQ7QUFFRjtBQUNBakMsc0JBQXNCLEdBQUdFLGdCQUN6QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZ2VzdHVyZU9iamVjdHMuanM/NzcyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR2VzdHVyZU9iamVjdHMgPSB2b2lkIDA7XG5cbnZhciBfZmxpbmdHZXN0dXJlID0gcmVxdWlyZShcIi4vZmxpbmdHZXN0dXJlXCIpO1xuXG52YXIgX2ZvcmNlVG91Y2hHZXN0dXJlID0gcmVxdWlyZShcIi4vZm9yY2VUb3VjaEdlc3R1cmVcIik7XG5cbnZhciBfZ2VzdHVyZUNvbXBvc2l0aW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUNvbXBvc2l0aW9uXCIpO1xuXG52YXIgX2xvbmdQcmVzc0dlc3R1cmUgPSByZXF1aXJlKFwiLi9sb25nUHJlc3NHZXN0dXJlXCIpO1xuXG52YXIgX3Bhbkdlc3R1cmUgPSByZXF1aXJlKFwiLi9wYW5HZXN0dXJlXCIpO1xuXG52YXIgX3BpbmNoR2VzdHVyZSA9IHJlcXVpcmUoXCIuL3BpbmNoR2VzdHVyZVwiKTtcblxudmFyIF9yb3RhdGlvbkdlc3R1cmUgPSByZXF1aXJlKFwiLi9yb3RhdGlvbkdlc3R1cmVcIik7XG5cbnZhciBfdGFwR2VzdHVyZSA9IHJlcXVpcmUoXCIuL3RhcEdlc3R1cmVcIik7XG5cbnZhciBfbmF0aXZlR2VzdHVyZSA9IHJlcXVpcmUoXCIuL25hdGl2ZUdlc3R1cmVcIik7XG5cbnZhciBfbWFudWFsR2VzdHVyZSA9IHJlcXVpcmUoXCIuL21hbnVhbEdlc3R1cmVcIik7XG5cbmNvbnN0IEdlc3R1cmVPYmplY3RzID0ge1xuICBUYXA6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IF90YXBHZXN0dXJlLlRhcEdlc3R1cmUoKTtcbiAgfSxcbiAgUGFuOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfcGFuR2VzdHVyZS5QYW5HZXN0dXJlKCk7XG4gIH0sXG4gIFBpbmNoOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfcGluY2hHZXN0dXJlLlBpbmNoR2VzdHVyZSgpO1xuICB9LFxuICBSb3RhdGlvbjogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX3JvdGF0aW9uR2VzdHVyZS5Sb3RhdGlvbkdlc3R1cmUoKTtcbiAgfSxcbiAgRmxpbmc6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IF9mbGluZ0dlc3R1cmUuRmxpbmdHZXN0dXJlKCk7XG4gIH0sXG4gIExvbmdQcmVzczogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX2xvbmdQcmVzc0dlc3R1cmUuTG9uZ1ByZXNzR2VzdHVyZSgpO1xuICB9LFxuICBGb3JjZVRvdWNoOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfZm9yY2VUb3VjaEdlc3R1cmUuRm9yY2VUb3VjaEdlc3R1cmUoKTtcbiAgfSxcbiAgTmF0aXZlOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfbmF0aXZlR2VzdHVyZS5OYXRpdmVHZXN0dXJlKCk7XG4gIH0sXG4gIE1hbnVhbDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX21hbnVhbEdlc3R1cmUuTWFudWFsR2VzdHVyZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wb3NlZCBnZXN0dXJlIGNvbnNpc3Rpbmcgb2YgZ2VzdHVyZXMgcHJvdmlkZWQgYXMgcGFyYW1ldGVycy5cbiAgICogVGhlIGZpcnN0IG9uZSB0aGF0IGJlY29tZXMgYWN0aXZlIGNhbmNlbHMgdGhlIHJlc3Qgb2YgZ2VzdHVyZXMuXG4gICAqL1xuICBSYWNlOiAoLi4uZ2VzdHVyZXMpID0+IHtcbiAgICByZXR1cm4gbmV3IF9nZXN0dXJlQ29tcG9zaXRpb24uQ29tcG9zZWRHZXN0dXJlKC4uLmdlc3R1cmVzKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGRzIGEgY29tcG9zZWQgZ2VzdHVyZSB0aGF0IGFsbG93cyBhbGwgYmFzZSBnZXN0dXJlcyB0byBydW4gc2ltdWx0YW5lb3VzbHkuXG4gICAqL1xuICBTaW11bHRhbmVvdXMoLi4uZ2VzdHVyZXMpIHtcbiAgICByZXR1cm4gbmV3IF9nZXN0dXJlQ29tcG9zaXRpb24uU2ltdWx0YW5lb3VzR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBvc2VkIGdlc3R1cmUgd2hlcmUgb25seSBvbmUgb2YgdGhlIHByb3ZpZGVkIGdlc3R1cmVzIGNhbiBiZWNvbWUgYWN0aXZlLlxuICAgKiBQcmlvcml0eSBpcyBkZWNpZGVkIHRocm91Z2ggdGhlIG9yZGVyIG9mIGdlc3R1cmVzOiB0aGUgZmlyc3Qgb25lIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICogdGhhbiB0aGUgc2Vjb25kIG9uZSwgc2Vjb25kIG9uZSBoYXMgaGlnaGVyIHByaW9yaXR5IHRoYW4gdGhlIHRoaXJkIG9uZSwgYW5kIHNvIG9uLlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gbWFrZSBhIGdlc3R1cmUgdGhhdCByZWNvZ25pemVzIGJvdGggc2luZ2xlIGFuZCBkb3VibGUgdGFwIHlvdSBuZWVkXG4gICAqIHRvIGNhbGwgRXhjbHVzaXZlKGRvdWJsZVRhcCwgc2luZ2xlVGFwKS5cbiAgICovXG4gIEV4Y2x1c2l2ZSguLi5nZXN0dXJlcykge1xuICAgIHJldHVybiBuZXcgX2dlc3R1cmVDb21wb3NpdGlvbi5FeGNsdXNpdmVHZXN0dXJlKC4uLmdlc3R1cmVzKTtcbiAgfVxuXG59O1xuZXhwb3J0cy5HZXN0dXJlT2JqZWN0cyA9IEdlc3R1cmVPYmplY3RzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VzdHVyZU9iamVjdHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiR2VzdHVyZU9iamVjdHMiLCJfZmxpbmdHZXN0dXJlIiwicmVxdWlyZSIsIl9mb3JjZVRvdWNoR2VzdHVyZSIsIl9nZXN0dXJlQ29tcG9zaXRpb24iLCJfbG9uZ1ByZXNzR2VzdHVyZSIsIl9wYW5HZXN0dXJlIiwiX3BpbmNoR2VzdHVyZSIsIl9yb3RhdGlvbkdlc3R1cmUiLCJfdGFwR2VzdHVyZSIsIl9uYXRpdmVHZXN0dXJlIiwiX21hbnVhbEdlc3R1cmUiLCJUYXAiLCJUYXBHZXN0dXJlIiwiUGFuIiwiUGFuR2VzdHVyZSIsIlBpbmNoIiwiUGluY2hHZXN0dXJlIiwiUm90YXRpb24iLCJSb3RhdGlvbkdlc3R1cmUiLCJGbGluZyIsIkZsaW5nR2VzdHVyZSIsIkxvbmdQcmVzcyIsIkxvbmdQcmVzc0dlc3R1cmUiLCJGb3JjZVRvdWNoIiwiRm9yY2VUb3VjaEdlc3R1cmUiLCJOYXRpdmUiLCJOYXRpdmVHZXN0dXJlIiwiTWFudWFsIiwiTWFudWFsR2VzdHVyZSIsIlJhY2UiLCJnZXN0dXJlcyIsIkNvbXBvc2VkR2VzdHVyZSIsIlNpbXVsdGFuZW91cyIsIlNpbXVsdGFuZW91c0dlc3R1cmUiLCJFeGNsdXNpdmUiLCJFeGNsdXNpdmVHZXN0dXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureStateManager = void 0;\nvar _NodeManager = _interopRequireDefault(__webpack_require__(/*! ../../web/tools/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst GestureStateManager = {\n    create (handlerTag) {\n        return {\n            begin: ()=>{\n                _NodeManager.default.getHandler(handlerTag).begin();\n            },\n            activate: ()=>{\n                _NodeManager.default.getHandler(handlerTag).activate();\n            },\n            fail: ()=>{\n                _NodeManager.default.getHandler(handlerTag).fail();\n            },\n            end: ()=>{\n                _NodeManager.default.getHandler(handlerTag).end();\n            }\n        };\n    }\n};\nexports.GestureStateManager = GestureStateManager; //# sourceMappingURL=gestureStateManager.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZ2VzdHVyZVN0YXRlTWFuYWdlci53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDJCQUEyQixHQUFHLEtBQUs7QUFFbkMsSUFBSUcsZUFBZUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzSEFBNkI7QUFFL0UsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNSixzQkFBc0I7SUFDMUJPLFFBQU9DLFVBQVU7UUFDZixPQUFPO1lBQ0xDLE9BQU87Z0JBQ0xSLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZQyxLQUFLO1lBQ25EO1lBQ0FFLFVBQVU7Z0JBQ1JWLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZRyxRQUFRO1lBQ3REO1lBQ0FDLE1BQU07Z0JBQ0pYLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZSSxJQUFJO1lBQ2xEO1lBQ0FDLEtBQUs7Z0JBQ0haLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZSyxHQUFHO1lBQ2pEO1FBQ0Y7SUFDRjtBQUVGO0FBQ0FmLDJCQUEyQixHQUFHRSxxQkFDOUIsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL2dlc3R1cmVTdGF0ZU1hbmFnZXIud2ViLmpzPzMyM2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdlc3R1cmVTdGF0ZU1hbmFnZXIgPSB2b2lkIDA7XG5cbnZhciBfTm9kZU1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi93ZWIvdG9vbHMvTm9kZU1hbmFnZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBHZXN0dXJlU3RhdGVNYW5hZ2VyID0ge1xuICBjcmVhdGUoaGFuZGxlclRhZykge1xuICAgIHJldHVybiB7XG4gICAgICBiZWdpbjogKCkgPT4ge1xuICAgICAgICBfTm9kZU1hbmFnZXIuZGVmYXVsdC5nZXRIYW5kbGVyKGhhbmRsZXJUYWcpLmJlZ2luKCk7XG4gICAgICB9LFxuICAgICAgYWN0aXZhdGU6ICgpID0+IHtcbiAgICAgICAgX05vZGVNYW5hZ2VyLmRlZmF1bHQuZ2V0SGFuZGxlcihoYW5kbGVyVGFnKS5hY3RpdmF0ZSgpO1xuICAgICAgfSxcbiAgICAgIGZhaWw6ICgpID0+IHtcbiAgICAgICAgX05vZGVNYW5hZ2VyLmRlZmF1bHQuZ2V0SGFuZGxlcihoYW5kbGVyVGFnKS5mYWlsKCk7XG4gICAgICB9LFxuICAgICAgZW5kOiAoKSA9PiB7XG4gICAgICAgIF9Ob2RlTWFuYWdlci5kZWZhdWx0LmdldEhhbmRsZXIoaGFuZGxlclRhZykuZW5kKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG59O1xuZXhwb3J0cy5HZXN0dXJlU3RhdGVNYW5hZ2VyID0gR2VzdHVyZVN0YXRlTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlc3R1cmVTdGF0ZU1hbmFnZXIud2ViLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdlc3R1cmVTdGF0ZU1hbmFnZXIiLCJfTm9kZU1hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3JlYXRlIiwiaGFuZGxlclRhZyIsImJlZ2luIiwiZ2V0SGFuZGxlciIsImFjdGl2YXRlIiwiZmFpbCIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongPressGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass LongPressGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"LongPressGestureHandler\";\n        this.shouldCancelWhenOutside(true);\n    }\n    minDuration(duration) {\n        this.config.minDurationMs = duration;\n        return this;\n    }\n    maxDistance(distance) {\n        this.config.maxDist = distance;\n        return this;\n    }\n}\nexports.LongPressGesture = LongPressGesture; //# sourceMappingURL=longPressGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbG9uZ1ByZXNzR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsd0JBQXdCLEdBQUcsS0FBSztBQUVoQyxJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLHlCQUF5QkMsU0FBU1EsV0FBVztJQUNqREMsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQztJQUMvQjtJQUVBQyxZQUFZQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxNQUFNLENBQUNDLGFBQWEsR0FBR0Y7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUcsWUFBWUMsUUFBUSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLEdBQUdEO1FBQ3RCLE9BQU8sSUFBSTtJQUNiO0FBRUY7QUFFQXBCLHdCQUF3QixHQUFHRSxrQkFDM0IsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL2xvbmdQcmVzc0dlc3R1cmUuanM/ZTBkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTG9uZ1ByZXNzR2VzdHVyZSA9IHZvaWQgMDtcblxudmFyIF9nZXN0dXJlID0gcmVxdWlyZShcIi4vZ2VzdHVyZVwiKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuY2xhc3MgTG9uZ1ByZXNzR2VzdHVyZSBleHRlbmRzIF9nZXN0dXJlLkJhc2VHZXN0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmZpZ1wiLCB7fSk7XG5cbiAgICB0aGlzLmhhbmRsZXJOYW1lID0gJ0xvbmdQcmVzc0dlc3R1cmVIYW5kbGVyJztcbiAgICB0aGlzLnNob3VsZENhbmNlbFdoZW5PdXRzaWRlKHRydWUpO1xuICB9XG5cbiAgbWluRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICB0aGlzLmNvbmZpZy5taW5EdXJhdGlvbk1zID0gZHVyYXRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYXhEaXN0YW5jZShkaXN0YW5jZSkge1xuICAgIHRoaXMuY29uZmlnLm1heERpc3QgPSBkaXN0YW5jZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbmV4cG9ydHMuTG9uZ1ByZXNzR2VzdHVyZSA9IExvbmdQcmVzc0dlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nUHJlc3NHZXN0dXJlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxvbmdQcmVzc0dlc3R1cmUiLCJfZ2VzdHVyZSIsInJlcXVpcmUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJCYXNlR2VzdHVyZSIsImNvbnN0cnVjdG9yIiwiaGFuZGxlck5hbWUiLCJzaG91bGRDYW5jZWxXaGVuT3V0c2lkZSIsIm1pbkR1cmF0aW9uIiwiZHVyYXRpb24iLCJjb25maWciLCJtaW5EdXJhdGlvbk1zIiwibWF4RGlzdGFuY2UiLCJkaXN0YW5jZSIsIm1heERpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ManualGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, _previous) {\n    \"worklet\";\n    return current;\n}\nclass ManualGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"ManualGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, Record<string, never> is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.ManualGesture = ManualGesture; //# sourceMappingURL=manualGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbWFudWFsR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQscUJBQXFCLEdBQUcsS0FBSztBQUU3QixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxzQkFBc0JDLE9BQU8sRUFBRUMsU0FBUztJQUMvQztJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxNQUFNSixzQkFBc0JDLFNBQVNLLG9CQUFvQjtJQUN2REMsYUFBYztRQUNaLEtBQUs7UUFDTCxJQUFJLENBQUNDLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxTQUFTQyxRQUFRLEVBQUU7UUFDakIsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQ0MsUUFBUSxDQUFDUixxQkFBcUIsR0FBR0E7UUFDdEMsT0FBTyxLQUFLLENBQUNNLFNBQVNDO0lBQ3hCO0FBRUY7QUFFQVoscUJBQXFCLEdBQUdFLGVBQ3hCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9tYW51YWxHZXN0dXJlLmpzPzA5YjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1hbnVhbEdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIGNoYW5nZUV2ZW50Q2FsY3VsYXRvcihjdXJyZW50LCBfcHJldmlvdXMpIHtcbiAgJ3dvcmtsZXQnO1xuXG4gIHJldHVybiBjdXJyZW50O1xufVxuXG5jbGFzcyBNYW51YWxHZXN0dXJlIGV4dGVuZHMgX2dlc3R1cmUuQ29udGlub3VzQmFzZUdlc3R1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaGFuZGxlck5hbWUgPSAnTWFudWFsR2VzdHVyZUhhbmRsZXInO1xuICB9XG5cbiAgb25DaGFuZ2UoY2FsbGJhY2spIHtcbiAgICAvLyBAdHMtaWdub3JlIFRTIGJlaW5nIG92ZXJwcm90ZWN0aXZlLCBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gaXMgUmVjb3JkXG4gICAgdGhpcy5oYW5kbGVycy5jaGFuZ2VFdmVudENhbGN1bGF0b3IgPSBjaGFuZ2VFdmVudENhbGN1bGF0b3I7XG4gICAgcmV0dXJuIHN1cGVyLm9uQ2hhbmdlKGNhbGxiYWNrKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuTWFudWFsR2VzdHVyZSA9IE1hbnVhbEdlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYW51YWxHZXN0dXJlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1hbnVhbEdlc3R1cmUiLCJfZ2VzdHVyZSIsInJlcXVpcmUiLCJjaGFuZ2VFdmVudENhbGN1bGF0b3IiLCJjdXJyZW50IiwiX3ByZXZpb3VzIiwiQ29udGlub3VzQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImhhbmRsZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NativeGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass NativeGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"NativeViewGestureHandler\";\n    }\n    shouldActivateOnStart(value) {\n        this.config.shouldActivateOnStart = value;\n        return this;\n    }\n    disallowInterruption(value) {\n        this.config.disallowInterruption = value;\n        return this;\n    }\n}\nexports.NativeGesture = NativeGesture; //# sourceMappingURL=nativeGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbmF0aXZlR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQscUJBQXFCLEdBQUcsS0FBSztBQUU3QixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLHNCQUFzQkMsU0FBU1EsV0FBVztJQUM5Q0MsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7SUFDckI7SUFFQUMsc0JBQXNCYixLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDYyxNQUFNLENBQUNELHFCQUFxQixHQUFHYjtRQUNwQyxPQUFPLElBQUk7SUFDYjtJQUVBZSxxQkFBcUJmLEtBQUssRUFBRTtRQUMxQixJQUFJLENBQUNjLE1BQU0sQ0FBQ0Msb0JBQW9CLEdBQUdmO1FBQ25DLE9BQU8sSUFBSTtJQUNiO0FBRUY7QUFFQUQscUJBQXFCLEdBQUdFLGVBQ3hCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9uYXRpdmVHZXN0dXJlLmpzP2UzNDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk5hdGl2ZUdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmNsYXNzIE5hdGl2ZUdlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5CYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge30pO1xuXG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXInO1xuICB9XG5cbiAgc2hvdWxkQWN0aXZhdGVPblN0YXJ0KHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcuc2hvdWxkQWN0aXZhdGVPblN0YXJ0ID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkaXNhbGxvd0ludGVycnVwdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuY29uZmlnLmRpc2FsbG93SW50ZXJydXB0aW9uID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG5leHBvcnRzLk5hdGl2ZUdlc3R1cmUgPSBOYXRpdmVHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0aXZlR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOYXRpdmVHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwic2hvdWxkQWN0aXZhdGVPblN0YXJ0IiwiY29uZmlnIiwiZGlzYWxsb3dJbnRlcnJ1cHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PanGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            changeX: current.translationX,\n            changeY: current.translationY\n        };\n    } else {\n        changePayload = {\n            changeX: current.translationX - previous.translationX,\n            changeY: current.translationY - previous.translationY\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass PanGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"PanGestureHandler\";\n    }\n    activeOffsetY(offset) {\n        if (Array.isArray(offset)) {\n            this.config.activeOffsetYStart = offset[0];\n            this.config.activeOffsetYEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.activeOffsetYStart = offset;\n        } else {\n            this.config.activeOffsetYEnd = offset;\n        }\n        return this;\n    }\n    activeOffsetX(offset) {\n        if (Array.isArray(offset)) {\n            this.config.activeOffsetXStart = offset[0];\n            this.config.activeOffsetXEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.activeOffsetXStart = offset;\n        } else {\n            this.config.activeOffsetXEnd = offset;\n        }\n        return this;\n    }\n    failOffsetY(offset) {\n        if (Array.isArray(offset)) {\n            this.config.failOffsetYStart = offset[0];\n            this.config.failOffsetYEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.failOffsetYStart = offset;\n        } else {\n            this.config.failOffsetYEnd = offset;\n        }\n        return this;\n    }\n    failOffsetX(offset) {\n        if (Array.isArray(offset)) {\n            this.config.failOffsetXStart = offset[0];\n            this.config.failOffsetXEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.failOffsetXStart = offset;\n        } else {\n            this.config.failOffsetXEnd = offset;\n        }\n        return this;\n    }\n    minPointers(minPointers) {\n        this.config.minPointers = minPointers;\n        return this;\n    }\n    maxPointers(maxPointers) {\n        this.config.maxPointers = maxPointers;\n        return this;\n    }\n    minDistance(distance) {\n        this.config.minDist = distance;\n        return this;\n    }\n    minVelocity(velocity) {\n        this.config.minVelocity = velocity;\n        return this;\n    }\n    minVelocityX(velocity) {\n        this.config.minVelocityX = velocity;\n        return this;\n    }\n    minVelocityY(velocity) {\n        this.config.minVelocityY = velocity;\n        return this;\n    }\n    averageTouches(value) {\n        this.config.avgTouches = value;\n        return this;\n    }\n    enableTrackpadTwoFingerGesture(value) {\n        this.config.enableTrackpadTwoFingerGesture = value;\n        return this;\n    }\n    activateAfterLongPress(duration) {\n        this.config.activateAfterLongPress = duration;\n        return this;\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.PanGesture = PanGesture; //# sourceMappingURL=panGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PinchGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            scaleChange: current.scale\n        };\n    } else {\n        changePayload = {\n            scaleChange: current.scale / previous.scale\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass PinchGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"PinchGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.PinchGesture = PinchGesture; //# sourceMappingURL=pinchGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcGluY2hHZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxvQkFBb0IsR0FBRyxLQUFLO0FBRTVCLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLHNCQUFzQkMsT0FBTyxFQUFFQyxRQUFRO0lBQzlDO0lBRUEsSUFBSUM7SUFFSixJQUFJRCxhQUFhRSxXQUFXO1FBQzFCRCxnQkFBZ0I7WUFDZEUsYUFBYUosUUFBUUssS0FBSztRQUM1QjtJQUNGLE9BQU87UUFDTEgsZ0JBQWdCO1lBQ2RFLGFBQWFKLFFBQVFLLEtBQUssR0FBR0osU0FBU0ksS0FBSztRQUM3QztJQUNGO0lBRUEsT0FBTztRQUFFLEdBQUdMLE9BQU87UUFDakIsR0FBR0UsYUFBYTtJQUNsQjtBQUNGO0FBRUEsTUFBTU4scUJBQXFCQyxTQUFTUyxvQkFBb0I7SUFDdERDLGFBQWM7UUFDWixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxXQUFXLEdBQUc7SUFDckI7SUFFQUMsU0FBU0MsUUFBUSxFQUFFO1FBQ2pCLGdGQUFnRjtRQUNoRixJQUFJLENBQUNDLFFBQVEsQ0FBQ1oscUJBQXFCLEdBQUdBO1FBQ3RDLE9BQU8sS0FBSyxDQUFDVSxTQUFTQztJQUN4QjtBQUVGO0FBRUFoQixvQkFBb0IsR0FBR0UsY0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL3BpbmNoR2VzdHVyZS5qcz9iMzE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaW5jaEdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIGNoYW5nZUV2ZW50Q2FsY3VsYXRvcihjdXJyZW50LCBwcmV2aW91cykge1xuICAnd29ya2xldCc7XG5cbiAgbGV0IGNoYW5nZVBheWxvYWQ7XG5cbiAgaWYgKHByZXZpb3VzID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGFuZ2VQYXlsb2FkID0ge1xuICAgICAgc2NhbGVDaGFuZ2U6IGN1cnJlbnQuc2NhbGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNoYW5nZVBheWxvYWQgPSB7XG4gICAgICBzY2FsZUNoYW5nZTogY3VycmVudC5zY2FsZSAvIHByZXZpb3VzLnNjYWxlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IC4uLmN1cnJlbnQsXG4gICAgLi4uY2hhbmdlUGF5bG9hZFxuICB9O1xufVxuXG5jbGFzcyBQaW5jaEdlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5Db250aW5vdXNCYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdQaW5jaEdlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBUUyBiZWluZyBvdmVycHJvdGVjdGl2ZSwgUGluY2hHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZCBpcyBSZWNvcmRcbiAgICB0aGlzLmhhbmRsZXJzLmNoYW5nZUV2ZW50Q2FsY3VsYXRvciA9IGNoYW5nZUV2ZW50Q2FsY3VsYXRvcjtcbiAgICByZXR1cm4gc3VwZXIub25DaGFuZ2UoY2FsbGJhY2spO1xuICB9XG5cbn1cblxuZXhwb3J0cy5QaW5jaEdlc3R1cmUgPSBQaW5jaEdlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waW5jaEdlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGluY2hHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiY2hhbmdlRXZlbnRDYWxjdWxhdG9yIiwiY3VycmVudCIsInByZXZpb3VzIiwiY2hhbmdlUGF5bG9hZCIsInVuZGVmaW5lZCIsInNjYWxlQ2hhbmdlIiwic2NhbGUiLCJDb250aW5vdXNCYXNlR2VzdHVyZSIsImNvbnN0cnVjdG9yIiwiaGFuZGxlck5hbWUiLCJvbkNoYW5nZSIsImNhbGxiYWNrIiwiaGFuZGxlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Reanimated = void 0;\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nlet Reanimated;\nexports.Reanimated = Reanimated;\ntry {\n    exports.Reanimated = Reanimated = __webpack_require__(/*! react-native-reanimated */ \"./node_modules/react-native-reanimated/lib/index.js\");\n    if (!Reanimated.useSharedValue) {\n        // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n        // reset the module to undefined so we can fallback to the default implementation\n        exports.Reanimated = Reanimated = undefined;\n        throw new Error(\"react-native-reanimated is not found\");\n    }\n    if (!Reanimated.setGestureState) {\n        Reanimated.setGestureState = ()=>{\n            \"worklet\";\n            console.warn((0, _utils.tagMessage)(\"Please use newer version of react-native-reanimated in order to control state of the gestures.\"));\n        };\n    } // When 'react-native-reanimated' is not available we want to\n// quietly continue\n// eslint-disable-next-line no-empty\n} catch (e) {} //# sourceMappingURL=reanimatedWrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcmVhbmltYXRlZFdyYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUcsU0FBU0MsbUJBQU9BLENBQUMsc0ZBQWE7QUFFbEMsSUFBSUY7QUFDSkYsa0JBQWtCLEdBQUdFO0FBRXJCLElBQUk7SUFDRkYsa0JBQWtCLEdBQUdFLGFBQWFFLG1CQUFPQSxDQUFDO0lBRTFDLElBQUksQ0FBQ0YsV0FBV0csY0FBYyxFQUFFO1FBQzlCLDZFQUE2RTtRQUM3RSxpRkFBaUY7UUFDakZMLGtCQUFrQixHQUFHRSxhQUFhSTtRQUNsQyxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUNMLFdBQVdNLGVBQWUsRUFBRTtRQUMvQk4sV0FBV00sZUFBZSxHQUFHO1lBQzNCO1lBRUFDLFFBQVFDLElBQUksQ0FBQyxDQUFDLEdBQUdQLE9BQU9RLFVBQVUsRUFBRTtRQUN0QztJQUNGLEVBQUUsNkRBQTZEO0FBQy9ELG1CQUFtQjtBQUNuQixvQ0FBb0M7QUFFdEMsRUFBRSxPQUFPQyxHQUFHLENBQUMsRUFDYiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcmVhbmltYXRlZFdyYXBwZXIuanM/MDljZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUmVhbmltYXRlZCA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcblxubGV0IFJlYW5pbWF0ZWQ7XG5leHBvcnRzLlJlYW5pbWF0ZWQgPSBSZWFuaW1hdGVkO1xuXG50cnkge1xuICBleHBvcnRzLlJlYW5pbWF0ZWQgPSBSZWFuaW1hdGVkID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnKTtcblxuICBpZiAoIVJlYW5pbWF0ZWQudXNlU2hhcmVkVmFsdWUpIHtcbiAgICAvLyBAdHMtaWdub3JlIE1ha2Ugc3VyZSB0aGUgbG9hZGVkIG1vZHVsZSBpcyBhY3R1YWxseSBSZWFuaW1hdGVkLCBpZiBpdCdzIG5vdFxuICAgIC8vIHJlc2V0IHRoZSBtb2R1bGUgdG8gdW5kZWZpbmVkIHNvIHdlIGNhbiBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICAgIGV4cG9ydHMuUmVhbmltYXRlZCA9IFJlYW5pbWF0ZWQgPSB1bmRlZmluZWQ7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCBpcyBub3QgZm91bmQnKTtcbiAgfVxuXG4gIGlmICghUmVhbmltYXRlZC5zZXRHZXN0dXJlU3RhdGUpIHtcbiAgICBSZWFuaW1hdGVkLnNldEdlc3R1cmVTdGF0ZSA9ICgpID0+IHtcbiAgICAgICd3b3JrbGV0JztcblxuICAgICAgY29uc29sZS53YXJuKCgwLCBfdXRpbHMudGFnTWVzc2FnZSkoJ1BsZWFzZSB1c2UgbmV3ZXIgdmVyc2lvbiBvZiByZWFjdC1uYXRpdmUtcmVhbmltYXRlZCBpbiBvcmRlciB0byBjb250cm9sIHN0YXRlIG9mIHRoZSBnZXN0dXJlcy4nKSk7XG4gICAgfTtcbiAgfSAvLyBXaGVuICdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCcgaXMgbm90IGF2YWlsYWJsZSB3ZSB3YW50IHRvXG4gIC8vIHF1aWV0bHkgY29udGludWVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG5cbn0gY2F0Y2ggKGUpIHt9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFuaW1hdGVkV3JhcHBlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFuaW1hdGVkIiwiX3V0aWxzIiwicmVxdWlyZSIsInVzZVNoYXJlZFZhbHVlIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJzZXRHZXN0dXJlU3RhdGUiLCJjb25zb2xlIiwid2FybiIsInRhZ01lc3NhZ2UiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RotationGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            rotationChange: current.rotation\n        };\n    } else {\n        changePayload = {\n            rotationChange: current.rotation - previous.rotation\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass RotationGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"RotationGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.RotationGesture = RotationGesture; //# sourceMappingURL=rotationGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcm90YXRpb25HZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx1QkFBdUIsR0FBRyxLQUFLO0FBRS9CLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLHNCQUFzQkMsT0FBTyxFQUFFQyxRQUFRO0lBQzlDO0lBRUEsSUFBSUM7SUFFSixJQUFJRCxhQUFhRSxXQUFXO1FBQzFCRCxnQkFBZ0I7WUFDZEUsZ0JBQWdCSixRQUFRSyxRQUFRO1FBQ2xDO0lBQ0YsT0FBTztRQUNMSCxnQkFBZ0I7WUFDZEUsZ0JBQWdCSixRQUFRSyxRQUFRLEdBQUdKLFNBQVNJLFFBQVE7UUFDdEQ7SUFDRjtJQUVBLE9BQU87UUFBRSxHQUFHTCxPQUFPO1FBQ2pCLEdBQUdFLGFBQWE7SUFDbEI7QUFDRjtBQUVBLE1BQU1OLHdCQUF3QkMsU0FBU1Msb0JBQW9CO0lBQ3pEQyxhQUFjO1FBQ1osS0FBSztRQUNMLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0lBQ3JCO0lBRUFDLFNBQVNDLFFBQVEsRUFBRTtRQUNqQixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDQyxRQUFRLENBQUNaLHFCQUFxQixHQUFHQTtRQUN0QyxPQUFPLEtBQUssQ0FBQ1UsU0FBU0M7SUFDeEI7QUFFRjtBQUVBaEIsdUJBQXVCLEdBQUdFLGlCQUMxQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcm90YXRpb25HZXN0dXJlLmpzP2VlYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJvdGF0aW9uR2VzdHVyZSA9IHZvaWQgMDtcblxudmFyIF9nZXN0dXJlID0gcmVxdWlyZShcIi4vZ2VzdHVyZVwiKTtcblxuZnVuY3Rpb24gY2hhbmdlRXZlbnRDYWxjdWxhdG9yKGN1cnJlbnQsIHByZXZpb3VzKSB7XG4gICd3b3JrbGV0JztcblxuICBsZXQgY2hhbmdlUGF5bG9hZDtcblxuICBpZiAocHJldmlvdXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNoYW5nZVBheWxvYWQgPSB7XG4gICAgICByb3RhdGlvbkNoYW5nZTogY3VycmVudC5yb3RhdGlvblxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY2hhbmdlUGF5bG9hZCA9IHtcbiAgICAgIHJvdGF0aW9uQ2hhbmdlOiBjdXJyZW50LnJvdGF0aW9uIC0gcHJldmlvdXMucm90YXRpb25cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgLi4uY3VycmVudCxcbiAgICAuLi5jaGFuZ2VQYXlsb2FkXG4gIH07XG59XG5cbmNsYXNzIFJvdGF0aW9uR2VzdHVyZSBleHRlbmRzIF9nZXN0dXJlLkNvbnRpbm91c0Jhc2VHZXN0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmhhbmRsZXJOYW1lID0gJ1JvdGF0aW9uR2VzdHVyZUhhbmRsZXInO1xuICB9XG5cbiAgb25DaGFuZ2UoY2FsbGJhY2spIHtcbiAgICAvLyBAdHMtaWdub3JlIFRTIGJlaW5nIG92ZXJwcm90ZWN0aXZlLCBSb3RhdGlvbkdlc3R1cmVIYW5kbGVyRXZlbnRQYXlsb2FkIGlzIFJlY29yZFxuICAgIHRoaXMuaGFuZGxlcnMuY2hhbmdlRXZlbnRDYWxjdWxhdG9yID0gY2hhbmdlRXZlbnRDYWxjdWxhdG9yO1xuICAgIHJldHVybiBzdXBlci5vbkNoYW5nZShjYWxsYmFjayk7XG4gIH1cblxufVxuXG5leHBvcnRzLlJvdGF0aW9uR2VzdHVyZSA9IFJvdGF0aW9uR2VzdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdGF0aW9uR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSb3RhdGlvbkdlc3R1cmUiLCJfZ2VzdHVyZSIsInJlcXVpcmUiLCJjaGFuZ2VFdmVudENhbGN1bGF0b3IiLCJjdXJyZW50IiwicHJldmlvdXMiLCJjaGFuZ2VQYXlsb2FkIiwidW5kZWZpbmVkIiwicm90YXRpb25DaGFuZ2UiLCJyb3RhdGlvbiIsIkNvbnRpbm91c0Jhc2VHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyTmFtZSIsIm9uQ2hhbmdlIiwiY2FsbGJhY2siLCJoYW5kbGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TapGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass TapGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"TapGestureHandler\";\n        this.shouldCancelWhenOutside(true);\n    }\n    minPointers(minPointers) {\n        this.config.minPointers = minPointers;\n        return this;\n    }\n    numberOfTaps(count) {\n        this.config.numberOfTaps = count;\n        return this;\n    }\n    maxDistance(maxDist) {\n        this.config.maxDist = maxDist;\n        return this;\n    }\n    maxDuration(duration) {\n        this.config.maxDurationMs = duration;\n        return this;\n    }\n    maxDelay(delay) {\n        this.config.maxDelayMs = delay;\n        return this;\n    }\n    maxDeltaX(delta) {\n        this.config.maxDeltaX = delta;\n        return this;\n    }\n    maxDeltaY(delta) {\n        this.config.maxDeltaY = delta;\n        return this;\n    }\n}\nexports.TapGesture = TapGesture; //# sourceMappingURL=tapGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvdGFwR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLG1CQUFtQkMsU0FBU1EsV0FBVztJQUMzQ0MsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQztJQUMvQjtJQUVBQyxZQUFZQSxXQUFXLEVBQUU7UUFDdkIsSUFBSSxDQUFDQyxNQUFNLENBQUNELFdBQVcsR0FBR0E7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsYUFBYUMsS0FBSyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxZQUFZLEdBQUdDO1FBQzNCLE9BQU8sSUFBSTtJQUNiO0lBRUFDLFlBQVlDLE9BQU8sRUFBRTtRQUNuQixJQUFJLENBQUNKLE1BQU0sQ0FBQ0ksT0FBTyxHQUFHQTtRQUN0QixPQUFPLElBQUk7SUFDYjtJQUVBQyxZQUFZQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDTixNQUFNLENBQUNPLGFBQWEsR0FBR0Q7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsU0FBU0MsS0FBSyxFQUFFO1FBQ2QsSUFBSSxDQUFDVCxNQUFNLENBQUNVLFVBQVUsR0FBR0Q7UUFDekIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsVUFBVUMsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDWixNQUFNLENBQUNXLFNBQVMsR0FBR0M7UUFDeEIsT0FBTyxJQUFJO0lBQ2I7SUFFQUMsVUFBVUQsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDWixNQUFNLENBQUNhLFNBQVMsR0FBR0Q7UUFDeEIsT0FBTyxJQUFJO0lBQ2I7QUFFRjtBQUVBNUIsa0JBQWtCLEdBQUdFLFlBQ3JCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy90YXBHZXN0dXJlLmpzPzQ5MzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhcEdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmNsYXNzIFRhcEdlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5CYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge30pO1xuXG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdUYXBHZXN0dXJlSGFuZGxlcic7XG4gICAgdGhpcy5zaG91bGRDYW5jZWxXaGVuT3V0c2lkZSh0cnVlKTtcbiAgfVxuXG4gIG1pblBvaW50ZXJzKG1pblBvaW50ZXJzKSB7XG4gICAgdGhpcy5jb25maWcubWluUG9pbnRlcnMgPSBtaW5Qb2ludGVycztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG51bWJlck9mVGFwcyhjb3VudCkge1xuICAgIHRoaXMuY29uZmlnLm51bWJlck9mVGFwcyA9IGNvdW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4RGlzdGFuY2UobWF4RGlzdCkge1xuICAgIHRoaXMuY29uZmlnLm1heERpc3QgPSBtYXhEaXN0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4RHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICB0aGlzLmNvbmZpZy5tYXhEdXJhdGlvbk1zID0gZHVyYXRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYXhEZWxheShkZWxheSkge1xuICAgIHRoaXMuY29uZmlnLm1heERlbGF5TXMgPSBkZWxheTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1heERlbHRhWChkZWx0YSkge1xuICAgIHRoaXMuY29uZmlnLm1heERlbHRhWCA9IGRlbHRhO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4RGVsdGFZKGRlbHRhKSB7XG4gICAgdGhpcy5jb25maWcubWF4RGVsdGFZID0gZGVsdGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG5leHBvcnRzLlRhcEdlc3R1cmUgPSBUYXBHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFwR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUYXBHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwic2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUiLCJtaW5Qb2ludGVycyIsImNvbmZpZyIsIm51bWJlck9mVGFwcyIsImNvdW50IiwibWF4RGlzdGFuY2UiLCJtYXhEaXN0IiwibWF4RHVyYXRpb24iLCJkdXJhdGlvbiIsIm1heER1cmF0aW9uTXMiLCJtYXhEZWxheSIsImRlbGF5IiwibWF4RGVsYXlNcyIsIm1heERlbHRhWCIsImRlbHRhIiwibWF4RGVsdGFZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getNextHandlerTag = getNextHandlerTag;\nexports.registerHandler = registerHandler;\nexports.registerOldGestureHandler = registerOldGestureHandler;\nexports.unregisterHandler = unregisterHandler;\nexports.findHandler = findHandler;\nexports.findOldGestureHandler = findOldGestureHandler;\nexports.findHandlerByTestID = findHandlerByTestID;\nexports.handlerIDToTag = void 0;\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nconst handlerIDToTag = {};\nexports.handlerIDToTag = handlerIDToTag;\nconst gestures = new Map();\nconst oldHandlers = new Map();\nconst testIDs = new Map();\nlet handlerTag = 1;\nfunction getNextHandlerTag() {\n    return handlerTag++;\n}\nfunction registerHandler(handlerTag, handler, testID) {\n    gestures.set(handlerTag, handler);\n    if ((0, _utils.isJestEnv)() && testID) {\n        testIDs.set(testID, handlerTag);\n    }\n}\nfunction registerOldGestureHandler(handlerTag, handler) {\n    oldHandlers.set(handlerTag, handler);\n}\nfunction unregisterHandler(handlerTag, testID) {\n    gestures.delete(handlerTag);\n    if ((0, _utils.isJestEnv)() && testID) {\n        testIDs.delete(testID);\n    }\n}\nfunction findHandler(handlerTag) {\n    return gestures.get(handlerTag);\n}\nfunction findOldGestureHandler(handlerTag) {\n    return oldHandlers.get(handlerTag);\n}\nfunction findHandlerByTestID(testID) {\n    const handlerTag = testIDs.get(testID);\n    if (handlerTag !== undefined) {\n        var _findHandler;\n        return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;\n    }\n    return null;\n} //# sourceMappingURL=handlersRegistry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvaGFuZGxlcnNSZWdpc3RyeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUdFO0FBQzVCRix1QkFBdUIsR0FBR0c7QUFDMUJILGlDQUFpQyxHQUFHSTtBQUNwQ0oseUJBQXlCLEdBQUdLO0FBQzVCTCxtQkFBbUIsR0FBR007QUFDdEJOLDZCQUE2QixHQUFHTztBQUNoQ1AsMkJBQTJCLEdBQUdRO0FBQzlCUixzQkFBc0IsR0FBRyxLQUFLO0FBRTlCLElBQUlVLFNBQVNDLG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLE1BQU1GLGlCQUFpQixDQUFDO0FBQ3hCVCxzQkFBc0IsR0FBR1M7QUFDekIsTUFBTUcsV0FBVyxJQUFJQztBQUNyQixNQUFNQyxjQUFjLElBQUlEO0FBQ3hCLE1BQU1FLFVBQVUsSUFBSUY7QUFDcEIsSUFBSUcsYUFBYTtBQUVqQixTQUFTZDtJQUNQLE9BQU9jO0FBQ1Q7QUFFQSxTQUFTYixnQkFBZ0JhLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBQ2xETixTQUFTTyxHQUFHLENBQUNILFlBQVlDO0lBRXpCLElBQUksQ0FBQyxHQUFHUCxPQUFPVSxTQUFTLE9BQU9GLFFBQVE7UUFDckNILFFBQVFJLEdBQUcsQ0FBQ0QsUUFBUUY7SUFDdEI7QUFDRjtBQUVBLFNBQVNaLDBCQUEwQlksVUFBVSxFQUFFQyxPQUFPO0lBQ3BESCxZQUFZSyxHQUFHLENBQUNILFlBQVlDO0FBQzlCO0FBRUEsU0FBU1osa0JBQWtCVyxVQUFVLEVBQUVFLE1BQU07SUFDM0NOLFNBQVNTLE1BQU0sQ0FBQ0w7SUFFaEIsSUFBSSxDQUFDLEdBQUdOLE9BQU9VLFNBQVMsT0FBT0YsUUFBUTtRQUNyQ0gsUUFBUU0sTUFBTSxDQUFDSDtJQUNqQjtBQUNGO0FBRUEsU0FBU1osWUFBWVUsVUFBVTtJQUM3QixPQUFPSixTQUFTVSxHQUFHLENBQUNOO0FBQ3RCO0FBRUEsU0FBU1Qsc0JBQXNCUyxVQUFVO0lBQ3ZDLE9BQU9GLFlBQVlRLEdBQUcsQ0FBQ047QUFDekI7QUFFQSxTQUFTUixvQkFBb0JVLE1BQU07SUFDakMsTUFBTUYsYUFBYUQsUUFBUU8sR0FBRyxDQUFDSjtJQUUvQixJQUFJRixlQUFlTyxXQUFXO1FBQzVCLElBQUlDO1FBRUosT0FBTyxDQUFDQSxlQUFlbEIsWUFBWVUsV0FBVSxNQUFPLFFBQVFRLGlCQUFpQixLQUFLLElBQUlBLGVBQWU7SUFDdkc7SUFFQSxPQUFPO0FBQ1QsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvaGFuZGxlcnNSZWdpc3RyeS5qcz84OGYxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXROZXh0SGFuZGxlclRhZyA9IGdldE5leHRIYW5kbGVyVGFnO1xuZXhwb3J0cy5yZWdpc3RlckhhbmRsZXIgPSByZWdpc3RlckhhbmRsZXI7XG5leHBvcnRzLnJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIgPSByZWdpc3Rlck9sZEdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy51bnJlZ2lzdGVySGFuZGxlciA9IHVucmVnaXN0ZXJIYW5kbGVyO1xuZXhwb3J0cy5maW5kSGFuZGxlciA9IGZpbmRIYW5kbGVyO1xuZXhwb3J0cy5maW5kT2xkR2VzdHVyZUhhbmRsZXIgPSBmaW5kT2xkR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmZpbmRIYW5kbGVyQnlUZXN0SUQgPSBmaW5kSGFuZGxlckJ5VGVzdElEO1xuZXhwb3J0cy5oYW5kbGVySURUb1RhZyA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxuY29uc3QgaGFuZGxlcklEVG9UYWcgPSB7fTtcbmV4cG9ydHMuaGFuZGxlcklEVG9UYWcgPSBoYW5kbGVySURUb1RhZztcbmNvbnN0IGdlc3R1cmVzID0gbmV3IE1hcCgpO1xuY29uc3Qgb2xkSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG5jb25zdCB0ZXN0SURzID0gbmV3IE1hcCgpO1xubGV0IGhhbmRsZXJUYWcgPSAxO1xuXG5mdW5jdGlvbiBnZXROZXh0SGFuZGxlclRhZygpIHtcbiAgcmV0dXJuIGhhbmRsZXJUYWcrKztcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJIYW5kbGVyKGhhbmRsZXJUYWcsIGhhbmRsZXIsIHRlc3RJRCkge1xuICBnZXN0dXJlcy5zZXQoaGFuZGxlclRhZywgaGFuZGxlcik7XG5cbiAgaWYgKCgwLCBfdXRpbHMuaXNKZXN0RW52KSgpICYmIHRlc3RJRCkge1xuICAgIHRlc3RJRHMuc2V0KHRlc3RJRCwgaGFuZGxlclRhZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnLCBoYW5kbGVyKSB7XG4gIG9sZEhhbmRsZXJzLnNldChoYW5kbGVyVGFnLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlckhhbmRsZXIoaGFuZGxlclRhZywgdGVzdElEKSB7XG4gIGdlc3R1cmVzLmRlbGV0ZShoYW5kbGVyVGFnKTtcblxuICBpZiAoKDAsIF91dGlscy5pc0plc3RFbnYpKCkgJiYgdGVzdElEKSB7XG4gICAgdGVzdElEcy5kZWxldGUodGVzdElEKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSGFuZGxlcihoYW5kbGVyVGFnKSB7XG4gIHJldHVybiBnZXN0dXJlcy5nZXQoaGFuZGxlclRhZyk7XG59XG5cbmZ1bmN0aW9uIGZpbmRPbGRHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnKSB7XG4gIHJldHVybiBvbGRIYW5kbGVycy5nZXQoaGFuZGxlclRhZyk7XG59XG5cbmZ1bmN0aW9uIGZpbmRIYW5kbGVyQnlUZXN0SUQodGVzdElEKSB7XG4gIGNvbnN0IGhhbmRsZXJUYWcgPSB0ZXN0SURzLmdldCh0ZXN0SUQpO1xuXG4gIGlmIChoYW5kbGVyVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX2ZpbmRIYW5kbGVyO1xuXG4gICAgcmV0dXJuIChfZmluZEhhbmRsZXIgPSBmaW5kSGFuZGxlcihoYW5kbGVyVGFnKSkgIT09IG51bGwgJiYgX2ZpbmRIYW5kbGVyICE9PSB2b2lkIDAgPyBfZmluZEhhbmRsZXIgOiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYW5kbGVyc1JlZ2lzdHJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE5leHRIYW5kbGVyVGFnIiwicmVnaXN0ZXJIYW5kbGVyIiwicmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlciIsInVucmVnaXN0ZXJIYW5kbGVyIiwiZmluZEhhbmRsZXIiLCJmaW5kT2xkR2VzdHVyZUhhbmRsZXIiLCJmaW5kSGFuZGxlckJ5VGVzdElEIiwiaGFuZGxlcklEVG9UYWciLCJfdXRpbHMiLCJyZXF1aXJlIiwiZ2VzdHVyZXMiLCJNYXAiLCJvbGRIYW5kbGVycyIsInRlc3RJRHMiLCJoYW5kbGVyVGFnIiwiaGFuZGxlciIsInRlc3RJRCIsInNldCIsImlzSmVzdEVudiIsImRlbGV0ZSIsImdldCIsInVuZGVmaW5lZCIsIl9maW5kSGFuZGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Directions\", ({\n    enumerable: true,\n    get: function() {\n        return _Directions.Directions;\n    }\n}));\nObject.defineProperty(exports, \"State\", ({\n    enumerable: true,\n    get: function() {\n        return _State.State;\n    }\n}));\nObject.defineProperty(exports, \"gestureHandlerRootHOC\", ({\n    enumerable: true,\n    get: function() {\n        return _gestureHandlerRootHOC.default;\n    }\n}));\nObject.defineProperty(exports, \"GestureHandlerRootView\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureHandlerRootView.default;\n    }\n}));\nObject.defineProperty(exports, \"TapGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _TapGestureHandler.TapGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"ForceTouchGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _ForceTouchGestureHandler.ForceTouchGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"LongPressGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _LongPressGestureHandler.LongPressGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"PanGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _PanGestureHandler.PanGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"PinchGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _PinchGestureHandler.PinchGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"RotationGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _RotationGestureHandler.RotationGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"FlingGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _FlingGestureHandler.FlingGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"createNativeWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return _createNativeWrapper.default;\n    }\n}));\nObject.defineProperty(exports, \"GestureDetector\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureDetector.GestureDetector;\n    }\n}));\nObject.defineProperty(exports, \"Gesture\", ({\n    enumerable: true,\n    get: function() {\n        return _gestureObjects.GestureObjects;\n    }\n}));\nObject.defineProperty(exports, \"NativeViewGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _NativeViewGestureHandler.NativeViewGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"RawButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.RawButton;\n    }\n}));\nObject.defineProperty(exports, \"BaseButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.BaseButton;\n    }\n}));\nObject.defineProperty(exports, \"RectButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.RectButton;\n    }\n}));\nObject.defineProperty(exports, \"BorderlessButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.BorderlessButton;\n    }\n}));\nObject.defineProperty(exports, \"TouchableHighlight\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableHighlight;\n    }\n}));\nObject.defineProperty(exports, \"TouchableNativeFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableNativeFeedback;\n    }\n}));\nObject.defineProperty(exports, \"TouchableOpacity\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableOpacity;\n    }\n}));\nObject.defineProperty(exports, \"TouchableWithoutFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableWithoutFeedback;\n    }\n}));\nObject.defineProperty(exports, \"ScrollView\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.ScrollView;\n    }\n}));\nObject.defineProperty(exports, \"Switch\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.Switch;\n    }\n}));\nObject.defineProperty(exports, \"TextInput\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.TextInput;\n    }\n}));\nObject.defineProperty(exports, \"DrawerLayoutAndroid\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.DrawerLayoutAndroid;\n    }\n}));\nObject.defineProperty(exports, \"FlatList\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.FlatList;\n    }\n}));\nObject.defineProperty(exports, \"RefreshControl\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.RefreshControl;\n    }\n}));\nObject.defineProperty(exports, \"Swipeable\", ({\n    enumerable: true,\n    get: function() {\n        return _Swipeable.default;\n    }\n}));\nObject.defineProperty(exports, \"DrawerLayout\", ({\n    enumerable: true,\n    get: function() {\n        return _DrawerLayout.default;\n    }\n}));\nObject.defineProperty(exports, \"enableExperimentalWebImplementation\", ({\n    enumerable: true,\n    get: function() {\n        return _EnableExperimentalWebImplementation.enableExperimentalWebImplementation;\n    }\n}));\nvar _init = __webpack_require__(/*! ./init */ \"./node_modules/react-native-gesture-handler/lib/commonjs/init.js\");\nvar _Directions = __webpack_require__(/*! ./Directions */ \"./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js\");\nvar _State = __webpack_require__(/*! ./State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _gestureHandlerRootHOC = _interopRequireDefault(__webpack_require__(/*! ./gestureHandlerRootHOC */ \"./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js\"));\nvar _GestureHandlerRootView = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerRootView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\"));\nvar _TapGestureHandler = __webpack_require__(/*! ./handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _ForceTouchGestureHandler = __webpack_require__(/*! ./handlers/ForceTouchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\");\nvar _LongPressGestureHandler = __webpack_require__(/*! ./handlers/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ./handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _PinchGestureHandler = __webpack_require__(/*! ./handlers/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js\");\nvar _RotationGestureHandler = __webpack_require__(/*! ./handlers/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js\");\nvar _FlingGestureHandler = __webpack_require__(/*! ./handlers/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ./handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nvar _GestureDetector = __webpack_require__(/*! ./handlers/gestures/GestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\");\nvar _gestureObjects = __webpack_require__(/*! ./handlers/gestures/gestureObjects */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js\");\nvar _NativeViewGestureHandler = __webpack_require__(/*! ./handlers/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\");\nvar _GestureButtons = __webpack_require__(/*! ./components/GestureButtons */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\");\nvar _touchables = __webpack_require__(/*! ./components/touchables */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js\");\nvar _GestureComponents = __webpack_require__(/*! ./components/GestureComponents */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js\");\nvar _Swipeable = _interopRequireDefault(__webpack_require__(/*! ./components/Swipeable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js\"));\nvar _DrawerLayout = _interopRequireDefault(__webpack_require__(/*! ./components/DrawerLayout */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js\"));\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ./EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n(0, _init.initialize)(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/index.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/init.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/init.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.initialize = initialize;\nexports.maybeInitializeFabric = maybeInitializeFabric;\nvar _eventReceiver = __webpack_require__(/*! ./handlers/gestures/eventReceiver */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ./RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet fabricInitialized = false;\nfunction initialize() {\n    (0, _eventReceiver.startListening)();\n} // since isFabric() may give wrong results before the first render, we call this\n// method during render of GestureHandlerRootView\nfunction maybeInitializeFabric() {\n    if ((0, _utils.isFabric)() && !fabricInitialized) {\n        _RNGestureHandlerModule.default.install();\n        fabricInitialized = true;\n    }\n} //# sourceMappingURL=init.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaW5pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdFO0FBQ3JCRiw2QkFBNkIsR0FBR0c7QUFFaEMsSUFBSUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyxzSUFBbUM7QUFFaEUsSUFBSUMsMEJBQTBCQyx1QkFBdUJGLG1CQUFPQSxDQUFDLHdIQUEwQjtBQUV2RixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyxrRkFBUztBQUU5QixTQUFTRSx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLElBQUlHLG9CQUFvQjtBQUV4QixTQUFTVjtJQUNOLElBQUdFLGVBQWVTLGNBQWM7QUFDbkMsRUFBRSxnRkFBZ0Y7QUFDbEYsaURBQWlEO0FBR2pELFNBQVNWO0lBQ1AsSUFBSSxDQUFDLEdBQUdLLE9BQU9NLFFBQVEsT0FBTyxDQUFDRixtQkFBbUI7UUFDaEROLHdCQUF3QkssT0FBTyxDQUFDSSxPQUFPO1FBRXZDSCxvQkFBb0I7SUFDdEI7QUFDRixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9pbml0LmpzP2EzYjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluaXRpYWxpemUgPSBpbml0aWFsaXplO1xuZXhwb3J0cy5tYXliZUluaXRpYWxpemVGYWJyaWMgPSBtYXliZUluaXRpYWxpemVGYWJyaWM7XG5cbnZhciBfZXZlbnRSZWNlaXZlciA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL2dlc3R1cmVzL2V2ZW50UmVjZWl2ZXJcIik7XG5cbnZhciBfUk5HZXN0dXJlSGFuZGxlck1vZHVsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUk5HZXN0dXJlSGFuZGxlck1vZHVsZVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubGV0IGZhYnJpY0luaXRpYWxpemVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICgwLCBfZXZlbnRSZWNlaXZlci5zdGFydExpc3RlbmluZykoKTtcbn0gLy8gc2luY2UgaXNGYWJyaWMoKSBtYXkgZ2l2ZSB3cm9uZyByZXN1bHRzIGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyLCB3ZSBjYWxsIHRoaXNcbi8vIG1ldGhvZCBkdXJpbmcgcmVuZGVyIG9mIEdlc3R1cmVIYW5kbGVyUm9vdFZpZXdcblxuXG5mdW5jdGlvbiBtYXliZUluaXRpYWxpemVGYWJyaWMoKSB7XG4gIGlmICgoMCwgX3V0aWxzLmlzRmFicmljKSgpICYmICFmYWJyaWNJbml0aWFsaXplZCkge1xuICAgIF9STkdlc3R1cmVIYW5kbGVyTW9kdWxlLmRlZmF1bHQuaW5zdGFsbCgpO1xuXG4gICAgZmFicmljSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluaXRpYWxpemUiLCJtYXliZUluaXRpYWxpemVGYWJyaWMiLCJfZXZlbnRSZWNlaXZlciIsInJlcXVpcmUiLCJfUk5HZXN0dXJlSGFuZGxlck1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdXRpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZhYnJpY0luaXRpYWxpemVkIiwic3RhcnRMaXN0ZW5pbmciLCJpc0ZhYnJpYyIsImluc3RhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/init.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/utils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toArray = toArray;\nexports.withPrevAndCurrent = withPrevAndCurrent;\nexports.hasProperty = hasProperty;\nexports.isJestEnv = isJestEnv;\nexports.tagMessage = tagMessage;\nexports.isFabric = isFabric;\nexports.shouldUseCodegenNativeComponent = shouldUseCodegenNativeComponent;\nexports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;\nexports.REACT_NATIVE_VERSION = void 0;\nvar _package = _interopRequireDefault(__webpack_require__(/*! react-native/package.json */ \"./node_modules/react-native/package.json\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst [majorStr, minorStr] = _package.default.version.split(\".\");\nconst REACT_NATIVE_VERSION = {\n    major: parseInt(majorStr, 10),\n    minor: parseInt(minorStr, 10)\n};\nexports.REACT_NATIVE_VERSION = REACT_NATIVE_VERSION;\nfunction toArray(object) {\n    if (!Array.isArray(object)) {\n        return [\n            object\n        ];\n    }\n    return object;\n}\nfunction withPrevAndCurrent(array, mapFn) {\n    const previousArr = [\n        null\n    ];\n    const currentArr = [\n        ...array\n    ];\n    const transformedArr = [];\n    currentArr.forEach((current, i)=>{\n        const previous = previousArr[i];\n        const transformed = mapFn(previous, current);\n        previousArr.push(transformed);\n        transformedArr.push(transformed);\n    });\n    return transformedArr;\n} // eslint-disable-next-line @typescript-eslint/ban-types\nfunction hasProperty(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\nfunction isJestEnv() {\n    // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n    return hasProperty(global, \"process\") && !!process.env.JEST_WORKER_ID;\n}\nfunction tagMessage(msg) {\n    return `[react-native-gesture-handler] ${msg}`;\n} // helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nfunction isFabric() {\n    var _global;\n    // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n    return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);\n}\nfunction shouldUseCodegenNativeComponent() {\n    // use codegenNativeComponent starting with RN 0.68\n    return REACT_NATIVE_VERSION.minor >= 68 || REACT_NATIVE_VERSION.major > 0;\n}\nfunction isRemoteDebuggingEnabled() {\n    // react-native-reanimated checks if in remote debugging in the same way\n    // @ts-ignore global is available but node types are not included\n    return !global.nativeCallSyncHook || global.__REMOTEDEV__;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGVBQWUsR0FBR0U7QUFDbEJGLDBCQUEwQixHQUFHRztBQUM3QkgsbUJBQW1CLEdBQUdJO0FBQ3RCSixpQkFBaUIsR0FBR0s7QUFDcEJMLGtCQUFrQixHQUFHTTtBQUNyQk4sZ0JBQWdCLEdBQUdPO0FBQ25CUCx1Q0FBdUMsR0FBR1E7QUFDMUNSLGdDQUFnQyxHQUFHUztBQUNuQ1QsNEJBQTRCLEdBQUcsS0FBSztBQUVwQyxJQUFJVyxXQUFXQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJFQUEyQjtBQUV6RSxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU0sQ0FBQ0csVUFBVUMsU0FBUyxHQUFHUCxTQUFTSyxPQUFPLENBQUNHLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDO0FBRTVELE1BQU1WLHVCQUF1QjtJQUMzQlcsT0FBT0MsU0FBU0wsVUFBVTtJQUMxQk0sT0FBT0QsU0FBU0osVUFBVTtBQUM1QjtBQUNBbEIsNEJBQTRCLEdBQUdVO0FBRS9CLFNBQVNSLFFBQVFzQixNQUFNO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTO1FBQzFCLE9BQU87WUFBQ0E7U0FBTztJQUNqQjtJQUVBLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTckIsbUJBQW1Cd0IsS0FBSyxFQUFFQyxLQUFLO0lBQ3RDLE1BQU1DLGNBQWM7UUFBQztLQUFLO0lBQzFCLE1BQU1DLGFBQWE7V0FBSUg7S0FBTTtJQUM3QixNQUFNSSxpQkFBaUIsRUFBRTtJQUN6QkQsV0FBV0UsT0FBTyxDQUFDLENBQUNDLFNBQVNDO1FBQzNCLE1BQU1DLFdBQVdOLFdBQVcsQ0FBQ0ssRUFBRTtRQUMvQixNQUFNRSxjQUFjUixNQUFNTyxVQUFVRjtRQUNwQ0osWUFBWVEsSUFBSSxDQUFDRDtRQUNqQkwsZUFBZU0sSUFBSSxDQUFDRDtJQUN0QjtJQUNBLE9BQU9MO0FBQ1QsRUFBRSx3REFBd0Q7QUFHMUQsU0FBUzNCLFlBQVlvQixNQUFNLEVBQUVjLEdBQUc7SUFDOUIsT0FBT3hDLE9BQU95QyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDakIsUUFBUWM7QUFDdEQ7QUFFQSxTQUFTakM7SUFDUCw0SkFBNEo7SUFDNUosT0FBT0QsWUFBWXNDLFFBQVEsY0FBYyxDQUFDLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUN2RTtBQUVBLFNBQVN2QyxXQUFXd0MsR0FBRztJQUNyQixPQUFPLENBQUMsK0JBQStCLEVBQUVBLElBQUksQ0FBQztBQUNoRCxFQUFFLHlGQUF5RjtBQUMzRixpREFBaUQ7QUFHakQsU0FBU3ZDO0lBQ1AsSUFBSXdDO0lBRUosNkVBQTZFO0lBQzdFLE9BQU8sQ0FBQyxDQUFFLEVBQUNBLFVBQVVMLE1BQUssTUFBTyxRQUFRSyxZQUFZLEtBQUssS0FBS0EsUUFBUUMscUJBQXFCO0FBQzlGO0FBRUEsU0FBU3hDO0lBQ1AsbURBQW1EO0lBQ25ELE9BQU9FLHFCQUFxQmEsS0FBSyxJQUFJLE1BQU1iLHFCQUFxQlcsS0FBSyxHQUFHO0FBQzFFO0FBRUEsU0FBU1o7SUFDUCx3RUFBd0U7SUFDeEUsaUVBQWlFO0lBQ2pFLE9BQU8sQ0FBQ2lDLE9BQU9PLGtCQUFrQixJQUFJUCxPQUFPUSxhQUFhO0FBQzNELEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3V0aWxzLmpzP2VhZGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuZXhwb3J0cy53aXRoUHJldkFuZEN1cnJlbnQgPSB3aXRoUHJldkFuZEN1cnJlbnQ7XG5leHBvcnRzLmhhc1Byb3BlcnR5ID0gaGFzUHJvcGVydHk7XG5leHBvcnRzLmlzSmVzdEVudiA9IGlzSmVzdEVudjtcbmV4cG9ydHMudGFnTWVzc2FnZSA9IHRhZ01lc3NhZ2U7XG5leHBvcnRzLmlzRmFicmljID0gaXNGYWJyaWM7XG5leHBvcnRzLnNob3VsZFVzZUNvZGVnZW5OYXRpdmVDb21wb25lbnQgPSBzaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50O1xuZXhwb3J0cy5pc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQgPSBpc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQ7XG5leHBvcnRzLlJFQUNUX05BVElWRV9WRVJTSU9OID0gdm9pZCAwO1xuXG52YXIgX3BhY2thZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1uYXRpdmUvcGFja2FnZS5qc29uXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgW21ham9yU3RyLCBtaW5vclN0cl0gPSBfcGFja2FnZS5kZWZhdWx0LnZlcnNpb24uc3BsaXQoJy4nKTtcblxuY29uc3QgUkVBQ1RfTkFUSVZFX1ZFUlNJT04gPSB7XG4gIG1ham9yOiBwYXJzZUludChtYWpvclN0ciwgMTApLFxuICBtaW5vcjogcGFyc2VJbnQobWlub3JTdHIsIDEwKVxufTtcbmV4cG9ydHMuUkVBQ1RfTkFUSVZFX1ZFUlNJT04gPSBSRUFDVF9OQVRJVkVfVkVSU0lPTjtcblxuZnVuY3Rpb24gdG9BcnJheShvYmplY3QpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICByZXR1cm4gW29iamVjdF07XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiB3aXRoUHJldkFuZEN1cnJlbnQoYXJyYXksIG1hcEZuKSB7XG4gIGNvbnN0IHByZXZpb3VzQXJyID0gW251bGxdO1xuICBjb25zdCBjdXJyZW50QXJyID0gWy4uLmFycmF5XTtcbiAgY29uc3QgdHJhbnNmb3JtZWRBcnIgPSBbXTtcbiAgY3VycmVudEFyci5mb3JFYWNoKChjdXJyZW50LCBpKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXMgPSBwcmV2aW91c0FycltpXTtcbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IG1hcEZuKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICBwcmV2aW91c0Fyci5wdXNoKHRyYW5zZm9ybWVkKTtcbiAgICB0cmFuc2Zvcm1lZEFyci5wdXNoKHRyYW5zZm9ybWVkKTtcbiAgfSk7XG4gIHJldHVybiB0cmFuc2Zvcm1lZEFycjtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcblxuXG5mdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmplY3QsIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxuZnVuY3Rpb24gaXNKZXN0RW52KCkge1xuICAvLyBAdHMtaWdub3JlIERvIG5vdCB1c2UgYEB0eXBlcy9ub2RlYCBiZWNhdXNlIGl0IHdpbGwgcHJpb3JpdGlzZSBOb2RlIHR5cGVzIG92ZXIgUk4gdHlwZXMgd2hpY2ggYnJlYWtzIHRoZSB0eXBlcyAoZXguIHNldFRpbWVvdXQpIGluIFJlYWN0IE5hdGl2ZSBwcm9qZWN0cy5cbiAgcmV0dXJuIGhhc1Byb3BlcnR5KGdsb2JhbCwgJ3Byb2Nlc3MnKSAmJiAhIXByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEO1xufVxuXG5mdW5jdGlvbiB0YWdNZXNzYWdlKG1zZykge1xuICByZXR1cm4gYFtyZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyXSAke21zZ31gO1xufSAvLyBoZWxwZXIgbWV0aG9kIHRvIGNoZWNrIHdoZXRoZXIgRmFicmljIGlzIGVuYWJsZWQsIGhvd2V2ZXIgZ2xvYmFsLm5hdGl2ZUZhYnJpY1VJTWFuYWdlclxuLy8gbWF5IG5vdCBiZSBpbml0aWFsaXplZCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlclxuXG5cbmZ1bmN0aW9uIGlzRmFicmljKCkge1xuICB2YXIgX2dsb2JhbDtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5hdGl2ZUZhYnJpY1VJTWFuYWdlciBpcyBub3QgeWV0IGluY2x1ZGVkIGluIHRoZSBSTiB0eXBlc1xuICByZXR1cm4gISEoKF9nbG9iYWwgPSBnbG9iYWwpICE9PSBudWxsICYmIF9nbG9iYWwgIT09IHZvaWQgMCAmJiBfZ2xvYmFsLm5hdGl2ZUZhYnJpY1VJTWFuYWdlcik7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZUNvZGVnZW5OYXRpdmVDb21wb25lbnQoKSB7XG4gIC8vIHVzZSBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IHN0YXJ0aW5nIHdpdGggUk4gMC42OFxuICByZXR1cm4gUkVBQ1RfTkFUSVZFX1ZFUlNJT04ubWlub3IgPj0gNjggfHwgUkVBQ1RfTkFUSVZFX1ZFUlNJT04ubWFqb3IgPiAwO1xufVxuXG5mdW5jdGlvbiBpc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQoKSB7XG4gIC8vIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkIGNoZWNrcyBpZiBpbiByZW1vdGUgZGVidWdnaW5nIGluIHRoZSBzYW1lIHdheVxuICAvLyBAdHMtaWdub3JlIGdsb2JhbCBpcyBhdmFpbGFibGUgYnV0IG5vZGUgdHlwZXMgYXJlIG5vdCBpbmNsdWRlZFxuICByZXR1cm4gIWdsb2JhbC5uYXRpdmVDYWxsU3luY0hvb2sgfHwgZ2xvYmFsLl9fUkVNT1RFREVWX187XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0b0FycmF5Iiwid2l0aFByZXZBbmRDdXJyZW50IiwiaGFzUHJvcGVydHkiLCJpc0plc3RFbnYiLCJ0YWdNZXNzYWdlIiwiaXNGYWJyaWMiLCJzaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50IiwiaXNSZW1vdGVEZWJ1Z2dpbmdFbmFibGVkIiwiUkVBQ1RfTkFUSVZFX1ZFUlNJT04iLCJfcGFja2FnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtYWpvclN0ciIsIm1pbm9yU3RyIiwidmVyc2lvbiIsInNwbGl0IiwibWFqb3IiLCJwYXJzZUludCIsIm1pbm9yIiwib2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXkiLCJtYXBGbiIsInByZXZpb3VzQXJyIiwiY3VycmVudEFyciIsInRyYW5zZm9ybWVkQXJyIiwiZm9yRWFjaCIsImN1cnJlbnQiLCJpIiwicHJldmlvdXMiLCJ0cmFuc2Zvcm1lZCIsInB1c2giLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnbG9iYWwiLCJwcm9jZXNzIiwiZW52IiwiSkVTVF9XT1JLRVJfSUQiLCJtc2ciLCJfZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIiwibmF0aXZlQ2FsbFN5bmNIb29rIiwiX19SRU1PVEVERVZfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Direction = exports.DEFAULT_TOUCH_SLOP = void 0;\nconst DEFAULT_TOUCH_SLOP = 15;\nexports.DEFAULT_TOUCH_SLOP = DEFAULT_TOUCH_SLOP;\nconst Direction = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n};\nexports.Direction = Direction; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsaUJBQWlCLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDdEQsTUFBTUcscUJBQXFCO0FBQzNCSCwwQkFBMEIsR0FBR0c7QUFDN0IsTUFBTUQsWUFBWTtJQUNoQkUsT0FBTztJQUNQQyxNQUFNO0lBQ05DLElBQUk7SUFDSkMsTUFBTTtBQUNSO0FBQ0FQLGlCQUFpQixHQUFHRSxXQUNwQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2NvbnN0YW50cy5qcz9hYTgzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EaXJlY3Rpb24gPSBleHBvcnRzLkRFRkFVTFRfVE9VQ0hfU0xPUCA9IHZvaWQgMDtcbmNvbnN0IERFRkFVTFRfVE9VQ0hfU0xPUCA9IDE1O1xuZXhwb3J0cy5ERUZBVUxUX1RPVUNIX1NMT1AgPSBERUZBVUxUX1RPVUNIX1NMT1A7XG5jb25zdCBEaXJlY3Rpb24gPSB7XG4gIFJJR0hUOiAxLFxuICBMRUZUOiAyLFxuICBVUDogNCxcbiAgRE9XTjogOFxufTtcbmV4cG9ydHMuRGlyZWN0aW9uID0gRGlyZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRpcmVjdGlvbiIsIkRFRkFVTFRfVE9VQ0hfU0xPUCIsIlJJR0hUIiwiTEVGVCIsIlVQIiwiRE9XTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass RotationGestureDetector {\n    constructor(callbacks){\n        _defineProperty(this, \"onRotationBegin\", void 0);\n        _defineProperty(this, \"onRotation\", void 0);\n        _defineProperty(this, \"onRotationEnd\", void 0);\n        _defineProperty(this, \"currentTime\", 0);\n        _defineProperty(this, \"previousTime\", 0);\n        _defineProperty(this, \"previousAngle\", 0);\n        _defineProperty(this, \"rotation\", 0);\n        _defineProperty(this, \"anchorX\", 0);\n        _defineProperty(this, \"anchorY\", 0);\n        _defineProperty(this, \"isInProgress\", false);\n        _defineProperty(this, \"keyPointers\", [\n            NaN,\n            NaN\n        ]);\n        this.onRotationBegin = callbacks.onRotationBegin;\n        this.onRotation = callbacks.onRotation;\n        this.onRotationEnd = callbacks.onRotationEnd;\n    }\n    updateCurrent(event, tracker) {\n        this.previousTime = this.currentTime;\n        this.currentTime = event.time;\n        const [firstPointerID, secondPointerID] = this.keyPointers;\n        const firstPointerX = tracker.getLastX(firstPointerID);\n        const firstPointerY = tracker.getLastY(firstPointerID);\n        const secondPointerX = tracker.getLastX(secondPointerID);\n        const secondPointerY = tracker.getLastY(secondPointerID);\n        const vectorX = secondPointerX - firstPointerX;\n        const vectorY = secondPointerY - firstPointerY;\n        this.anchorX = (firstPointerX + secondPointerX) / 2;\n        this.anchorY = (firstPointerY + secondPointerY) / 2; //Angle diff should be positive when rotating in clockwise direction\n        const angle = -Math.atan2(vectorY, vectorX);\n        this.rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n        this.previousAngle = angle;\n        if (this.rotation > Math.PI) {\n            this.rotation -= Math.PI;\n        } else if (this.rotation < -Math.PI) {\n            this.rotation += Math.PI;\n        }\n        if (this.rotation > Math.PI / 2) {\n            this.rotation -= Math.PI;\n        } else if (this.rotation < -Math.PI / 2) {\n            this.rotation += Math.PI;\n        }\n    }\n    finish() {\n        if (!this.isInProgress) {\n            return;\n        }\n        this.isInProgress = false;\n        this.keyPointers = [\n            NaN,\n            NaN\n        ];\n        this.onRotationEnd(this);\n    }\n    setKeyPointers(tracker) {\n        if (this.keyPointers[0] && this.keyPointers[1]) {\n            return;\n        }\n        const pointerIDs = tracker.getData().keys();\n        this.keyPointers[0] = pointerIDs.next().value;\n        this.keyPointers[1] = pointerIDs.next().value;\n    }\n    onTouchEvent(event, tracker) {\n        switch(event.eventType){\n            case _interfaces.EventTypes.DOWN:\n                this.isInProgress = false;\n                break;\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN:\n                if (this.isInProgress) {\n                    break;\n                }\n                this.isInProgress = true;\n                this.previousTime = event.time;\n                this.previousAngle = NaN;\n                this.setKeyPointers(tracker);\n                this.updateCurrent(event, tracker);\n                this.onRotationBegin(this);\n                break;\n            case _interfaces.EventTypes.MOVE:\n                if (!this.isInProgress) {\n                    break;\n                }\n                this.updateCurrent(event, tracker);\n                this.onRotation(this);\n                break;\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_UP:\n                if (!this.isInProgress) {\n                    break;\n                }\n                if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n                    this.finish();\n                }\n                break;\n            case _interfaces.EventTypes.UP:\n                if (this.isInProgress) {\n                    this.finish();\n                }\n                break;\n        }\n        return true;\n    }\n    getTimeDelta() {\n        return this.currentTime + this.previousTime;\n    }\n    getAnchorX() {\n        return this.anchorX;\n    }\n    getAnchorY() {\n        return this.anchorY;\n    }\n    getRotation() {\n        return this.rotation;\n    }\n    reset() {\n        this.keyPointers = [\n            NaN,\n            NaN\n        ];\n        this.isInProgress = false;\n    }\n}\nexports[\"default\"] = RotationGestureDetector; //# sourceMappingURL=RotationGestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass ScaleGestureDetector {\n    constructor(callbacks){\n        _defineProperty(this, \"onScaleBegin\", void 0);\n        _defineProperty(this, \"onScale\", void 0);\n        _defineProperty(this, \"onScaleEnd\", void 0);\n        _defineProperty(this, \"focusX\", void 0);\n        _defineProperty(this, \"focusY\", void 0);\n        _defineProperty(this, \"currentSpan\", void 0);\n        _defineProperty(this, \"prevSpan\", void 0);\n        _defineProperty(this, \"initialSpan\", void 0);\n        _defineProperty(this, \"currentTime\", void 0);\n        _defineProperty(this, \"prevTime\", void 0);\n        _defineProperty(this, \"inProgress\", false);\n        _defineProperty(this, \"spanSlop\", void 0);\n        _defineProperty(this, \"minSpan\", void 0);\n        this.onScaleBegin = callbacks.onScaleBegin;\n        this.onScale = callbacks.onScale;\n        this.onScaleEnd = callbacks.onScaleEnd;\n        this.spanSlop = _constants.DEFAULT_TOUCH_SLOP * 2;\n        this.minSpan = 0;\n    }\n    onTouchEvent(event, tracker) {\n        this.currentTime = event.time;\n        const action = event.eventType;\n        const numOfPointers = tracker.getTrackedPointersCount();\n        const streamComplete = action === _interfaces.EventTypes.UP || action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP || action === _interfaces.EventTypes.CANCEL;\n        if (action === _interfaces.EventTypes.DOWN || streamComplete) {\n            if (this.inProgress) {\n                this.onScaleEnd(this);\n                this.inProgress = false;\n                this.initialSpan = 0;\n            }\n            if (streamComplete) {\n                return true;\n            }\n        }\n        const configChanged = action === _interfaces.EventTypes.DOWN || action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP || action === _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n        const pointerUp = action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n        const ignoredPointer = pointerUp ? event.pointerId : undefined; //Determine focal point\n        const div = pointerUp ? numOfPointers - 1 : numOfPointers;\n        const sumX = tracker.getSumX(ignoredPointer);\n        const sumY = tracker.getSumY(ignoredPointer);\n        const focusX = sumX / div;\n        const focusY = sumY / div; //Determine average deviation from focal point\n        let devSumX = 0;\n        let devSumY = 0;\n        tracker.getData().forEach((value, key)=>{\n            if (key === ignoredPointer) {\n                return;\n            }\n            devSumX += Math.abs(value.lastX - focusX);\n            devSumY += Math.abs(value.lastY - focusY);\n        });\n        const devX = devSumX / div;\n        const devY = devSumY / div;\n        const spanX = devX * 2;\n        const spanY = devY * 2;\n        const span = Math.hypot(spanX, spanY); //Begin/end events\n        const wasInProgress = this.inProgress;\n        this.focusX = focusX;\n        this.focusY = focusY;\n        if (this.inProgress && (span < this.minSpan || configChanged)) {\n            this.onScaleEnd(this);\n            this.inProgress = false;\n            this.initialSpan = span;\n        }\n        if (configChanged) {\n            this.initialSpan = this.prevSpan = this.currentSpan = span;\n        }\n        if (!this.inProgress && span >= this.minSpan && (wasInProgress || Math.abs(span - this.initialSpan) > this.spanSlop)) {\n            this.prevSpan = this.currentSpan = span;\n            this.prevTime = this.currentTime;\n            this.inProgress = this.onScaleBegin(this);\n        } //Handle motion\n        if (action !== _interfaces.EventTypes.MOVE) {\n            return true;\n        }\n        this.currentSpan = span;\n        if (this.inProgress && !this.onScale(this)) {\n            return true;\n        }\n        this.prevSpan = this.currentSpan;\n        this.prevTime = this.currentTime;\n        return true;\n    }\n    getCurrentSpan() {\n        return this.currentSpan;\n    }\n    getFocusX() {\n        return this.focusX;\n    }\n    getFocusY() {\n        return this.focusY;\n    }\n    getTimeDelta() {\n        return this.currentTime - this.prevTime;\n    }\n    getScaleFactor(numOfPointers) {\n        if (numOfPointers < 2) {\n            return 1;\n        }\n        return this.prevSpan > 0 ? this.currentSpan / this.prevSpan : 1;\n    }\n}\nexports[\"default\"] = ScaleGestureDetector; //# sourceMappingURL=ScaleGestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MAX_DURATION_MS = 800;\nconst DEFAULT_MIN_ACCEPTABLE_DELTA = 160;\nconst DEFAULT_DIRECTION = _constants.Direction.RIGHT;\nconst DEFAULT_NUMBER_OF_TOUCHES_REQUIRED = 1;\nclass FlingGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"numberOfPointersRequired\", DEFAULT_NUMBER_OF_TOUCHES_REQUIRED);\n        _defineProperty(this, \"direction\", DEFAULT_DIRECTION);\n        _defineProperty(this, \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n        _defineProperty(this, \"minAcceptableDelta\", DEFAULT_MIN_ACCEPTABLE_DELTA);\n        _defineProperty(this, \"delayTimeout\", void 0);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"maxNumberOfPointersSimultaneously\", 0);\n        _defineProperty(this, \"keyPointer\", NaN);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.direction) {\n            this.direction = this.config.direction;\n        }\n        if (this.config.numberOfPointers) {\n            this.numberOfPointersRequired = this.config.numberOfPointers;\n        }\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY()\n        };\n    }\n    startFling() {\n        this.startX = this.tracker.getLastX(this.keyPointer);\n        this.startY = this.tracker.getLastY(this.keyPointer);\n        this.begin();\n        this.maxNumberOfPointersSimultaneously = 1;\n        this.delayTimeout = setTimeout(()=>this.fail(), this.maxDurationMs);\n    }\n    tryEndFling() {\n        if (this.maxNumberOfPointersSimultaneously === this.numberOfPointersRequired && (this.direction & _constants.Direction.RIGHT && this.tracker.getLastX(this.keyPointer) - this.startX > this.minAcceptableDelta || this.direction & _constants.Direction.LEFT && this.startX - this.tracker.getLastX(this.keyPointer) > this.minAcceptableDelta || this.direction & _constants.Direction.UP && this.startY - this.tracker.getLastY(this.keyPointer) > this.minAcceptableDelta || this.direction & _constants.Direction.DOWN && this.tracker.getLastY(this.keyPointer) - this.startY > this.minAcceptableDelta)) {\n            clearTimeout(this.delayTimeout);\n            this.activate();\n            return true;\n        }\n        return false;\n    }\n    endFling() {\n        if (!this.tryEndFling()) {\n            this.fail();\n        }\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        this.keyPointer = event.pointerId;\n        super.onPointerDown(event);\n        this.newPointerAction();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.newPointerAction();\n    }\n    newPointerAction() {\n        if (this.currentState === _State.State.UNDETERMINED) {\n            this.startFling();\n        }\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.tryEndFling();\n        if (this.tracker.getTrackedPointersCount() > this.maxNumberOfPointersSimultaneously) {\n            this.maxNumberOfPointersSimultaneously = this.tracker.getTrackedPointersCount();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.tryEndFling();\n        super.onPointerMove(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.onUp(event);\n        this.keyPointer = NaN;\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.onUp(event);\n    }\n    onUp(event) {\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.endFling();\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    activate(force) {\n        super.activate(force);\n        this.end();\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.numberOfPointersRequired = DEFAULT_NUMBER_OF_TOUCHES_REQUIRED;\n        this.direction = DEFAULT_DIRECTION;\n    }\n}\nexports[\"default\"] = FlingGestureHandler; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _GestureHandlerOrchestrator = _interopRequireDefault(__webpack_require__(/*! ../tools/GestureHandlerOrchestrator */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js\"));\nvar _InteractionManager = _interopRequireDefault(__webpack_require__(/*! ../tools/InteractionManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\"));\nvar _PointerEventManager = _interopRequireDefault(__webpack_require__(/*! ../tools/PointerEventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js\"));\nvar _PointerTracker = _interopRequireDefault(__webpack_require__(/*! ../tools/PointerTracker */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\"));\nvar _TouchEventManager = _interopRequireDefault(__webpack_require__(/*! ../tools/TouchEventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass GestureHandler {\n    // Orchestrator properties\n    constructor(){\n        _defineProperty(this, \"lastSentState\", null);\n        _defineProperty(this, \"currentState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"shouldCancellWhenOutside\", false);\n        _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n        _defineProperty(this, \"enabled\", false);\n        _defineProperty(this, \"ref\", void 0);\n        _defineProperty(this, \"propsRef\", void 0);\n        _defineProperty(this, \"handlerTag\", void 0);\n        _defineProperty(this, \"config\", {\n            enabled: false\n        });\n        _defineProperty(this, \"view\", void 0);\n        _defineProperty(this, \"eventManagers\", []);\n        _defineProperty(this, \"tracker\", new _PointerTracker.default());\n        _defineProperty(this, \"activationIndex\", 0);\n        _defineProperty(this, \"awaiting\", false);\n        _defineProperty(this, \"active\", false);\n        _defineProperty(this, \"shouldResetProgress\", false);\n        _defineProperty(this, \"pointerType\", _interfaces.PointerType.NONE);\n        _defineProperty(this, \"sendEvent\", (newState, oldState)=>{\n            const { onGestureHandlerEvent, onGestureHandlerStateChange } = this.propsRef.current;\n            const resultEvent = this.transformEventData(newState, oldState); // In the new API oldState field has to be undefined, unless we send event state changed\n            // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n            // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n            // However, this may cause trouble in the future (but for now we don't know that)\n            if (this.lastSentState !== newState) {\n                this.lastSentState = newState;\n                invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n            }\n            if (this.currentState === _State.State.ACTIVE) {\n                resultEvent.nativeEvent.oldState = undefined;\n                invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n            }\n        });\n        this.hasCustomActivationCriteria = false;\n    }\n    // Initializing handler\n    //\n    init(ref, propsRef) {\n        this.propsRef = propsRef;\n        this.ref = ref;\n        this.currentState = _State.State.UNDETERMINED;\n        this.setView();\n        this.addEventManager(new _PointerEventManager.default(this.view));\n        this.addEventManager(new _TouchEventManager.default(this.view));\n    }\n    setView() {\n        if (!this.ref) {\n            throw new Error(`Cannot find HTML Element for handler ${this.handlerTag}`);\n        }\n        this.view = (0, _reactNative.findNodeHandle)(this.ref);\n        this.view.style[\"touchAction\"] = \"none\"; //@ts-ignore This one disables default events on Safari\n        this.view.style[\"WebkitTouchCallout\"] = \"none\";\n        if (!this.config.userSelect) {\n            this.view.style[\"webkitUserSelect\"] = \"none\";\n            this.view.style[\"userSelect\"] = \"none\";\n        } else {\n            this.view.style[\"webkitUserSelect\"] = this.config.userSelect;\n            this.view.style[\"userSelect\"] = this.config.userSelect;\n        }\n    }\n    addEventManager(manager) {\n        manager.setOnPointerDown(this.onPointerDown.bind(this));\n        manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n        manager.setOnPointerUp(this.onPointerUp.bind(this));\n        manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n        manager.setOnPointerMove(this.onPointerMove.bind(this));\n        manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n        manager.setOnPointerOut(this.onPointerOut.bind(this));\n        manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n        manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n        manager.setListeners();\n        this.eventManagers.push(manager);\n    }\n    // Resetting handler\n    //\n    onCancel() {}\n    onReset() {}\n    resetProgress() {}\n    reset() {\n        this.tracker.resetTracker();\n        this.onReset();\n        this.resetProgress();\n        this.eventManagers.forEach((manager)=>manager.resetManager());\n        this.currentState = _State.State.UNDETERMINED;\n    }\n    // State logic\n    //\n    moveToState(newState, sendIfDisabled) {\n        if (this.currentState === newState) {\n            return;\n        }\n        const oldState = this.currentState;\n        this.currentState = newState;\n        if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n            this.cancelTouches();\n        }\n        _GestureHandlerOrchestrator.default.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n        this.onStateChange(newState, oldState);\n    }\n    onStateChange(_newState, _oldState) {}\n    begin() {\n        if (!this.checkHitSlop()) {\n            return;\n        }\n        if (this.currentState === _State.State.UNDETERMINED) {\n            this.moveToState(_State.State.BEGAN);\n        }\n    }\n    /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */ fail(sendIfDisabled) {\n        if (this.currentState === _State.State.ACTIVE || this.currentState === _State.State.BEGAN) {\n            this.moveToState(_State.State.FAILED, sendIfDisabled);\n            this.view.style.cursor = \"auto\";\n        }\n        this.resetProgress();\n    }\n    /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */ cancel(sendIfDisabled) {\n        if (this.currentState === _State.State.ACTIVE || this.currentState === _State.State.UNDETERMINED || this.currentState === _State.State.BEGAN) {\n            this.onCancel();\n            this.moveToState(_State.State.CANCELLED, sendIfDisabled);\n            this.view.style.cursor = \"auto\";\n        }\n    }\n    activate(_force = false) {\n        if (this.currentState === _State.State.UNDETERMINED || this.currentState === _State.State.BEGAN) {\n            this.moveToState(_State.State.ACTIVE);\n            this.view.style.cursor = \"grab\";\n        }\n    }\n    end() {\n        if (this.currentState === _State.State.BEGAN || this.currentState === _State.State.ACTIVE) {\n            this.moveToState(_State.State.END);\n            this.view.style.cursor = \"auto\";\n        }\n        this.resetProgress();\n    }\n    // Methods for orchestrator\n    //\n    isAwaiting() {\n        return this.awaiting;\n    }\n    setAwaiting(value) {\n        this.awaiting = value;\n    }\n    isActive() {\n        return this.active;\n    }\n    setActive(value) {\n        this.active = value;\n    }\n    getShouldResetProgress() {\n        return this.shouldResetProgress;\n    }\n    setShouldResetProgress(value) {\n        this.shouldResetProgress = value;\n    }\n    getActivationIndex() {\n        return this.activationIndex;\n    }\n    setActivationIndex(value) {\n        this.activationIndex = value;\n    }\n    shouldWaitForHandlerFailure(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n    shouldRequireToWaitForFailure(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n    shouldRecognizeSimultaneously(handler) {\n        if (handler === this) {\n            return true;\n        }\n        return _InteractionManager.default.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n    shouldBeCancelledByOther(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n    // Event actions\n    //\n    onPointerDown(event) {\n        _GestureHandlerOrchestrator.default.getInstance().recordHandlerIfNotPresent(this);\n        this.pointerType = event.pointerType;\n        if (this.pointerType === _interfaces.PointerType.TOUCH) {\n            _GestureHandlerOrchestrator.default.getInstance().cancelMouseAndPenGestures(this);\n        }\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerAdd(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerUp(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerRemove(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerMove(event) {\n        this.tryToSendMoveEvent(false);\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerOut(event) {\n        if (this.shouldCancellWhenOutside) {\n            switch(this.currentState){\n                case _State.State.ACTIVE:\n                    this.cancel();\n                    break;\n                case _State.State.BEGAN:\n                    this.fail();\n                    break;\n            }\n            return;\n        }\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerEnter(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerCancel(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerOutOfBounds(event) {\n        this.tryToSendMoveEvent(true);\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    tryToSendMoveEvent(out) {\n        if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n            this.sendEvent(this.currentState, this.currentState);\n        }\n    }\n    sendTouchEvent(event) {\n        if (!this.enabled) {\n            return;\n        }\n        const { onGestureHandlerEvent } = this.propsRef.current;\n        const touchEvent = this.transformTouchEvent(event);\n        if (touchEvent) {\n            invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n        }\n    }\n    // Events Sending\n    //\n    transformEventData(newState, oldState) {\n        return {\n            nativeEvent: {\n                numberOfPointers: this.tracker.getTrackedPointersCount(),\n                state: newState,\n                pointerInside: (0, _utils.isPointerInBounds)(this.view, {\n                    x: this.tracker.getLastAvgX(),\n                    y: this.tracker.getLastAvgY()\n                }),\n                ...this.transformNativeEvent(),\n                handlerTag: this.handlerTag,\n                target: this.ref,\n                oldState: newState !== oldState ? oldState : undefined\n            },\n            timeStamp: Date.now()\n        };\n    }\n    transformTouchEvent(event) {\n        var _event$touchEventType;\n        const rect = this.view.getBoundingClientRect();\n        const all = [];\n        const changed = [];\n        const trackerData = this.tracker.getData(); // This if handles edge case where all pointers have been cancelled\n        // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n        // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n        // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n        if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n            return;\n        }\n        trackerData.forEach((element, key)=>{\n            const id = this.tracker.getMappedTouchEventId(key);\n            all.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n        }); // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n        // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n        if (event.eventType !== _interfaces.EventTypes.CANCEL) {\n            changed.push({\n                id: this.tracker.getMappedTouchEventId(event.pointerId),\n                x: event.x - rect.left,\n                y: event.y - rect.top,\n                absoluteX: event.x,\n                absoluteY: event.y\n            });\n        } else {\n            trackerData.forEach((element, key)=>{\n                const id = this.tracker.getMappedTouchEventId(key);\n                changed.push({\n                    id: id,\n                    x: element.lastX - rect.left,\n                    y: element.lastY - rect.top,\n                    absoluteX: element.lastX,\n                    absoluteY: element.lastY\n                });\n            });\n        }\n        let eventType = _interfaces.TouchEventType.UNDETERMINED;\n        switch(event.eventType){\n            case _interfaces.EventTypes.DOWN:\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN:\n                eventType = _interfaces.TouchEventType.DOWN;\n                break;\n            case _interfaces.EventTypes.UP:\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_UP:\n                eventType = _interfaces.TouchEventType.UP;\n                break;\n            case _interfaces.EventTypes.MOVE:\n                eventType = _interfaces.TouchEventType.MOVE;\n                break;\n            case _interfaces.EventTypes.CANCEL:\n                eventType = _interfaces.TouchEventType.CANCELLED;\n                break;\n        } // Here, when we receive up event, we want to decrease number of touches\n        // That's because we want handler to send information that there's one pointer less\n        // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n        let numberOfTouches = all.length;\n        if (event.eventType === _interfaces.EventTypes.UP || event.eventType === _interfaces.EventTypes.ADDITIONAL_POINTER_UP) {\n            --numberOfTouches;\n        }\n        return {\n            nativeEvent: {\n                handlerTag: this.handlerTag,\n                state: this.currentState,\n                eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n                changedTouches: changed,\n                allTouches: all,\n                numberOfTouches: numberOfTouches\n            },\n            timeStamp: Date.now()\n        };\n    }\n    cancelTouches() {\n        const rect = this.view.getBoundingClientRect();\n        const all = [];\n        const changed = [];\n        const trackerData = this.tracker.getData();\n        if (trackerData.size === 0) {\n            return;\n        }\n        trackerData.forEach((element, key)=>{\n            const id = this.tracker.getMappedTouchEventId(key);\n            all.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n            changed.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n        });\n        const cancelEvent = {\n            nativeEvent: {\n                handlerTag: this.handlerTag,\n                state: this.currentState,\n                eventType: _interfaces.TouchEventType.CANCELLED,\n                changedTouches: changed,\n                allTouches: all,\n                numberOfTouches: all.length\n            },\n            timeStamp: Date.now()\n        };\n        const { onGestureHandlerEvent } = this.propsRef.current;\n        invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n    transformNativeEvent() {\n        return {};\n    }\n    // Handling config\n    //\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.config = {\n            enabled: enabled,\n            ...props\n        };\n        this.enabled = enabled;\n        if (this.config.shouldCancelWhenOutside !== undefined) {\n            this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n        }\n        this.validateHitSlops();\n        if (this.enabled) {\n            return;\n        }\n        switch(this.currentState){\n            case _State.State.ACTIVE:\n                this.fail(true);\n                break;\n            case _State.State.UNDETERMINED:\n                _GestureHandlerOrchestrator.default.getInstance().removeHandlerFromOrchestrator(this);\n                break;\n            default:\n                this.cancel(true);\n                break;\n        }\n    }\n    checkCustomActivationCriteria(criterias) {\n        for(const key in this.config){\n            if (criterias.indexOf(key) >= 0) {\n                this.hasCustomActivationCriteria = true;\n            }\n        }\n    }\n    validateHitSlops() {\n        if (!this.config.hitSlop) {\n            return;\n        }\n        if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n            throw new Error(\"HitSlop Error: Cannot define left, right and width at the same time\");\n        }\n        if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n            throw new Error(\"HitSlop Error: When width is defined, either left or right has to be defined\");\n        }\n        if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n            throw new Error(\"HitSlop Error: Cannot define top, bottom and height at the same time\");\n        }\n        if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n            throw new Error(\"HitSlop Error: When height is defined, either top or bottom has to be defined\");\n        }\n    }\n    checkHitSlop() {\n        if (!this.config.hitSlop) {\n            return true;\n        }\n        const width = this.view.getBoundingClientRect().width;\n        const height = this.view.getBoundingClientRect().height;\n        let left = 0;\n        let top = 0;\n        let right = width;\n        let bottom = height;\n        if (this.config.hitSlop.horizontal !== undefined) {\n            left -= this.config.hitSlop.horizontal;\n            right += this.config.hitSlop.horizontal;\n        }\n        if (this.config.hitSlop.vertical !== undefined) {\n            top -= this.config.hitSlop.vertical;\n            bottom += this.config.hitSlop.vertical;\n        }\n        if (this.config.hitSlop.left !== undefined) {\n            left = -this.config.hitSlop.left;\n        }\n        if (this.config.hitSlop.right !== undefined) {\n            right = width + this.config.hitSlop.right;\n        }\n        if (this.config.hitSlop.top !== undefined) {\n            top = -this.config.hitSlop.top;\n        }\n        if (this.config.hitSlop.bottom !== undefined) {\n            bottom = width + this.config.hitSlop.bottom;\n        }\n        if (this.config.hitSlop.width !== undefined) {\n            if (this.config.hitSlop.left !== undefined) {\n                right = left + this.config.hitSlop.width;\n            } else if (this.config.hitSlop.right !== undefined) {\n                left = right - this.config.hitSlop.width;\n            }\n        }\n        if (this.config.hitSlop.height !== undefined) {\n            if (this.config.hitSlop.top !== undefined) {\n                bottom = top + this.config.hitSlop.height;\n            } else if (this.config.hitSlop.bottom !== undefined) {\n                top = bottom - this.config.hitSlop.height;\n            }\n        }\n        const rect = this.view.getBoundingClientRect();\n        const offsetX = this.tracker.getLastX() - rect.left;\n        const offsetY = this.tracker.getLastY() - rect.top;\n        if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n            return true;\n        }\n        return false;\n    }\n    isPointerInBounds({ x, y }) {\n        const rect = this.view.getBoundingClientRect();\n        return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n    resetConfig() {}\n    // Getters and setters\n    //\n    getTag() {\n        return this.handlerTag;\n    }\n    setTag(tag) {\n        this.handlerTag = tag;\n    }\n    getConfig() {\n        return this.config;\n    }\n    getShouldEnableGestureOnSetup() {\n        throw new Error(\"Must override GestureHandler.shouldEnableGestureOnSetup\");\n    }\n    getView() {\n        return this.view;\n    }\n    getEventManagers() {\n        return this.eventManagers;\n    }\n    getTracker() {\n        return this.tracker;\n    }\n    getTrackedPointersID() {\n        return this.tracker.getTrackedPointersID();\n    }\n    getState() {\n        return this.currentState;\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    isFinished() {\n        return this.currentState === _State.State.END || this.currentState === _State.State.FAILED || this.currentState === _State.State.CANCELLED;\n    }\n    setShouldCancelWhenOutside(shouldCancel) {\n        this.shouldCancellWhenOutside = shouldCancel;\n    }\n    getShouldCancelWhenOutside() {\n        return this.shouldCancellWhenOutside;\n    }\n    getPointerType() {\n        return this.pointerType;\n    }\n}\nexports[\"default\"] = GestureHandler;\nfunction invokeNullableMethod(method, event) {\n    if (!method) {\n        return;\n    }\n    if (typeof method === \"function\") {\n        method(event);\n        return;\n    }\n    if (\"__getHandler\" in method && typeof method.__getHandler === \"function\") {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n        return;\n    }\n    if (!(\"__nodeConfig\" in method)) {\n        return;\n    }\n    const { argMapping } = method.__nodeConfig;\n    if (!Array.isArray(argMapping)) {\n        return;\n    }\n    for (const [index, [key, value]] of argMapping.entries()){\n        if (!(key in event.nativeEvent)) {\n            continue;\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const nativeValue = event.nativeEvent[key]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (value !== null && value !== void 0 && value.setValue) {\n            //Reanimated API\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n            value.setValue(nativeValue);\n        } else {\n            //RN Animated API\n            method.__nodeConfig.argMapping[index] = [\n                key,\n                nativeValue\n            ];\n        }\n    }\n    return;\n} //# sourceMappingURL=GestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\nclass LongPressGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"minDurationMs\", DEFAULT_MIN_DURATION_MS);\n        _defineProperty(this, \"defaultMaxDistSq\", DEFAULT_MAX_DIST_DP * SCALING_FACTOR);\n        _defineProperty(this, \"maxDistSq\", this.defaultMaxDistSq);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"startTime\", 0);\n        _defineProperty(this, \"previousTime\", 0);\n        _defineProperty(this, \"activationTimeout\", void 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.view.oncontextmenu = ()=>false;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY(),\n            duration: Date.now() - this.startTime\n        };\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.minDurationMs !== undefined) {\n            this.minDurationMs = this.config.minDurationMs;\n        }\n        if (this.config.maxDist !== undefined) {\n            this.maxDistSq = this.config.maxDist * this.config.maxDist;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n        this.maxDistSq = this.defaultMaxDistSq;\n    }\n    onStateChange(_newState, _oldState) {\n        clearTimeout(this.activationTimeout);\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.tryBegin(event);\n        this.tryActivate();\n        this.checkDistanceFail(event);\n    }\n    onPointerMove(event) {\n        super.onPointerMove(event);\n        this.tracker.track(event);\n        this.checkDistanceFail(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    tryBegin(event) {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.previousTime = Date.now();\n        this.startTime = this.previousTime;\n        this.begin();\n        this.startX = event.x;\n        this.startY = event.y;\n    }\n    tryActivate() {\n        if (this.minDurationMs > 0) {\n            this.activationTimeout = setTimeout(()=>{\n                this.activate();\n            }, this.minDurationMs);\n        } else if (this.minDurationMs === 0) {\n            this.activate();\n        }\n    }\n    checkDistanceFail(event) {\n        const dx = event.x - this.startX;\n        const dy = event.y - this.startY;\n        const distSq = dx * dx + dy * dy;\n        if (distSq <= this.maxDistSq) {\n            return;\n        }\n        if (this.currentState === _State.State.ACTIVE) {\n            this.cancel();\n        } else {\n            this.fail();\n        }\n    }\n}\nexports[\"default\"] = LongPressGestureHandler; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass ManualGestureHandler extends _GestureHandler.default {\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.begin();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        this.tracker.track(event);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n}\nexports[\"default\"] = ManualGestureHandler; //# sourceMappingURL=ManualGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2hhbmRsZXJzL01hbnVhbEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLGlIQUFrQjtBQUV2RSxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUosU0FBU0k7SUFBSTtBQUFHO0FBRTlGLE1BQU1FLDZCQUE2QkwsZ0JBQWdCRCxPQUFPO0lBQ3hETyxLQUFLQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtRQUNsQixLQUFLLENBQUNGLEtBQUtDLEtBQUtDO0lBQ2xCO0lBRUFDLG9CQUFvQixFQUNsQkMsVUFBVSxJQUFJLEVBQ2QsR0FBR0MsT0FDSixFQUFFO1FBQ0QsS0FBSyxDQUFDRixvQkFBb0I7WUFDeEJDLFNBQVNBO1lBQ1QsR0FBR0MsS0FBSztRQUNWO0lBQ0Y7SUFFQUMsY0FBY0MsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxZQUFZLENBQUNGO1FBQzFCLEtBQUssQ0FBQ0QsY0FBY0M7UUFDcEIsSUFBSSxDQUFDRyxLQUFLO0lBQ1o7SUFFQUMsYUFBYUosS0FBSyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxZQUFZLENBQUNGO1FBQzFCLEtBQUssQ0FBQ0ksYUFBYUo7SUFDckI7SUFFQUssY0FBY0wsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsT0FBTyxDQUFDSyxLQUFLLENBQUNOO1FBQ25CLEtBQUssQ0FBQ0ssY0FBY0w7SUFDdEI7SUFFQU8scUJBQXFCUCxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDQyxPQUFPLENBQUNLLEtBQUssQ0FBQ047UUFDbkIsS0FBSyxDQUFDTyxxQkFBcUJQO0lBQzdCO0lBRUFRLFlBQVlSLEtBQUssRUFBRTtRQUNqQixLQUFLLENBQUNRLFlBQVlSO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxDQUFDUSxpQkFBaUIsQ0FBQ1QsTUFBTVUsU0FBUztJQUNoRDtJQUVBQyxnQkFBZ0JYLEtBQUssRUFBRTtRQUNyQixLQUFLLENBQUNXLGdCQUFnQlg7UUFDdEIsSUFBSSxDQUFDQyxPQUFPLENBQUNRLGlCQUFpQixDQUFDVCxNQUFNVSxTQUFTO0lBQ2hEO0lBRUFFLGdCQUFnQlosS0FBSyxFQUFFO1FBQ3JCLEtBQUssQ0FBQ1ksZ0JBQWdCWjtRQUN0QixJQUFJLENBQUNhLEtBQUs7SUFDWjtBQUVGO0FBRUE3QixrQkFBZSxHQUFHUSxzQkFDbEIsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYi9oYW5kbGVycy9NYW51YWxHZXN0dXJlSGFuZGxlci5qcz80NWM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNsYXNzIE1hbnVhbEdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0dlc3R1cmVIYW5kbGVyLmRlZmF1bHQge1xuICBpbml0KHJlZiwgcHJvcHNSZWYpIHtcbiAgICBzdXBlci5pbml0KHJlZiwgcHJvcHNSZWYpO1xuICB9XG5cbiAgdXBkYXRlR2VzdHVyZUNvbmZpZyh7XG4gICAgZW5hYmxlZCA9IHRydWUsXG4gICAgLi4ucHJvcHNcbiAgfSkge1xuICAgIHN1cGVyLnVwZGF0ZUdlc3R1cmVDb25maWcoe1xuICAgICAgZW5hYmxlZDogZW5hYmxlZCxcbiAgICAgIC4uLnByb3BzXG4gICAgfSk7XG4gIH1cblxuICBvblBvaW50ZXJEb3duKGV2ZW50KSB7XG4gICAgdGhpcy50cmFja2VyLmFkZFRvVHJhY2tlcihldmVudCk7XG4gICAgc3VwZXIub25Qb2ludGVyRG93bihldmVudCk7XG4gICAgdGhpcy5iZWdpbigpO1xuICB9XG5cbiAgb25Qb2ludGVyQWRkKGV2ZW50KSB7XG4gICAgdGhpcy50cmFja2VyLmFkZFRvVHJhY2tlcihldmVudCk7XG4gICAgc3VwZXIub25Qb2ludGVyQWRkKGV2ZW50KTtcbiAgfVxuXG4gIG9uUG9pbnRlck1vdmUoZXZlbnQpIHtcbiAgICB0aGlzLnRyYWNrZXIudHJhY2soZXZlbnQpO1xuICAgIHN1cGVyLm9uUG9pbnRlck1vdmUoZXZlbnQpO1xuICB9XG5cbiAgb25Qb2ludGVyT3V0T2ZCb3VuZHMoZXZlbnQpIHtcbiAgICB0aGlzLnRyYWNrZXIudHJhY2soZXZlbnQpO1xuICAgIHN1cGVyLm9uUG9pbnRlck91dE9mQm91bmRzKGV2ZW50KTtcbiAgfVxuXG4gIG9uUG9pbnRlclVwKGV2ZW50KSB7XG4gICAgc3VwZXIub25Qb2ludGVyVXAoZXZlbnQpO1xuICAgIHRoaXMudHJhY2tlci5yZW1vdmVGcm9tVHJhY2tlcihldmVudC5wb2ludGVySWQpO1xuICB9XG5cbiAgb25Qb2ludGVyUmVtb3ZlKGV2ZW50KSB7XG4gICAgc3VwZXIub25Qb2ludGVyUmVtb3ZlKGV2ZW50KTtcbiAgICB0aGlzLnRyYWNrZXIucmVtb3ZlRnJvbVRyYWNrZXIoZXZlbnQucG9pbnRlcklkKTtcbiAgfVxuXG4gIG9uUG9pbnRlckNhbmNlbChldmVudCkge1xuICAgIHN1cGVyLm9uUG9pbnRlckNhbmNlbChldmVudCk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gTWFudWFsR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYW51YWxHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX0dlc3R1cmVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiTWFudWFsR2VzdHVyZUhhbmRsZXIiLCJpbml0IiwicmVmIiwicHJvcHNSZWYiLCJ1cGRhdGVHZXN0dXJlQ29uZmlnIiwiZW5hYmxlZCIsInByb3BzIiwib25Qb2ludGVyRG93biIsImV2ZW50IiwidHJhY2tlciIsImFkZFRvVHJhY2tlciIsImJlZ2luIiwib25Qb2ludGVyQWRkIiwib25Qb2ludGVyTW92ZSIsInRyYWNrIiwib25Qb2ludGVyT3V0T2ZCb3VuZHMiLCJvblBvaW50ZXJVcCIsInJlbW92ZUZyb21UcmFja2VyIiwicG9pbnRlcklkIiwib25Qb2ludGVyUmVtb3ZlIiwib25Qb2ludGVyQ2FuY2VsIiwicmVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass NativeViewGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"buttonRole\", void 0);\n        _defineProperty(this, \"shouldActivateOnStart\", false);\n        _defineProperty(this, \"disallowInterruption\", false);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"minDistSq\", _constants.DEFAULT_TOUCH_SLOP * _constants.DEFAULT_TOUCH_SLOP);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(true);\n        this.view.style[\"touchAction\"] = \"auto\"; //@ts-ignore Turns on defualt touch behavior on Safari\n        this.view.style[\"WebkitTouchCallout\"] = \"auto\";\n        if (this.view.hasAttribute(\"role\")) {\n            this.buttonRole = true;\n        } else {\n            this.buttonRole = false;\n        }\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.shouldActivateOnStart !== undefined) {\n            this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n        }\n        if (this.config.disallowInterruption !== undefined) {\n            this.disallowInterruption = this.config.disallowInterruption;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.newPointerAction();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.newPointerAction();\n    }\n    newPointerAction() {\n        this.startX = this.tracker.getLastAvgX();\n        this.startY = this.tracker.getLastAvgY();\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.begin();\n        if (this.buttonRole) {\n            this.activate();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        const dx = this.startX - this.tracker.getLastAvgX();\n        const dy = this.startY - this.tracker.getLastAvgY();\n        const distSq = dx * dx + dy * dy;\n        if (!this.buttonRole && distSq >= this.minDistSq && this.currentState === _State.State.BEGAN) {\n            this.activate();\n        }\n    }\n    onPointerOut() {\n        this.cancel();\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.onUp(event);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.onUp(event);\n    }\n    onUp(event) {\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.tracker.getTrackedPointersCount() === 0) {\n            if (this.currentState === _State.State.ACTIVE) {\n                this.end();\n            } else {\n                this.fail();\n            }\n        }\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.cancel();\n        this.reset();\n    }\n    shouldRecognizeSimultaneously(handler) {\n        if (super.shouldRecognizeSimultaneously(handler)) {\n            return true;\n        }\n        if (handler instanceof NativeViewGestureHandler && handler.getState() === _State.State.ACTIVE && handler.disallowsInterruption()) {\n            return false;\n        }\n        const canBeInterrupted = !this.disallowInterruption;\n        if (this.currentState === _State.State.ACTIVE && handler.getState() === _State.State.ACTIVE && canBeInterrupted) {\n            return false;\n        }\n        return this.currentState === _State.State.ACTIVE && canBeInterrupted && handler.getTag() > 0;\n    }\n    shouldBeCancelledByOther(_handler) {\n        return !this.disallowInterruption;\n    }\n    disallowsInterruption() {\n        return this.disallowInterruption;\n    }\n}\nexports[\"default\"] = NativeViewGestureHandler; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MIN_POINTERS = 1;\nconst DEFAULT_MAX_POINTERS = 10;\nconst DEFAULT_MIN_DIST_SQ = _constants.DEFAULT_TOUCH_SLOP * _constants.DEFAULT_TOUCH_SLOP;\nclass PanGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"customActivationProperties\", [\n            \"activeOffsetXStart\",\n            \"activeOffsetXEnd\",\n            \"failOffsetXStart\",\n            \"failOffsetXEnd\",\n            \"activeOffsetYStart\",\n            \"activeOffsetYEnd\",\n            \"failOffsetYStart\",\n            \"failOffsetYEnd\",\n            \"minVelocityX\",\n            \"minVelocityY\"\n        ]);\n        _defineProperty(this, \"velocityX\", 0);\n        _defineProperty(this, \"velocityY\", 0);\n        _defineProperty(this, \"minDistSq\", DEFAULT_MIN_DIST_SQ);\n        _defineProperty(this, \"activeOffsetXStart\", -Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetXEnd\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetXStart\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetXEnd\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetYStart\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetYEnd\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetYStart\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetYEnd\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocityX\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocityY\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocitySq\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minPointers\", DEFAULT_MIN_POINTERS);\n        _defineProperty(this, \"maxPointers\", DEFAULT_MAX_POINTERS);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"offsetX\", 0);\n        _defineProperty(this, \"offsetY\", 0);\n        _defineProperty(this, \"lastX\", 0);\n        _defineProperty(this, \"lastY\", 0);\n        _defineProperty(this, \"activateAfterLongPress\", 0);\n        _defineProperty(this, \"activationTimeout\", 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.resetConfig();\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        this.checkCustomActivationCriteria(this.customActivationProperties);\n        if (this.config.minDist !== undefined) {\n            this.minDistSq = this.config.minDist * this.config.minDist;\n        } else if (this.hasCustomActivationCriteria) {\n            this.minDistSq = Number.MAX_SAFE_INTEGER;\n        }\n        if (this.config.minPointers !== undefined) {\n            this.minPointers = this.config.minPointers;\n        }\n        if (this.config.maxPointers !== undefined) {\n            this.maxPointers = this.config.maxPointers;\n        }\n        if (this.config.minVelocity !== undefined) {\n            this.minVelocityX = this.config.minVelocity;\n            this.minVelocityY = this.config.minVelocity;\n        }\n        if (this.config.minVelocityX !== undefined) {\n            this.minVelocityX = this.config.minVelocityX;\n        }\n        if (this.config.minVelocityY !== undefined) {\n            this.minVelocityY = this.config.minVelocityY;\n        }\n        if (this.config.activateAfterLongPress !== undefined) {\n            this.activateAfterLongPress = this.config.activateAfterLongPress;\n        }\n        if (this.config.activeOffsetXStart !== undefined) {\n            this.activeOffsetXStart = this.config.activeOffsetXStart;\n            if (this.config.activeOffsetXEnd === undefined) {\n                this.activeOffsetXEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetXEnd !== undefined) {\n            this.activeOffsetXEnd = this.config.activeOffsetXEnd;\n            if (this.config.activeOffsetXStart === undefined) {\n                this.activeOffsetXStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetXStart !== undefined) {\n            this.failOffsetXStart = this.config.failOffsetXStart;\n            if (this.config.failOffsetXEnd === undefined) {\n                this.failOffsetXEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetXEnd !== undefined) {\n            this.failOffsetXEnd = this.config.failOffsetXEnd;\n            if (this.config.failOffsetXStart === undefined) {\n                this.failOffsetXStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetYStart !== undefined) {\n            this.activeOffsetYStart = this.config.activeOffsetYStart;\n            if (this.config.activeOffsetYEnd === undefined) {\n                this.activeOffsetYEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetYEnd !== undefined) {\n            this.activeOffsetYEnd = this.config.activeOffsetYEnd;\n            if (this.config.activeOffsetYStart === undefined) {\n                this.activeOffsetYStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetYStart !== undefined) {\n            this.failOffsetYStart = this.config.failOffsetYStart;\n            if (this.config.failOffsetYEnd === undefined) {\n                this.failOffsetYEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetYEnd !== undefined) {\n            this.failOffsetYEnd = this.config.failOffsetYEnd;\n            if (this.config.failOffsetYStart === undefined) {\n                this.failOffsetYStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.activeOffsetXStart = -Number.MAX_SAFE_INTEGER;\n        this.activeOffsetXEnd = Number.MIN_SAFE_INTEGER;\n        this.failOffsetXStart = Number.MIN_SAFE_INTEGER;\n        this.failOffsetXEnd = Number.MAX_SAFE_INTEGER;\n        this.activeOffsetYStart = Number.MAX_SAFE_INTEGER;\n        this.activeOffsetYEnd = Number.MIN_SAFE_INTEGER;\n        this.failOffsetYStart = Number.MIN_SAFE_INTEGER;\n        this.failOffsetYEnd = Number.MAX_SAFE_INTEGER;\n        this.minVelocityX = Number.MAX_SAFE_INTEGER;\n        this.minVelocityY = Number.MAX_SAFE_INTEGER;\n        this.minVelocitySq = Number.MAX_SAFE_INTEGER;\n        this.minDistSq = DEFAULT_MIN_DIST_SQ;\n        this.minPointers = DEFAULT_MIN_POINTERS;\n        this.maxPointers = DEFAULT_MAX_POINTERS;\n        this.activateAfterLongPress = 0;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        const ratio = _reactNative.PixelRatio.get();\n        const translationX = this.getTranslationX();\n        const translationY = this.getTranslationY();\n        return {\n            translationX: isNaN(translationX) ? 0 : translationX,\n            translationY: isNaN(translationY) ? 0 : translationY,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY(),\n            velocityX: this.velocityX * ratio * 10,\n            velocityY: this.velocityY * ratio * 10,\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top\n        };\n    }\n    getTranslationX() {\n        return this.lastX - this.startX + this.offsetX;\n    }\n    getTranslationY() {\n        return this.lastY - this.startY + this.offsetY;\n    }\n    clearActivationTimeout() {\n        clearTimeout(this.activationTimeout);\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tryBegin(event);\n        this.checkBegan();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin(event);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        if (this.tracker.getTrackedPointersCount() > this.maxPointers) {\n            if (this.currentState === _State.State.ACTIVE) {\n                this.cancel();\n            } else {\n                this.fail();\n            }\n        } else {\n            this.checkBegan();\n        }\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.lastX = this.tracker.getLastAvgX();\n            this.lastY = this.tracker.getLastAvgY();\n        }\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.resetProgress();\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        if (!(this.currentState === _State.State.ACTIVE && this.tracker.getTrackedPointersCount() < this.minPointers)) {\n            this.checkBegan();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.velocityX = this.tracker.getVelocityX(event.pointerId);\n        this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        this.checkBegan();\n        super.onPointerMove(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    onPointerOutOfBounds(event) {\n        if (this.getShouldCancelWhenOutside()) {\n            return;\n        }\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.velocityX = this.tracker.getVelocityX(event.pointerId);\n        this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        this.checkBegan();\n        if (this.currentState === _State.State.ACTIVE) {\n            super.onPointerOutOfBounds(event);\n        }\n    }\n    shouldActivate() {\n        const dx = this.getTranslationX();\n        if (this.activeOffsetXStart !== Number.MAX_SAFE_INTEGER && dx < this.activeOffsetXStart) {\n            return true;\n        }\n        if (this.activeOffsetXEnd !== Number.MIN_SAFE_INTEGER && dx > this.activeOffsetXEnd) {\n            return true;\n        }\n        const dy = this.getTranslationY();\n        if (this.activeOffsetYStart !== Number.MAX_SAFE_INTEGER && dy < this.activeOffsetYStart) {\n            return true;\n        }\n        if (this.activeOffsetYEnd !== Number.MIN_SAFE_INTEGER && dy > this.activeOffsetYEnd) {\n            return true;\n        }\n        const distanceSq = dx * dx + dy * dy;\n        if (this.minDistSq !== Number.MAX_SAFE_INTEGER && distanceSq >= this.minDistSq) {\n            return true;\n        }\n        const vx = this.velocityX;\n        if (this.minVelocityX !== Number.MAX_SAFE_INTEGER && (this.minVelocityX < 0 && vx <= this.minVelocityX || this.minVelocityX >= 0 && this.minVelocityX <= vx)) {\n            return true;\n        }\n        const vy = this.velocityY;\n        if (this.minVelocityY !== Number.MAX_SAFE_INTEGER && (this.minVelocityY < 0 && vy <= this.minVelocityY || this.minVelocityY >= 0 && this.minVelocityY <= vy)) {\n            return true;\n        }\n        const velocitySq = vx * vx + vy * vy;\n        return this.minVelocitySq !== Number.MAX_SAFE_INTEGER && velocitySq >= this.minVelocitySq;\n    }\n    shouldFail() {\n        const dx = this.getTranslationX();\n        const dy = this.getTranslationY();\n        const distanceSq = dx * dx + dy * dy;\n        if (this.activateAfterLongPress > 0 && distanceSq > DEFAULT_MIN_DIST_SQ) {\n            this.clearActivationTimeout();\n            return true;\n        }\n        if (this.failOffsetXStart !== Number.MIN_SAFE_INTEGER && dx < this.failOffsetXStart) {\n            return true;\n        }\n        if (this.failOffsetXEnd !== Number.MAX_SAFE_INTEGER && dx > this.failOffsetXEnd) {\n            return true;\n        }\n        if (this.failOffsetYStart !== Number.MIN_SAFE_INTEGER && dy < this.failOffsetYStart) {\n            return true;\n        }\n        return this.failOffsetYEnd !== Number.MAX_SAFE_INTEGER && dy > this.failOffsetYEnd;\n    }\n    tryBegin(event) {\n        if (this.currentState === _State.State.UNDETERMINED && this.tracker.getTrackedPointersCount() >= this.minPointers) {\n            this.resetProgress();\n            this.offsetX = 0;\n            this.offsetY = 0;\n            this.velocityX = 0;\n            this.velocityY = 0;\n            this.begin();\n            if (this.activateAfterLongPress > 0) {\n                this.activationTimeout = setTimeout(()=>{\n                    this.activate();\n                }, this.activateAfterLongPress);\n            }\n        } else {\n            this.velocityX = this.tracker.getVelocityX(event.pointerId);\n            this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        }\n    }\n    checkBegan() {\n        if (this.currentState === _State.State.BEGAN) {\n            if (this.shouldFail()) {\n                this.fail();\n            } else if (this.shouldActivate()) {\n                this.activate();\n            }\n        }\n    }\n    activate(force = false) {\n        if (this.currentState !== _State.State.ACTIVE) {\n            this.resetProgress();\n        }\n        super.activate(force);\n    }\n    onCancel() {\n        this.clearActivationTimeout();\n    }\n    onReset() {\n        this.clearActivationTimeout();\n    }\n    resetProgress() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n    }\n}\nexports[\"default\"] = PanGestureHandler; //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nvar _ScaleGestureDetector = _interopRequireDefault(__webpack_require__(/*! ../detectors/ScaleGestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass PinchGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"scale\", 1);\n        _defineProperty(this, \"velocity\", 0);\n        _defineProperty(this, \"startingSpan\", 0);\n        _defineProperty(this, \"spanSlop\", _constants.DEFAULT_TOUCH_SLOP);\n        _defineProperty(this, \"scaleDetectorListener\", {\n            onScaleBegin: (detector)=>{\n                this.startingSpan = detector.getCurrentSpan();\n                return true;\n            },\n            onScale: (detector)=>{\n                const prevScaleFactor = this.scale;\n                this.scale *= detector.getScaleFactor(this.tracker.getTrackedPointersCount());\n                const delta = detector.getTimeDelta();\n                if (delta > 0) {\n                    this.velocity = (this.scale - prevScaleFactor) / delta;\n                }\n                if (Math.abs(this.startingSpan - detector.getCurrentSpan()) >= this.spanSlop && this.currentState === _State.State.BEGAN) {\n                    this.activate();\n                }\n                return true;\n            },\n            onScaleEnd: (_detector)=>{}\n        });\n        _defineProperty(this, \"scaleGestureDetector\", new _ScaleGestureDetector.default(this.scaleDetectorListener));\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(false);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    transformNativeEvent() {\n        return {\n            focalX: this.scaleGestureDetector.getFocusX(),\n            focalY: this.scaleGestureDetector.getFocusY(),\n            velocity: this.velocity,\n            scale: this.scale\n        };\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin();\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState !== _State.State.ACTIVE) {\n            return;\n        }\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE && this.tracker.getTrackedPointersCount() < 2) {\n            this.end();\n        }\n    }\n    onPointerMove(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        this.tracker.track(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        this.tracker.track(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    tryBegin() {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.resetProgress();\n        this.begin();\n    }\n    activate(force) {\n        if (this.currentState !== _State.State.ACTIVE) {\n            this.resetProgress();\n        }\n        super.activate(force);\n    }\n    onReset() {\n        this.resetProgress();\n    }\n    resetProgress() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.velocity = 0;\n        this.scale = 1;\n    }\n}\nexports[\"default\"] = PinchGestureHandler; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nvar _RotationGestureDetector = _interopRequireDefault(__webpack_require__(/*! ../detectors/RotationGestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst ROTATION_RECOGNITION_THRESHOLD = Math.PI / 36;\nclass RotationGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"rotation\", 0);\n        _defineProperty(this, \"velocity\", 0);\n        _defineProperty(this, \"cachedAnchorX\", 0);\n        _defineProperty(this, \"cachedAnchorY\", 0);\n        _defineProperty(this, \"rotationGestureListener\", {\n            onRotationBegin: (_detector)=>true,\n            onRotation: (detector)=>{\n                const previousRotation = this.rotation;\n                this.rotation += detector.getRotation();\n                const delta = detector.getTimeDelta();\n                if (delta > 0) {\n                    this.velocity = (this.rotation - previousRotation) / delta;\n                }\n                if (Math.abs(this.rotation) >= ROTATION_RECOGNITION_THRESHOLD && this.currentState === _State.State.BEGAN) {\n                    this.activate();\n                }\n                return true;\n            },\n            onRotationEnd: (_detector)=>{\n                this.end();\n            }\n        });\n        _defineProperty(this, \"rotationGestureDetector\", new _RotationGestureDetector.default(this.rotationGestureListener));\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(false);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    transformNativeEvent() {\n        return {\n            rotation: this.rotation ? this.rotation : 0,\n            anchorX: this.getAnchorX(),\n            anchorY: this.getAnchorY(),\n            velocity: this.velocity ? this.velocity : 0\n        };\n    }\n    getAnchorX() {\n        const anchorX = this.rotationGestureDetector.getAnchorX();\n        return anchorX ? anchorX : this.cachedAnchorX;\n    }\n    getAnchorY() {\n        const anchorY = this.rotationGestureDetector.getAnchorY();\n        return anchorY ? anchorY : this.cachedAnchorY;\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin();\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n    }\n    onPointerMove(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        if (this.getAnchorX()) {\n            this.cachedAnchorX = this.getAnchorX();\n        }\n        if (this.getAnchorY()) {\n            this.cachedAnchorY = this.getAnchorY();\n        }\n        this.tracker.track(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        if (this.getAnchorX()) {\n            this.cachedAnchorX = this.getAnchorX();\n        }\n        if (this.getAnchorY()) {\n            this.cachedAnchorY = this.getAnchorY();\n        }\n        this.tracker.track(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        if (this.currentState !== _State.State.ACTIVE) {\n            return;\n        }\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.end();\n        this.reset();\n    }\n    tryBegin() {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.begin();\n    }\n    activate(_force) {\n        super.activate();\n    }\n    onReset() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.rotation = 0;\n        this.velocity = 0;\n        this.rotationGestureDetector.reset();\n    }\n}\nexports[\"default\"] = RotationGestureHandler; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2hhbmRsZXJzL1JvdGF0aW9uR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxTQUFTQyxtQkFBT0EsQ0FBQyxzRkFBYTtBQUVsQyxJQUFJQyxrQkFBa0JDLHVCQUF1QkYsbUJBQU9BLENBQUMsaUhBQWtCO0FBRXZFLElBQUlHLDJCQUEyQkQsdUJBQXVCRixtQkFBT0EsQ0FBQywrSUFBc0M7QUFFcEcsU0FBU0UsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVOLFNBQVNNO0lBQUk7QUFBRztBQUU5RixTQUFTRSxnQkFBZ0JGLEdBQUcsRUFBRUcsR0FBRyxFQUFFVixLQUFLO0lBQUksSUFBSVUsT0FBT0gsS0FBSztRQUFFVixPQUFPQyxjQUFjLENBQUNTLEtBQUtHLEtBQUs7WUFBRVYsT0FBT0E7WUFBT1csWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRU4sR0FBRyxDQUFDRyxJQUFJLEdBQUdWO0lBQU87SUFBRSxPQUFPTztBQUFLO0FBRWhOLE1BQU1PLGlDQUFpQ0MsS0FBS0MsRUFBRSxHQUFHO0FBRWpELE1BQU1DLCtCQUErQmIsZ0JBQWdCSCxPQUFPO0lBQzFEaUIsWUFBWSxHQUFHQyxJQUFJLENBQUU7UUFDbkIsS0FBSyxJQUFJQTtRQUVUVixnQkFBZ0IsSUFBSSxFQUFFLFlBQVk7UUFFbENBLGdCQUFnQixJQUFJLEVBQUUsWUFBWTtRQUVsQ0EsZ0JBQWdCLElBQUksRUFBRSxpQkFBaUI7UUFFdkNBLGdCQUFnQixJQUFJLEVBQUUsaUJBQWlCO1FBRXZDQSxnQkFBZ0IsSUFBSSxFQUFFLDJCQUEyQjtZQUMvQ1csaUJB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RTtRQUNyQixLQUFLLENBQUNnQixnQkFBZ0JoQjtRQUN0QixJQUFJLENBQUNsQixHQUFHO1FBQ1IsSUFBSSxDQUFDbUMsS0FBSztJQUNaO0lBRUFiLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQzNCLFlBQVksS0FBSzdCLE9BQU84QixLQUFLLENBQUN3QyxZQUFZLEVBQUU7WUFDbkQ7UUFDRjtRQUVBLElBQUksQ0FBQ0MsS0FBSztJQUNaO0lBRUF2QyxTQUFTd0MsTUFBTSxFQUFFO1FBQ2YsS0FBSyxDQUFDeEM7SUFDUjtJQUVBeUMsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDNUMsWUFBWSxLQUFLN0IsT0FBTzhCLEtBQUssQ0FBQ21DLE1BQU0sRUFBRTtZQUM3QztRQUNGO1FBRUEsSUFBSSxDQUFDMUMsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0ksUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ3FCLHVCQUF1QixDQUFDcUIsS0FBSztJQUNwQztBQUVGO0FBRUF4RSxrQkFBZSxHQUFHa0Isd0JBQ2xCLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWIvaGFuZGxlcnMvUm90YXRpb25HZXN0dXJlSGFuZGxlci5qcz83YzdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX1N0YXRlID0gcmVxdWlyZShcIi4uLy4uL1N0YXRlXCIpO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclwiKSk7XG5cbnZhciBfUm90YXRpb25HZXN0dXJlRGV0ZWN0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9kZXRlY3RvcnMvUm90YXRpb25HZXN0dXJlRGV0ZWN0b3JcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jb25zdCBST1RBVElPTl9SRUNPR05JVElPTl9USFJFU0hPTEQgPSBNYXRoLlBJIC8gMzY7XG5cbmNsYXNzIFJvdGF0aW9uR2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvdGF0aW9uXCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidmVsb2NpdHlcIiwgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWNoZWRBbmNob3JYXCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FjaGVkQW5jaG9yWVwiLCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvdGF0aW9uR2VzdHVyZUxpc3RlbmVyXCIsIHtcbiAgICAgIG9uUm90YXRpb25CZWdpbjogX2RldGVjdG9yID0+IHRydWUsXG4gICAgICBvblJvdGF0aW9uOiBkZXRlY3RvciA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzUm90YXRpb24gPSB0aGlzLnJvdGF0aW9uO1xuICAgICAgICB0aGlzLnJvdGF0aW9uICs9IGRldGVjdG9yLmdldFJvdGF0aW9uKCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gZGV0ZWN0b3IuZ2V0VGltZURlbHRhKCk7XG5cbiAgICAgICAgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICAgIHRoaXMudmVsb2NpdHkgPSAodGhpcy5yb3RhdGlvbiAtIHByZXZpb3VzUm90YXRpb24pIC8gZGVsdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5yb3RhdGlvbikgPj0gUk9UQVRJT05fUkVDT0dOSVRJT05fVEhSRVNIT0xEICYmIHRoaXMuY3VycmVudFN0YXRlID09PSBfU3RhdGUuU3RhdGUuQkVHQU4pIHtcbiAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBvblJvdGF0aW9uRW5kOiBfZGV0ZWN0b3IgPT4ge1xuICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicm90YXRpb25HZXN0dXJlRGV0ZWN0b3JcIiwgbmV3IF9Sb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5kZWZhdWx0KHRoaXMucm90YXRpb25HZXN0dXJlTGlzdGVuZXIpKTtcbiAgfVxuXG4gIGluaXQocmVmLCBwcm9wc1JlZikge1xuICAgIHN1cGVyLmluaXQocmVmLCBwcm9wc1JlZik7XG4gICAgdGhpcy5zZXRTaG91bGRDYW5jZWxXaGVuT3V0c2lkZShmYWxzZSk7XG4gIH1cblxuICB1cGRhdGVHZXN0dXJlQ29uZmlnKHtcbiAgICBlbmFibGVkID0gdHJ1ZSxcbiAgICAuLi5wcm9wc1xuICB9KSB7XG4gICAgc3VwZXIudXBkYXRlR2VzdHVyZUNvbmZpZyh7XG4gICAgICBlbmFibGVkOiBlbmFibGVkLFxuICAgICAgLi4ucHJvcHNcbiAgICB9KTtcbiAgfVxuXG4gIHRyYW5zZm9ybU5hdGl2ZUV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3RhdGlvbjogdGhpcy5yb3RhdGlvbiA/IHRoaXMucm90YXRpb24gOiAwLFxuICAgICAgYW5jaG9yWDogdGhpcy5nZXRBbmNob3JYKCksXG4gICAgICBhbmNob3JZOiB0aGlzLmdldEFuY2hvclkoKSxcbiAgICAgIHZlbG9jaXR5OiB0aGlzLnZlbG9jaXR5ID8gdGhpcy52ZWxvY2l0eSA6IDBcbiAgICB9O1xuICB9XG5cbiAgZ2V0QW5jaG9yWCgpIHtcbiAgICBjb25zdCBhbmNob3JYID0gdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5nZXRBbmNob3JYKCk7XG4gICAgcmV0dXJuIGFuY2hvclggPyBhbmNob3JYIDogdGhpcy5jYWNoZWRBbmNob3JYO1xuICB9XG5cbiAgZ2V0QW5jaG9yWSgpIHtcbiAgICBjb25zdCBhbmNob3JZID0gdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5nZXRBbmNob3JZKCk7XG4gICAgcmV0dXJuIGFuY2hvclkgPyBhbmNob3JZIDogdGhpcy5jYWNoZWRBbmNob3JZO1xuICB9XG5cbiAgb25Qb2ludGVyRG93bihldmVudCkge1xuICAgIHRoaXMudHJhY2tlci5hZGRUb1RyYWNrZXIoZXZlbnQpO1xuICAgIHN1cGVyLm9uUG9pbnRlckRvd24oZXZlbnQpO1xuICB9XG5cbiAgb25Qb2ludGVyQWRkKGV2ZW50KSB7XG4gICAgdGhpcy50cmFja2VyLmFkZFRvVHJhY2tlcihldmVudCk7XG4gICAgc3VwZXIub25Qb2ludGVyQWRkKGV2ZW50KTtcbiAgICB0aGlzLnRyeUJlZ2luKCk7XG4gICAgdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5vblRvdWNoRXZlbnQoZXZlbnQsIHRoaXMudHJhY2tlcik7XG4gIH1cblxuICBvblBvaW50ZXJNb3ZlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMudHJhY2tlci5nZXRUcmFja2VkUG9pbnRlcnNDb3VudCgpIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdldEFuY2hvclgoKSkge1xuICAgICAgdGhpcy5jYWNoZWRBbmNob3JYID0gdGhpcy5nZXRBbmNob3JYKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0QW5jaG9yWSgpKSB7XG4gICAgICB0aGlzLmNhY2hlZEFuY2hvclkgPSB0aGlzLmdldEFuY2hvclkoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrZXIudHJhY2soZXZlbnQpO1xuICAgIHRoaXMucm90YXRpb25HZXN0dXJlRGV0ZWN0b3Iub25Ub3VjaEV2ZW50KGV2ZW50LCB0aGlzLnRyYWNrZXIpO1xuICAgIHN1cGVyLm9uUG9pbnRlck1vdmUoZXZlbnQpO1xuICB9XG5cbiAgb25Qb2ludGVyT3V0T2ZCb3VuZHMoZXZlbnQpIHtcbiAgICBpZiAodGhpcy50cmFja2VyLmdldFRyYWNrZWRQb2ludGVyc0NvdW50KCkgPCAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0QW5jaG9yWCgpKSB7XG4gICAgICB0aGlzLmNhY2hlZEFuY2hvclggPSB0aGlzLmdldEFuY2hvclgoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRBbmNob3JZKCkpIHtcbiAgICAgIHRoaXMuY2FjaGVkQW5jaG9yWSA9IHRoaXMuZ2V0QW5jaG9yWSgpO1xuICAgIH1cblxuICAgIHRoaXMudHJhY2tlci50cmFjayhldmVudCk7XG4gICAgdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5vblRvdWNoRXZlbnQoZXZlbnQsIHRoaXMudHJhY2tlcik7XG4gICAgc3VwZXIub25Qb2ludGVyT3V0T2ZCb3VuZHMoZXZlbnQpO1xuICB9XG5cbiAgb25Qb2ludGVyVXAoZXZlbnQpIHtcbiAgICBzdXBlci5vblBvaW50ZXJVcChldmVudCk7XG4gICAgdGhpcy50cmFja2VyLnJlbW92ZUZyb21UcmFja2VyKGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5vblRvdWNoRXZlbnQoZXZlbnQsIHRoaXMudHJhY2tlcik7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgIT09IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgPT09IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUpIHtcbiAgICAgIHRoaXMuZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmFpbCgpO1xuICAgIH1cbiAgfVxuXG4gIG9uUG9pbnRlclJlbW92ZShldmVudCkge1xuICAgIHN1cGVyLm9uUG9pbnRlclJlbW92ZShldmVudCk7XG4gICAgdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5vblRvdWNoRXZlbnQoZXZlbnQsIHRoaXMudHJhY2tlcik7XG4gICAgdGhpcy50cmFja2VyLnJlbW92ZUZyb21UcmFja2VyKGV2ZW50LnBvaW50ZXJJZCk7XG4gIH1cblxuICBvblBvaW50ZXJDYW5jZWwoZXZlbnQpIHtcbiAgICBzdXBlci5vblBvaW50ZXJDYW5jZWwoZXZlbnQpO1xuICAgIHRoaXMuZW5kKCk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgdHJ5QmVnaW4oKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFN0YXRlICE9PSBfU3RhdGUuU3RhdGUuVU5ERVRFUk1JTkVEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5iZWdpbigpO1xuICB9XG5cbiAgYWN0aXZhdGUoX2ZvcmNlKSB7XG4gICAgc3VwZXIuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIG9uUmVzZXQoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFN0YXRlID09PSBfU3RhdGUuU3RhdGUuQUNUSVZFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yb3RhdGlvbiA9IDA7XG4gICAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gICAgdGhpcy5yb3RhdGlvbkdlc3R1cmVEZXRlY3Rvci5yZXNldCgpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gUm90YXRpb25HZXN0dXJlSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJvdGF0aW9uR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9TdGF0ZSIsInJlcXVpcmUiLCJfR2VzdHVyZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1JvdGF0aW9uR2VzdHVyZURldGVjdG9yIiwib2JqIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlJPVEFUSU9OX1JFQ09HTklUSU9OX1RIUkVTSE9MRCIsIk1hdGgiLCJQSSIsIlJvdGF0aW9uR2VzdHVyZUhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJvblJvdGF0aW9uQmVnaW4iLCJfZGV0ZWN0b3IiLCJvblJvdGF0aW9uIiwiZGV0ZWN0b3IiLCJwcmV2aW91c1JvdGF0aW9uIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsImRlbHRhIiwiZ2V0VGltZURlbHRhIiwidmVsb2NpdHkiLCJhYnMiLCJjdXJyZW50U3RhdGUiLCJTdGF0ZSIsIkJFR0FOIiwiYWN0aXZhdGUiLCJvblJvdGF0aW9uRW5kIiwiZW5kIiwicm90YXRpb25HZXN0dXJlTGlzdGVuZXIiLCJpbml0IiwicmVmIiwicHJvcHNSZWYiLCJzZXRTaG91bGRDYW5jZWxXaGVuT3V0c2lkZSIsInVwZGF0ZUdlc3R1cmVDb25maWciLCJlbmFibGVkIiwicHJvcHMiLCJ0cmFuc2Zvcm1OYXRpdmVFdmVudCIsImFuY2hvclgiLCJnZXRBbmNob3JYIiwiYW5jaG9yWSIsImdldEFuY2hvclkiLCJyb3RhdGlvbkdlc3R1cmVEZXRlY3RvciIsImNhY2hlZEFuY2hvclgiLCJjYWNoZWRBbmNob3JZIiwib25Qb2ludGVyRG93biIsImV2ZW50IiwidHJhY2tlciIsImFkZFRvVHJhY2tlciIsIm9uUG9pbnRlckFkZCIsInRyeUJlZ2luIiwib25Ub3VjaEV2ZW50Iiwib25Qb2ludGVyTW92ZSIsImdldFRyYWNrZWRQb2ludGVyc0NvdW50IiwidHJhY2siLCJvblBvaW50ZXJPdXRPZkJvdW5kcyIsIm9uUG9pbnRlclVwIiwicmVtb3ZlRnJvbVRyYWNrZXIiLCJwb2ludGVySWQiLCJBQ1RJVkUiLCJmYWlsIiwib25Qb2ludGVyUmVtb3ZlIiwib25Qb2ludGVyQ2FuY2VsIiwicmVzZXQiLCJVTkRFVEVSTUlORUQiLCJiZWdpbiIsIl9mb3JjZSIsIm9uUmVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 500;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\nclass TapGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n        _defineProperty(this, \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n        _defineProperty(this, \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n        _defineProperty(this, \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n        _defineProperty(this, \"currentMaxNumberOfPointers\", 1);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"offsetX\", 0);\n        _defineProperty(this, \"offsetY\", 0);\n        _defineProperty(this, \"lastX\", 0);\n        _defineProperty(this, \"lastY\", 0);\n        _defineProperty(this, \"waitTimeout\", void 0);\n        _defineProperty(this, \"delayTimeout\", void 0);\n        _defineProperty(this, \"tapsSoFar\", 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.numberOfTaps !== undefined) {\n            this.numberOfTaps = this.config.numberOfTaps;\n        }\n        if (this.config.maxDurationMs !== undefined) {\n            this.maxDurationMs = this.config.maxDurationMs;\n        }\n        if (this.config.maxDelayMs !== undefined) {\n            this.maxDelayMs = this.config.maxDelayMs;\n        }\n        if (this.config.maxDeltaX !== undefined) {\n            this.maxDeltaX = this.config.maxDeltaX;\n        }\n        if (this.config.maxDeltaY !== undefined) {\n            this.maxDeltaY = this.config.maxDeltaY;\n        }\n        if (this.config.maxDist !== undefined) {\n            this.maxDistSq = this.config.maxDist * this.config.maxDist;\n        }\n        if (this.config.minPointers !== undefined) {\n            this.minNumberOfPointers = this.config.minPointers;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n        this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n        this.maxDistSq = Number.MIN_SAFE_INTEGER;\n        this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n        this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n        this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n        this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY()\n        };\n    }\n    clearTimeouts() {\n        clearTimeout(this.waitTimeout);\n        clearTimeout(this.delayTimeout);\n    }\n    startTap() {\n        this.clearTimeouts();\n        this.waitTimeout = setTimeout(()=>this.fail(), this.maxDurationMs);\n    }\n    endTap() {\n        this.clearTimeouts();\n        if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n            this.activate();\n        } else {\n            this.delayTimeout = setTimeout(()=>this.fail(), this.maxDelayMs);\n        }\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.trySettingPosition(event);\n        this.startX = event.x;\n        this.startY = event.y;\n        this.lastX = event.x;\n        this.lastY = event.y;\n        this.updateState(event);\n    }\n    onPointerAdd(event) {\n        super.onPointerAdd(event);\n        this.tracker.addToTracker(event);\n        this.trySettingPosition(event);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.tracker.getLastAvgX();\n        this.startY = this.tracker.getLastAvgY();\n        this.updateState(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tracker.removeFromTracker(event.pointerId);\n        this.updateState(event);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY = this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        this.updateState(event);\n    }\n    onPointerMove(event) {\n        this.trySettingPosition(event);\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.updateState(event);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        this.trySettingPosition(event);\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.updateState(event);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.tracker.resetTracker();\n        this.fail();\n    }\n    updateState(event) {\n        if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n            this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n        }\n        if (this.shouldFail()) {\n            this.fail();\n            return;\n        }\n        switch(this.currentState){\n            case _State.State.UNDETERMINED:\n                if (event.eventType === _interfaces.EventTypes.DOWN) {\n                    this.begin();\n                }\n                this.startTap();\n                break;\n            case _State.State.BEGAN:\n                if (event.eventType === _interfaces.EventTypes.UP) {\n                    this.endTap();\n                }\n                if (event.eventType === _interfaces.EventTypes.DOWN) {\n                    this.startTap();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    trySettingPosition(event) {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.startX = event.x;\n        this.startY = event.y;\n    }\n    shouldFail() {\n        const dx = this.lastX - this.startX + this.offsetX;\n        if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n            return true;\n        }\n        const dy = this.lastY - this.startY + this.offsetY;\n        if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n            return true;\n        }\n        const distSq = dy * dy + dx * dx;\n        return this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq;\n    }\n    activate() {\n        super.activate();\n        this.end();\n    }\n    onCancel() {\n        this.resetProgress();\n        this.clearTimeouts();\n    }\n    resetProgress() {\n        this.clearTimeouts();\n        this.tapsSoFar = 0;\n        this.currentMaxNumberOfPointers = 0;\n    }\n}\nexports[\"default\"] = TapGestureHandler; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PointerType = exports.TouchEventType = exports.EventTypes = exports.MouseButtons = void 0;\nlet MouseButtons;\nexports.MouseButtons = MouseButtons;\n(function(MouseButtons) {\n    MouseButtons[MouseButtons[\"NONE\"] = 0] = \"NONE\";\n    MouseButtons[MouseButtons[\"LEFT\"] = 1] = \"LEFT\";\n    MouseButtons[MouseButtons[\"RIGHT\"] = 2] = \"RIGHT\";\n    MouseButtons[MouseButtons[\"LEFT_RIGHT\"] = 3] = \"LEFT_RIGHT\";\n    MouseButtons[MouseButtons[\"SCROLL\"] = 4] = \"SCROLL\";\n    MouseButtons[MouseButtons[\"SCROLL_LEFT\"] = 5] = \"SCROLL_LEFT\";\n    MouseButtons[MouseButtons[\"SCROLL_RIGHT\"] = 6] = \"SCROLL_RIGHT\";\n    MouseButtons[MouseButtons[\"SCROLL_LEFT_RIGHT\"] = 7] = \"SCROLL_LEFT_RIGHT\";\n})(MouseButtons || (exports.MouseButtons = MouseButtons = {}));\nlet EventTypes;\nexports.EventTypes = EventTypes;\n(function(EventTypes) {\n    EventTypes[EventTypes[\"DOWN\"] = 0] = \"DOWN\";\n    EventTypes[EventTypes[\"ADDITIONAL_POINTER_DOWN\"] = 1] = \"ADDITIONAL_POINTER_DOWN\";\n    EventTypes[EventTypes[\"UP\"] = 2] = \"UP\";\n    EventTypes[EventTypes[\"ADDITIONAL_POINTER_UP\"] = 3] = \"ADDITIONAL_POINTER_UP\";\n    EventTypes[EventTypes[\"MOVE\"] = 4] = \"MOVE\";\n    EventTypes[EventTypes[\"ENTER\"] = 5] = \"ENTER\";\n    EventTypes[EventTypes[\"OUT\"] = 6] = \"OUT\";\n    EventTypes[EventTypes[\"CANCEL\"] = 7] = \"CANCEL\";\n})(EventTypes || (exports.EventTypes = EventTypes = {}));\nlet TouchEventType;\nexports.TouchEventType = TouchEventType;\n(function(TouchEventType) {\n    TouchEventType[TouchEventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\n    TouchEventType[TouchEventType[\"DOWN\"] = 1] = \"DOWN\";\n    TouchEventType[TouchEventType[\"MOVE\"] = 2] = \"MOVE\";\n    TouchEventType[TouchEventType[\"UP\"] = 3] = \"UP\";\n    TouchEventType[TouchEventType[\"CANCELLED\"] = 4] = \"CANCELLED\";\n})(TouchEventType || (exports.TouchEventType = TouchEventType = {}));\nlet PointerType;\nexports.PointerType = PointerType;\n(function(PointerType) {\n    PointerType[\"NONE\"] = \"none\";\n    PointerType[\"MOUSE\"] = \"mouse\";\n    PointerType[\"TOUCH\"] = \"touch\";\n    PointerType[\"PEN\"] = \"pen\";\n})(PointerType || (exports.PointerType = PointerType = {})); //# sourceMappingURL=interfaces.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2ludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELG1CQUFtQixHQUFHQSxzQkFBc0IsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDaEcsSUFBSUs7QUFDSkwsb0JBQW9CLEdBQUdLO0FBRXRCLFVBQVVBLFlBQVk7SUFDckJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDMUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDaERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDakRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN4RCxHQUFHQSxnQkFBaUJMLENBQUFBLG9CQUFvQixHQUFHSyxlQUFlLENBQUM7QUFFM0QsSUFBSUQ7QUFDSkosa0JBQWtCLEdBQUdJO0FBRXBCLFVBQVVBLFVBQVU7SUFDbkJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDckNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLDBCQUEwQixHQUFHLEVBQUUsR0FBRztJQUN4REEsVUFBVSxDQUFDQSxVQUFVLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRztJQUNuQ0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsd0JBQXdCLEdBQUcsRUFBRSxHQUFHO0lBQ3REQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ3JDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ3BDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQ3pDLEdBQUdBLGNBQWVKLENBQUFBLGtCQUFrQixHQUFHSSxhQUFhLENBQUM7QUFFckQsSUFBSUQ7QUFDSkgsc0JBQXNCLEdBQUdHO0FBRXhCLFVBQVVBLGNBQWM7SUFDdkJBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDckRBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDN0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDN0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUc7SUFDM0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7QUFDcEQsR0FBR0Esa0JBQW1CSCxDQUFBQSxzQkFBc0IsR0FBR0csaUJBQWlCLENBQUM7QUFFakUsSUFBSUQ7QUFDSkYsbUJBQW1CLEdBQUdFO0FBRXJCLFVBQVVBLFdBQVc7SUFDcEJBLFdBQVcsQ0FBQyxPQUFPLEdBQUc7SUFDdEJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkJBLFdBQVcsQ0FBQyxNQUFNLEdBQUc7QUFDdkIsR0FBR0EsZUFBZ0JGLENBQUFBLG1CQUFtQixHQUFHRSxjQUFjLENBQUMsS0FDeEQsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYi9pbnRlcmZhY2VzLmpzPzQxYTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBvaW50ZXJUeXBlID0gZXhwb3J0cy5Ub3VjaEV2ZW50VHlwZSA9IGV4cG9ydHMuRXZlbnRUeXBlcyA9IGV4cG9ydHMuTW91c2VCdXR0b25zID0gdm9pZCAwO1xubGV0IE1vdXNlQnV0dG9ucztcbmV4cG9ydHMuTW91c2VCdXR0b25zID0gTW91c2VCdXR0b25zO1xuXG4oZnVuY3Rpb24gKE1vdXNlQnV0dG9ucykge1xuICBNb3VzZUJ1dHRvbnNbTW91c2VCdXR0b25zW1wiTk9ORVwiXSA9IDBdID0gXCJOT05FXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJMRUZUXCJdID0gMV0gPSBcIkxFRlRcIjtcbiAgTW91c2VCdXR0b25zW01vdXNlQnV0dG9uc1tcIlJJR0hUXCJdID0gMl0gPSBcIlJJR0hUXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJMRUZUX1JJR0hUXCJdID0gM10gPSBcIkxFRlRfUklHSFRcIjtcbiAgTW91c2VCdXR0b25zW01vdXNlQnV0dG9uc1tcIlNDUk9MTFwiXSA9IDRdID0gXCJTQ1JPTExcIjtcbiAgTW91c2VCdXR0b25zW01vdXNlQnV0dG9uc1tcIlNDUk9MTF9MRUZUXCJdID0gNV0gPSBcIlNDUk9MTF9MRUZUXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJTQ1JPTExfUklHSFRcIl0gPSA2XSA9IFwiU0NST0xMX1JJR0hUXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJTQ1JPTExfTEVGVF9SSUdIVFwiXSA9IDddID0gXCJTQ1JPTExfTEVGVF9SSUdIVFwiO1xufSkoTW91c2VCdXR0b25zIHx8IChleHBvcnRzLk1vdXNlQnV0dG9ucyA9IE1vdXNlQnV0dG9ucyA9IHt9KSk7XG5cbmxldCBFdmVudFR5cGVzO1xuZXhwb3J0cy5FdmVudFR5cGVzID0gRXZlbnRUeXBlcztcblxuKGZ1bmN0aW9uIChFdmVudFR5cGVzKSB7XG4gIEV2ZW50VHlwZXNbRXZlbnRUeXBlc1tcIkRPV05cIl0gPSAwXSA9IFwiRE9XTlwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJBRERJVElPTkFMX1BPSU5URVJfRE9XTlwiXSA9IDFdID0gXCJBRERJVElPTkFMX1BPSU5URVJfRE9XTlwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJVUFwiXSA9IDJdID0gXCJVUFwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJBRERJVElPTkFMX1BPSU5URVJfVVBcIl0gPSAzXSA9IFwiQURESVRJT05BTF9QT0lOVEVSX1VQXCI7XG4gIEV2ZW50VHlwZXNbRXZlbnRUeXBlc1tcIk1PVkVcIl0gPSA0XSA9IFwiTU9WRVwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJFTlRFUlwiXSA9IDVdID0gXCJFTlRFUlwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJPVVRcIl0gPSA2XSA9IFwiT1VUXCI7XG4gIEV2ZW50VHlwZXNbRXZlbnRUeXBlc1tcIkNBTkNFTFwiXSA9IDddID0gXCJDQU5DRUxcIjtcbn0pKEV2ZW50VHlwZXMgfHwgKGV4cG9ydHMuRXZlbnRUeXBlcyA9IEV2ZW50VHlwZXMgPSB7fSkpO1xuXG5sZXQgVG91Y2hFdmVudFR5cGU7XG5leHBvcnRzLlRvdWNoRXZlbnRUeXBlID0gVG91Y2hFdmVudFR5cGU7XG5cbihmdW5jdGlvbiAoVG91Y2hFdmVudFR5cGUpIHtcbiAgVG91Y2hFdmVudFR5cGVbVG91Y2hFdmVudFR5cGVbXCJVTkRFVEVSTUlORURcIl0gPSAwXSA9IFwiVU5ERVRFUk1JTkVEXCI7XG4gIFRvdWNoRXZlbnRUeXBlW1RvdWNoRXZlbnRUeXBlW1wiRE9XTlwiXSA9IDFdID0gXCJET1dOXCI7XG4gIFRvdWNoRXZlbnRUeXBlW1RvdWNoRXZlbnRUeXBlW1wiTU9WRVwiXSA9IDJdID0gXCJNT1ZFXCI7XG4gIFRvdWNoRXZlbnRUeXBlW1RvdWNoRXZlbnRUeXBlW1wiVVBcIl0gPSAzXSA9IFwiVVBcIjtcbiAgVG91Y2hFdmVudFR5cGVbVG91Y2hFdmVudFR5cGVbXCJDQU5DRUxMRURcIl0gPSA0XSA9IFwiQ0FOQ0VMTEVEXCI7XG59KShUb3VjaEV2ZW50VHlwZSB8fCAoZXhwb3J0cy5Ub3VjaEV2ZW50VHlwZSA9IFRvdWNoRXZlbnRUeXBlID0ge30pKTtcblxubGV0IFBvaW50ZXJUeXBlO1xuZXhwb3J0cy5Qb2ludGVyVHlwZSA9IFBvaW50ZXJUeXBlO1xuXG4oZnVuY3Rpb24gKFBvaW50ZXJUeXBlKSB7XG4gIFBvaW50ZXJUeXBlW1wiTk9ORVwiXSA9IFwibm9uZVwiO1xuICBQb2ludGVyVHlwZVtcIk1PVVNFXCJdID0gXCJtb3VzZVwiO1xuICBQb2ludGVyVHlwZVtcIlRPVUNIXCJdID0gXCJ0b3VjaFwiO1xuICBQb2ludGVyVHlwZVtcIlBFTlwiXSA9IFwicGVuXCI7XG59KShQb2ludGVyVHlwZSB8fCAoZXhwb3J0cy5Qb2ludGVyVHlwZSA9IFBvaW50ZXJUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUG9pbnRlclR5cGUiLCJUb3VjaEV2ZW50VHlwZSIsIkV2ZW50VHlwZXMiLCJNb3VzZUJ1dHRvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/* eslint-disable @typescript-eslint/no-empty-function */ class EventManager {\n    constructor(view){\n        _defineProperty(this, \"view\", void 0);\n        _defineProperty(this, \"pointersInBounds\", []);\n        _defineProperty(this, \"activePointersCounter\", void 0);\n        this.view = view;\n        this.activePointersCounter = 0;\n    }\n    onPointerDown(_event) {}\n    onPointerAdd(_event) {}\n    onPointerUp(_event) {}\n    onPointerRemove(_event) {}\n    onPointerMove(_event) {}\n    onPointerOut(_event) {}\n    onPointerEnter(_event) {}\n    onPointerCancel(_event) {\n    // Because we want all pointers to be cancelled by that event, we are doing it manually by reseting handler and changing activePointersCounter to 0\n    // Events that correspond to removing the pointer (pointerup, touchend) have condition, that they don't perform any action when activePointersCounter\n    // is equal to 0. This prevents counter from going to negative values, when pointers are removed from view after one of them has been cancelled\n    }\n    onPointerOutOfBounds(_event) {}\n    setOnPointerDown(callback) {\n        this.onPointerDown = callback;\n    }\n    setOnPointerAdd(callback) {\n        this.onPointerAdd = callback;\n    }\n    setOnPointerUp(callback) {\n        this.onPointerUp = callback;\n    }\n    setOnPointerRemove(callback) {\n        this.onPointerRemove = callback;\n    }\n    setOnPointerMove(callback) {\n        this.onPointerMove = callback;\n    }\n    setOnPointerOut(callback) {\n        this.onPointerOut = callback;\n    }\n    setOnPointerEnter(callback) {\n        this.onPointerEnter = callback;\n    }\n    setOnPointerCancel(callback) {\n        this.onPointerCancel = callback;\n    }\n    setOnPointerOutOfBounds(callback) {\n        this.onPointerOutOfBounds = callback;\n    }\n    markAsInBounds(pointerId) {\n        if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n            return;\n        }\n        this.pointersInBounds.push(pointerId);\n    }\n    markAsOutOfBounds(pointerId) {\n        const index = this.pointersInBounds.indexOf(pointerId);\n        if (index < 0) {\n            return;\n        }\n        this.pointersInBounds.splice(index, 1);\n    }\n    resetManager() {\n        // Reseting activePointersCounter is necessary to make gestures such as pinch work properly\n        // There are gestures that end when there is still one active pointer (like pinch/rotation)\n        // When these gestures end, they are reset, but they still receive events from pointer that is active\n        // This causes trouble, since only onPointerDown registers gesture in orchestrator, and while gestures receive\n        // Events from active pointer after they finished, next pointerdown event will be registered as additional pointer, not the first one\n        // This casues trouble like gestures getting stuck in END state, even though they should have gone to UNDETERMINED\n        this.activePointersCounter = 0;\n        this.pointersInBounds = [];\n    }\n}\nexports[\"default\"] = EventManager; //# sourceMappingURL=EventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _PointerTracker = _interopRequireDefault(__webpack_require__(/*! ./PointerTracker */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass GestureHandlerOrchestrator {\n    // Private beacuse of Singleton\n    // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n    constructor(){\n        _defineProperty(this, \"gestureHandlers\", []);\n        _defineProperty(this, \"awaitingHandlers\", []);\n        _defineProperty(this, \"handlersToCancel\", []);\n        _defineProperty(this, \"handlingChangeSemaphore\", 0);\n        _defineProperty(this, \"activationIndex\", 0);\n    }\n    scheduleFinishedHandlersCleanup() {\n        if (this.handlingChangeSemaphore === 0) {\n            this.cleanupFinishedHandlers();\n        }\n    }\n    cleanHandler(handler) {\n        handler.reset();\n        handler.setActive(false);\n        handler.setAwaiting(false);\n        handler.setActivationIndex(Number.MAX_VALUE);\n    }\n    removeHandlerFromOrchestrator(handler) {\n        this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n        this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n        this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n    }\n    cleanupFinishedHandlers() {\n        for(let i = this.gestureHandlers.length - 1; i >= 0; --i){\n            const handler = this.gestureHandlers[i];\n            if (!handler) {\n                continue;\n            }\n            if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n                this.gestureHandlers.splice(i, 1);\n                this.cleanHandler(handler);\n            }\n        }\n    }\n    hasOtherHandlerToWaitFor(handler) {\n        let hasToWait = false;\n        this.gestureHandlers.forEach((otherHandler)=>{\n            if (otherHandler && !this.isFinished(otherHandler.getState()) && this.shouldHandlerWaitForOther(handler, otherHandler)) {\n                hasToWait = true;\n                return;\n            }\n        });\n        return hasToWait;\n    }\n    tryActivate(handler) {\n        if (this.hasOtherHandlerToWaitFor(handler)) {\n            this.addAwaitingHandler(handler);\n        } else if (handler.getState() !== _State.State.CANCELLED && handler.getState() !== _State.State.FAILED) {\n            if (this.shouldActivate(handler)) {\n                this.makeActive(handler);\n            } else {\n                switch(handler.getState()){\n                    case _State.State.ACTIVE:\n                        handler.fail();\n                        break;\n                    case _State.State.BEGAN:\n                        handler.cancel();\n                }\n            }\n        }\n    }\n    shouldActivate(handler) {\n        for (const otherHandler of this.gestureHandlers){\n            if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    cleanupAwaitingHandlers(handler) {\n        for(let i = 0; i < this.awaitingHandlers.length; ++i){\n            if (!this.awaitingHandlers[i].isAwaiting() && this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)) {\n                this.cleanHandler(this.awaitingHandlers[i]);\n                this.awaitingHandlers.splice(i, 1);\n            }\n        }\n    }\n    onHandlerStateChange(handler, newState, oldState, sendIfDisabled) {\n        if (!handler.isEnabled() && !sendIfDisabled) {\n            return;\n        }\n        this.handlingChangeSemaphore += 1;\n        if (this.isFinished(newState)) {\n            this.awaitingHandlers.forEach((otherHandler)=>{\n                if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n                    if (newState === _State.State.END) {\n                        otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n                        if (otherHandler.getState() === _State.State.END) {\n                            // Handle edge case, where discrete gestures end immediately after activation thus\n                            // their state is set to END and when the gesture they are waiting for activates they\n                            // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n                            // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n                            otherHandler.sendEvent(_State.State.CANCELLED, _State.State.BEGAN);\n                        }\n                        otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(false);\n                    } else {\n                        this.tryActivate(otherHandler);\n                    }\n                }\n            });\n        }\n        if (newState === _State.State.ACTIVE) {\n            this.tryActivate(handler);\n        } else if (oldState === _State.State.ACTIVE || oldState === _State.State.END) {\n            if (handler.isActive()) {\n                handler.sendEvent(newState, oldState);\n            } else if (oldState === _State.State.ACTIVE && (newState === _State.State.CANCELLED || newState === _State.State.FAILED)) {\n                handler.sendEvent(newState, _State.State.BEGAN);\n            }\n        } else if (oldState !== _State.State.UNDETERMINED || newState !== _State.State.CANCELLED) {\n            handler.sendEvent(newState, oldState);\n        }\n        this.handlingChangeSemaphore -= 1;\n        this.scheduleFinishedHandlersCleanup();\n        if (this.awaitingHandlers.indexOf(handler) < 0) {\n            this.cleanupAwaitingHandlers(handler);\n        }\n    }\n    makeActive(handler) {\n        const currentState = handler.getState();\n        handler.setActive(true);\n        handler.setShouldResetProgress(true);\n        handler.setActivationIndex(this.activationIndex++);\n        this.gestureHandlers.forEach((otherHandler)=>{\n            // Order of arguments is correct - we check whether current handler should cancel existing handlers\n            if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n                this.handlersToCancel.push(otherHandler);\n            }\n        });\n        for(let i = this.handlersToCancel.length - 1; i >= 0; --i){\n            var _this$handlersToCance;\n            (_this$handlersToCance = this.handlersToCancel[i]) === null || _this$handlersToCance === void 0 ? void 0 : _this$handlersToCance.cancel();\n        }\n        this.awaitingHandlers.forEach((otherHandler)=>{\n            if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n                otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n                otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(true);\n            }\n        });\n        handler.sendEvent(_State.State.ACTIVE, _State.State.BEGAN);\n        if (currentState !== _State.State.ACTIVE) {\n            handler.sendEvent(_State.State.END, _State.State.ACTIVE);\n            if (currentState !== _State.State.END) {\n                handler.sendEvent(_State.State.UNDETERMINED, _State.State.END);\n            }\n        }\n        if (handler.isAwaiting()) {\n            handler.setAwaiting(false);\n            for(let i = 0; i < this.awaitingHandlers.length; ++i){\n                if (this.awaitingHandlers[i] === handler) {\n                    this.awaitingHandlers.splice(i, 1);\n                }\n            }\n        }\n        this.handlersToCancel = [];\n    }\n    addAwaitingHandler(handler) {\n        let alreadyExists = false;\n        this.awaitingHandlers.forEach((otherHandler)=>{\n            if (otherHandler === handler) {\n                alreadyExists = true;\n                return;\n            }\n        });\n        if (alreadyExists) {\n            return;\n        }\n        this.awaitingHandlers.push(handler);\n        handler.setAwaiting(true);\n        handler.setActivationIndex(this.activationIndex++);\n    }\n    recordHandlerIfNotPresent(handler) {\n        let alreadyExists = false;\n        this.gestureHandlers.forEach((otherHandler)=>{\n            if (otherHandler === handler) {\n                alreadyExists = true;\n                return;\n            }\n        });\n        if (alreadyExists) {\n            return;\n        }\n        this.gestureHandlers.push(handler);\n        handler.setActive(false);\n        handler.setAwaiting(false);\n        handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n    }\n    shouldHandlerWaitForOther(handler, otherHandler) {\n        return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n    }\n    canRunSimultaneously(gh1, gh2) {\n        return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n    }\n    shouldHandlerBeCancelledBy(handler, otherHandler) {\n        if (this.canRunSimultaneously(handler, otherHandler)) {\n            return false;\n        }\n        if (handler !== otherHandler && (handler.isAwaiting() || handler.getState() === _State.State.ACTIVE)) {\n            // For now it always returns false\n            return handler.shouldBeCancelledByOther(otherHandler);\n        }\n        const handlerPointers = handler.getTrackedPointersID();\n        const otherPointers = otherHandler.getTrackedPointersID();\n        if (!_PointerTracker.default.shareCommonPointers(handlerPointers, otherPointers) && handler.getView() !== otherHandler.getView()) {\n            return this.checkOverlap(handler, otherHandler);\n        }\n        return true;\n    }\n    checkOverlap(handler, otherHandler) {\n        // If handlers don't have common pointers, default return value is false.\n        // However, if at least on pointer overlaps with both handlers, we return true\n        // This solves issue in overlapping parents example\n        // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n        const handlerPointers = handler.getTrackedPointersID();\n        const otherPointers = otherHandler.getTrackedPointersID();\n        let overlap = false;\n        handlerPointers.forEach((pointer)=>{\n            const handlerX = handler.getTracker().getLastX(pointer);\n            const handlerY = handler.getTracker().getLastY(pointer);\n            if ((0, _utils.isPointerInBounds)(handler.getView(), {\n                x: handlerX,\n                y: handlerY\n            }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n                x: handlerX,\n                y: handlerY\n            })) {\n                overlap = true;\n            }\n        });\n        otherPointers.forEach((pointer)=>{\n            const otherX = otherHandler.getTracker().getLastX(pointer);\n            const otherY = otherHandler.getTracker().getLastY(pointer);\n            if ((0, _utils.isPointerInBounds)(handler.getView(), {\n                x: otherX,\n                y: otherY\n            }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n                x: otherX,\n                y: otherY\n            })) {\n                overlap = true;\n            }\n        });\n        return overlap;\n    }\n    isFinished(state) {\n        return state === _State.State.END || state === _State.State.FAILED || state === _State.State.CANCELLED;\n    }\n    // If handler is using mouse or pen as a pointer and any handler receives touch event,\n    // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n    // This became a problem because handler was left at active state without any signal to end or fail\n    // To handle this, when new touch event is received, we loop through active handlers and check which type of\n    // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n    cancelMouseAndPenGestures(currentHandler) {\n        this.gestureHandlers.forEach((handler)=>{\n            if (handler.getPointerType() !== _interfaces.PointerType.MOUSE && handler.getPointerType() !== _interfaces.PointerType.PEN) {\n                return;\n            }\n            if (handler !== currentHandler) {\n                handler.cancel();\n            } else {\n                // Handler that received touch event should have its pointer tracker reset\n                // This allows handler to smoothly change from mouse/pen to touch\n                // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n                // so it is required to click two times to get handler to work\n                //\n                // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n                // There may be possibility to use that fact to make handler respond properly to first mouse click\n                handler.getTracker().resetTracker();\n            }\n        });\n    }\n    static getInstance() {\n        if (!GestureHandlerOrchestrator.instance) {\n            GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n        }\n        return GestureHandlerOrchestrator.instance;\n    }\n}\nexports[\"default\"] = GestureHandlerOrchestrator;\n_defineProperty(GestureHandlerOrchestrator, \"instance\", void 0); //# sourceMappingURL=GestureHandlerOrchestrator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass InteractionManager {\n    // Private becaues of singleton\n    // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n    constructor(){\n        _defineProperty(this, \"waitForRelations\", new Map());\n        _defineProperty(this, \"simultaneousRelations\", new Map());\n    }\n    configureInteractions(handler, config) {\n        this.dropRelationsForHandlerWithTag(handler.getTag());\n        if (config.waitFor) {\n            const waitFor = [];\n            config.waitFor.forEach((otherHandler)=>{\n                // New API reference\n                if (typeof otherHandler === \"number\") {\n                    waitFor.push(otherHandler);\n                } else {\n                    // Old API reference\n                    waitFor.push(otherHandler.handlerTag);\n                }\n            });\n            this.waitForRelations.set(handler.getTag(), waitFor);\n        }\n        if (config.simultaneousHandlers) {\n            const simultaneousHandlers = [];\n            config.simultaneousHandlers.forEach((otherHandler)=>{\n                if (typeof otherHandler === \"number\") {\n                    simultaneousHandlers.push(otherHandler);\n                } else {\n                    simultaneousHandlers.push(otherHandler.handlerTag);\n                }\n            });\n            this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n        }\n    }\n    shouldWaitForHandlerFailure(handler, otherHandler) {\n        const waitFor = this.waitForRelations.get(handler.getTag());\n        if (!waitFor) {\n            return false;\n        }\n        let shouldWait = false;\n        waitFor.forEach((tag)=>{\n            if (tag === otherHandler.getTag()) {\n                shouldWait = true;\n                return; //Returns from callback\n            }\n        });\n        return shouldWait;\n    }\n    shouldRecognizeSimultaneously(handler, otherHandler) {\n        const simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n        if (!simultaneousHandlers) {\n            return false;\n        }\n        let shouldRecognizeSimultaneously = false;\n        simultaneousHandlers.forEach((tag)=>{\n            if (tag === otherHandler.getTag()) {\n                shouldRecognizeSimultaneously = true;\n                return;\n            }\n        });\n        return shouldRecognizeSimultaneously;\n    }\n    shouldRequireHandlerToWaitForFailure(_handler, _otherHandler) {\n        //TODO: Implement logic\n        return false;\n    }\n    shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n        //TODO: Implement logic\n        return false;\n    }\n    dropRelationsForHandlerWithTag(handlerTag) {\n        this.waitForRelations.delete(handlerTag);\n        this.simultaneousRelations.delete(handlerTag);\n    }\n    reset() {\n        this.waitForRelations.clear();\n        this.simultaneousRelations.clear();\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new InteractionManager();\n        }\n        return this.instance;\n    }\n}\nexports[\"default\"] = InteractionManager;\n_defineProperty(InteractionManager, \"instance\", void 0); //# sourceMappingURL=InteractionManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass NodeManager {\n    static getHandler(tag) {\n        if (tag in this.gestures) {\n            return this.gestures[tag];\n        }\n        throw new Error(`No handler for tag ${tag}`);\n    }\n    static createGestureHandler(handlerTag, handler) {\n        if (handlerTag in this.gestures) {\n            throw new Error(`Handler with tag ${handlerTag} already exists`);\n        }\n        this.gestures[handlerTag] = handler;\n        this.gestures[handlerTag].setTag(handlerTag);\n    }\n    static dropGestureHandler(handlerTag) {\n        if (!(handlerTag in this.gestures)) {\n            return;\n        } // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this.gestures[handlerTag];\n    }\n    static getNodes() {\n        return {\n            ...this.gestures\n        };\n    }\n}\nexports[\"default\"] = NodeManager;\n_defineProperty(NodeManager, \"gestures\", {}); //# sourceMappingURL=NodeManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3Rvb2xzL05vZGVNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsU0FBU0csZ0JBQWdCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUosS0FBSztJQUFJLElBQUlJLE9BQU9ELEtBQUs7UUFBRU4sT0FBT0MsY0FBYyxDQUFDSyxLQUFLQyxLQUFLO1lBQUVKLE9BQU9BO1lBQU9LLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHSjtJQUFPO0lBQUUsT0FBT0c7QUFBSztBQUVoTixrRUFBa0U7QUFDbEUsTUFBTUs7SUFDSixPQUFPQyxXQUFXQyxHQUFHLEVBQUU7UUFDckIsSUFBSUEsT0FBTyxJQUFJLENBQUNDLFFBQVEsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQ0EsUUFBUSxDQUFDRCxJQUFJO1FBQzNCO1FBRUEsTUFBTSxJQUFJRSxNQUFNLENBQUMsbUJBQW1CLEVBQUVGLElBQUksQ0FBQztJQUM3QztJQUVBLE9BQU9HLHFCQUFxQkMsVUFBVSxFQUFFQyxPQUFPLEVBQUU7UUFDL0MsSUFBSUQsY0FBYyxJQUFJLENBQUNILFFBQVEsRUFBRTtZQUMvQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRUUsV0FBVyxlQUFlLENBQUM7UUFDakU7UUFFQSxJQUFJLENBQUNILFFBQVEsQ0FBQ0csV0FBVyxHQUFHQztRQUM1QixJQUFJLENBQUNKLFFBQVEsQ0FBQ0csV0FBVyxDQUFDRSxNQUFNLENBQUNGO0lBQ25DO0lBRUEsT0FBT0csbUJBQW1CSCxVQUFVLEVBQUU7UUFDcEMsSUFBSSxDQUFFQSxDQUFBQSxjQUFjLElBQUksQ0FBQ0gsUUFBUSxHQUFHO1lBQ2xDO1FBQ0YsRUFBRSxnRUFBZ0U7UUFHbEUsT0FBTyxJQUFJLENBQUNBLFFBQVEsQ0FBQ0csV0FBVztJQUNsQztJQUVBLE9BQU9JLFdBQVc7UUFDaEIsT0FBTztZQUFFLEdBQUcsSUFBSSxDQUFDUCxRQUFRO1FBQ3pCO0lBQ0Y7QUFFRjtBQUVBWixrQkFBZSxHQUFHUztBQUVsQk4sZ0JBQWdCTSxhQUFhLFlBQVksQ0FBQyxJQUMxQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3Rvb2xzL05vZGVNYW5hZ2VyLmpzPzBiYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXh0cmFuZW91cy1jbGFzc1xuY2xhc3MgTm9kZU1hbmFnZXIge1xuICBzdGF0aWMgZ2V0SGFuZGxlcih0YWcpIHtcbiAgICBpZiAodGFnIGluIHRoaXMuZ2VzdHVyZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmdlc3R1cmVzW3RhZ107XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBoYW5kbGVyIGZvciB0YWcgJHt0YWd9YCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlR2VzdHVyZUhhbmRsZXIoaGFuZGxlclRhZywgaGFuZGxlcikge1xuICAgIGlmIChoYW5kbGVyVGFnIGluIHRoaXMuZ2VzdHVyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSGFuZGxlciB3aXRoIHRhZyAke2hhbmRsZXJUYWd9IGFscmVhZHkgZXhpc3RzYCk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXN0dXJlc1toYW5kbGVyVGFnXSA9IGhhbmRsZXI7XG4gICAgdGhpcy5nZXN0dXJlc1toYW5kbGVyVGFnXS5zZXRUYWcoaGFuZGxlclRhZyk7XG4gIH1cblxuICBzdGF0aWMgZHJvcEdlc3R1cmVIYW5kbGVyKGhhbmRsZXJUYWcpIHtcbiAgICBpZiAoIShoYW5kbGVyVGFnIGluIHRoaXMuZ2VzdHVyZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG5cblxuICAgIGRlbGV0ZSB0aGlzLmdlc3R1cmVzW2hhbmRsZXJUYWddO1xuICB9XG5cbiAgc3RhdGljIGdldE5vZGVzKCkge1xuICAgIHJldHVybiB7IC4uLnRoaXMuZ2VzdHVyZXNcbiAgICB9O1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gTm9kZU1hbmFnZXI7XG5cbl9kZWZpbmVQcm9wZXJ0eShOb2RlTWFuYWdlciwgXCJnZXN0dXJlc1wiLCB7fSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob2RlTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiTm9kZU1hbmFnZXIiLCJnZXRIYW5kbGVyIiwidGFnIiwiZ2VzdHVyZXMiLCJFcnJvciIsImNyZWF0ZUdlc3R1cmVIYW5kbGVyIiwiaGFuZGxlclRhZyIsImhhbmRsZXIiLCJzZXRUYWciLCJkcm9wR2VzdHVyZUhhbmRsZXIiLCJnZXROb2RlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _EventManager = _interopRequireDefault(__webpack_require__(/*! ./EventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PointerEventManager extends _EventManager.default {\n    setListeners() {\n        this.view.addEventListener(\"pointerdown\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            if (!(0, _utils.isPointerInBounds)(this.view, {\n                x: event.clientX,\n                y: event.clientY\n            })) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.DOWN);\n            const target = event.target;\n            target.setPointerCapture(adaptedEvent.pointerId);\n            this.markAsInBounds(adaptedEvent.pointerId);\n            if (++this.activePointersCounter > 1) {\n                adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n                this.onPointerAdd(adaptedEvent);\n            } else {\n                this.onPointerDown(adaptedEvent);\n            }\n        });\n        this.view.addEventListener(\"pointerup\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            } // When we call reset on gesture handlers, it also resets their event managers\n            // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n            // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n            // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n            if (this.activePointersCounter === 0) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.UP);\n            const target = event.target;\n            target.releasePointerCapture(adaptedEvent.pointerId);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n            if (--this.activePointersCounter > 0) {\n                adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n                this.onPointerRemove(adaptedEvent);\n            } else {\n                this.onPointerUp(adaptedEvent);\n            }\n        });\n        this.view.addEventListener(\"pointermove\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            if (event.pointerType === _interfaces.PointerType.MOUSE && event.buttons !== _interfaces.MouseButtons.LEFT) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.MOVE);\n            const inBounds = (0, _utils.isPointerInBounds)(this.view, {\n                x: adaptedEvent.x,\n                y: adaptedEvent.y\n            });\n            const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n            if (inBounds) {\n                if (pointerIndex < 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n                    this.onPointerEnter(adaptedEvent);\n                    this.markAsInBounds(adaptedEvent.pointerId);\n                } else {\n                    this.onPointerMove(adaptedEvent);\n                }\n            } else {\n                if (pointerIndex >= 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.OUT;\n                    this.onPointerOut(adaptedEvent);\n                    this.markAsOutOfBounds(adaptedEvent.pointerId);\n                } else {\n                    this.onPointerOutOfBounds(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"pointercancel\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.CANCEL);\n            this.onPointerCancel(adaptedEvent);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n            this.activePointersCounter = 0;\n        });\n    }\n    mapEvent(event, eventType) {\n        return {\n            x: event.clientX,\n            y: event.clientY,\n            offsetX: event.offsetX,\n            offsetY: event.offsetY,\n            pointerId: event.pointerId,\n            eventType: eventType,\n            pointerType: event.pointerType,\n            buttons: event.buttons,\n            time: event.timeStamp\n        };\n    }\n}\nexports[\"default\"] = PointerEventManager; //# sourceMappingURL=PointerEventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\nclass PointerTracker {\n    constructor(){\n        _defineProperty(this, \"trackedPointers\", new Map());\n        _defineProperty(this, \"touchEventsIds\", new Map());\n        _defineProperty(this, \"lastMovedPointerId\", void 0);\n        _defineProperty(this, \"cachedAverages\", {\n            x: 0,\n            y: 0\n        });\n        this.lastMovedPointerId = NaN;\n        for(let i = 0; i < MAX_POINTERS; ++i){\n            this.touchEventsIds.set(i, NaN);\n        }\n    }\n    addToTracker(event) {\n        if (this.trackedPointers.has(event.pointerId)) {\n            return;\n        }\n        this.lastMovedPointerId = event.pointerId;\n        const newElement = {\n            lastX: event.x,\n            lastY: event.y,\n            timeStamp: event.time,\n            velocityX: 0,\n            velocityY: 0\n        };\n        this.trackedPointers.set(event.pointerId, newElement);\n        this.mapTouchEventId(event.pointerId);\n        this.cachedAverages = {\n            x: this.getLastAvgX(),\n            y: this.getLastAvgY()\n        };\n    }\n    removeFromTracker(pointerId) {\n        this.trackedPointers.delete(pointerId);\n        this.removeMappedTouchId(pointerId);\n    }\n    track(event) {\n        const element = this.trackedPointers.get(event.pointerId);\n        if (!element) {\n            return;\n        }\n        this.lastMovedPointerId = event.pointerId;\n        const dx = event.x - element.lastX;\n        const dy = event.y - element.lastY;\n        const dt = event.time - element.timeStamp;\n        element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n        element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n        element.lastX = event.x;\n        element.lastY = event.y;\n        this.trackedPointers.set(event.pointerId, element);\n        const avgX = this.getLastAvgX();\n        const avgY = this.getLastAvgY();\n        this.cachedAverages = {\n            x: avgX,\n            y: avgY\n        };\n    }\n    mapTouchEventId(id) {\n        for (const [mappedId, touchId] of this.touchEventsIds){\n            if (isNaN(touchId)) {\n                this.touchEventsIds.set(mappedId, id);\n                break;\n            }\n        }\n    }\n    removeMappedTouchId(id) {\n        const mappedId = this.getMappedTouchEventId(id);\n        if (!isNaN(mappedId)) {\n            this.touchEventsIds.set(mappedId, NaN);\n        }\n    }\n    getMappedTouchEventId(touchEventId) {\n        for (const [key, value] of this.touchEventsIds.entries()){\n            if (value === touchEventId) {\n                return key;\n            }\n        }\n        return NaN;\n    }\n    getVelocityX(pointerId) {\n        var _this$trackedPointers;\n        return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n    getVelocityY(pointerId) {\n        var _this$trackedPointers2;\n        return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n    /**\n   * Returns X coordinate of last moved pointer\n   */ getLastX(pointerId) {\n        if (pointerId !== undefined) {\n            var _this$trackedPointers3;\n            return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n        } else {\n            var _this$trackedPointers4;\n            return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n        }\n    }\n    /**\n   * Returns Y coordinate of last moved pointer\n   */ getLastY(pointerId) {\n        if (pointerId !== undefined) {\n            var _this$trackedPointers5;\n            return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n        } else {\n            var _this$trackedPointers6;\n            return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n        }\n    }\n    // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n    // In situation when NaN would be sent as a response, we return cached value.\n    // That prevents handlers from crashing\n    getLastAvgX() {\n        const avgX = this.getSumX() / this.trackedPointers.size;\n        return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n    getLastAvgY() {\n        const avgY = this.getSumY() / this.trackedPointers.size;\n        return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n    getSumX(ignoredPointer) {\n        let sumX = 0;\n        this.trackedPointers.forEach((value, key)=>{\n            if (key !== ignoredPointer) {\n                sumX += value.lastX;\n            }\n        });\n        return sumX;\n    }\n    getSumY(ignoredPointer) {\n        let sumY = 0;\n        this.trackedPointers.forEach((value, key)=>{\n            if (key !== ignoredPointer) {\n                sumY += value.lastY;\n            }\n        });\n        return sumY;\n    }\n    getTrackedPointersCount() {\n        return this.trackedPointers.size;\n    }\n    getTrackedPointersID() {\n        const keys = [];\n        this.trackedPointers.forEach((_value, key)=>{\n            keys.push(key);\n        });\n        return keys;\n    }\n    getData() {\n        return this.trackedPointers;\n    }\n    resetTracker() {\n        this.trackedPointers.clear();\n        this.lastMovedPointerId = NaN;\n        for(let i = 0; i < MAX_POINTERS; ++i){\n            this.touchEventsIds.set(i, NaN);\n        }\n    }\n    static shareCommonPointers(stPointers, ndPointers) {\n        return stPointers.some((pointerId)=>ndPointers.includes(pointerId));\n    }\n}\nexports[\"default\"] = PointerTracker; //# sourceMappingURL=PointerTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _EventManager = _interopRequireDefault(__webpack_require__(/*! ./EventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass TouchEventManager extends _EventManager.default {\n    setListeners() {\n        this.view.addEventListener(\"touchstart\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.DOWN, i, _interfaces.TouchEventType.DOWN); // Here we skip stylus, because in case of anything different than touch we want to handle it by using PointerEvents\n                // If we leave stylus to send touch events, handlers will receive every action twice\n                if (!(0, _utils.isPointerInBounds)(this.view, {\n                    x: adaptedEvent.x,\n                    y: adaptedEvent.y\n                }) || //@ts-ignore touchType field does exist\n                event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                this.markAsInBounds(adaptedEvent.pointerId);\n                if (++this.activePointersCounter > 1) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n                    this.onPointerAdd(adaptedEvent);\n                } else {\n                    this.onPointerDown(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"touchmove\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.MOVE, i, _interfaces.TouchEventType.MOVE); //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                const inBounds = (0, _utils.isPointerInBounds)(this.view, {\n                    x: adaptedEvent.x,\n                    y: adaptedEvent.y\n                });\n                const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n                if (inBounds) {\n                    if (pointerIndex < 0) {\n                        adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n                        this.onPointerEnter(adaptedEvent);\n                        this.markAsInBounds(adaptedEvent.pointerId);\n                    } else {\n                        this.onPointerMove(adaptedEvent);\n                    }\n                } else {\n                    if (pointerIndex >= 0) {\n                        adaptedEvent.eventType = _interfaces.EventTypes.OUT;\n                        this.onPointerOut(adaptedEvent);\n                        this.markAsOutOfBounds(adaptedEvent.pointerId);\n                    } else {\n                        this.onPointerOutOfBounds(adaptedEvent);\n                    }\n                }\n            }\n        });\n        this.view.addEventListener(\"touchend\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                // When we call reset on gesture handlers, it also resets their event managers\n                // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n                // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n                // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n                if (this.activePointersCounter === 0) {\n                    break;\n                } //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.UP, i, _interfaces.TouchEventType.UP);\n                this.markAsOutOfBounds(adaptedEvent.pointerId);\n                if (--this.activePointersCounter > 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n                    this.onPointerRemove(adaptedEvent);\n                } else {\n                    this.onPointerUp(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"touchcancel\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.CANCEL, i, _interfaces.TouchEventType.CANCELLED); //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                this.onPointerCancel(adaptedEvent);\n                this.markAsOutOfBounds(adaptedEvent.pointerId);\n                this.activePointersCounter = 0;\n            }\n        });\n    }\n    mapEvent(event, eventType, index, touchEventType) {\n        const rect = this.view.getBoundingClientRect();\n        const clientX = event.changedTouches[index].clientX;\n        const clientY = event.changedTouches[index].clientY;\n        return {\n            x: clientX,\n            y: clientY,\n            offsetX: clientX - rect.left,\n            offsetY: clientY - rect.top,\n            pointerId: event.changedTouches[index].identifier,\n            eventType: eventType,\n            pointerType: _interfaces.PointerType.TOUCH,\n            buttons: _interfaces.MouseButtons.NONE,\n            time: event.timeStamp,\n            allTouches: event.touches,\n            changedTouches: event.changedTouches,\n            touchEventType: touchEventType\n        };\n    }\n}\nexports[\"default\"] = TouchEventManager; //# sourceMappingURL=TouchEventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isPointerInBounds = isPointerInBounds;\nfunction isPointerInBounds(view, { x, y }) {\n    const rect = view.getBoundingClientRect();\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx5QkFBeUIsR0FBR0U7QUFFNUIsU0FBU0Esa0JBQWtCQyxJQUFJLEVBQUUsRUFDL0JDLENBQUMsRUFDREMsQ0FBQyxFQUNGO0lBQ0MsTUFBTUMsT0FBT0gsS0FBS0kscUJBQXFCO0lBQ3ZDLE9BQU9ILEtBQUtFLEtBQUtFLElBQUksSUFBSUosS0FBS0UsS0FBS0csS0FBSyxJQUFJSixLQUFLQyxLQUFLSSxHQUFHLElBQUlMLEtBQUtDLEtBQUtLLE1BQU07QUFDL0UsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3V0aWxzLmpzPzFhZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzUG9pbnRlckluQm91bmRzID0gaXNQb2ludGVySW5Cb3VuZHM7XG5cbmZ1bmN0aW9uIGlzUG9pbnRlckluQm91bmRzKHZpZXcsIHtcbiAgeCxcbiAgeVxufSkge1xuICBjb25zdCByZWN0ID0gdmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHggPj0gcmVjdC5sZWZ0ICYmIHggPD0gcmVjdC5yaWdodCAmJiB5ID49IHJlY3QudG9wICYmIHkgPD0gcmVjdC5ib3R0b207XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1BvaW50ZXJJbkJvdW5kcyIsInZpZXciLCJ4IiwieSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class DiscreteGestureHandler extends _GestureHandler.default {\n    get isDiscrete() {\n        return true;\n    }\n    get shouldEnableGestureOnSetup() {\n        return true;\n    }\n    shouldFailUnderCustomCriteria({ x, y, deltaX, deltaY }, { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }) {\n        if (shouldCancelWhenOutside) {\n            if (!this.isPointInView({\n                x,\n                y\n            })) {\n                return true;\n            }\n        }\n        return (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaX), maxDeltaX) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY), maxDeltaY) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n    transformNativeEvent({ center: { x, y } }) {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        return {\n            absoluteX: x,\n            absoluteY: y,\n            x: x - rect.left,\n            y: y - rect.top\n        };\n    }\n    isGestureEnabledForEvent({ minPointers, maxPointers, maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }, _recognizer, { maxPointers: pointerLength, center, deltaX, deltaY }) {\n        const validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n        if (this.shouldFailUnderCustomCriteria({\n            ...center,\n            deltaX,\n            deltaY\n        }, {\n            maxDeltaX,\n            maxDeltaY,\n            maxDistSq,\n            shouldCancelWhenOutside\n        }) || // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n        // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n        !validPointerCount && this.isGestureRunning) {\n            return {\n                failed: true\n            };\n        }\n        return {\n            success: validPointerCount\n        };\n    }\n}\nvar _default = DiscreteGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=DiscreteGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLCtHQUFrQjtBQUV2RSxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyw2RkFBUztBQUU5QixTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLHVEQUF1RCxHQUV2RCxrQkFBa0IsR0FDbEIsTUFBTUUsK0JBQStCTixnQkFBZ0JELE9BQU87SUFDMUQsSUFBSVEsYUFBYTtRQUNmLE9BQU87SUFDVDtJQUVBLElBQUlDLDZCQUE2QjtRQUMvQixPQUFPO0lBQ1Q7SUFFQUMsOEJBQThCLEVBQzVCQyxDQUFDLEVBQ0RDLENBQUMsRUFDREMsTUFBTSxFQUNOQyxNQUFNLEVBQ1AsRUFBRSxFQUNEQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyx1QkFBdUIsRUFDeEIsRUFBRTtRQUNELElBQUlBLHlCQUF5QjtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDQyxhQUFhLENBQUM7Z0JBQ3RCUjtnQkFDQUM7WUFDRixJQUFJO2dCQUNGLE9BQU87WUFDVDtRQUNGO1FBRUEsT0FBTyxDQUFDLEdBQUdSLE9BQU9nQixtQkFBbUIsRUFBRUMsS0FBS0MsR0FBRyxDQUFDVCxTQUFTRSxjQUFjLENBQUMsR0FBR1gsT0FBT2dCLG1CQUFtQixFQUFFQyxLQUFLQyxHQUFHLENBQUNSLFNBQVNFLGNBQWMsQ0FBQyxHQUFHWixPQUFPZ0IsbUJBQW1CLEVBQUVDLEtBQUtDLEdBQUcsQ0FBQ1IsU0FBU0EsU0FBU0QsU0FBU0EsU0FBU0k7SUFDdE47SUFFQU0scUJBQXFCLEVBQ25CQyxRQUFRLEVBQ05iLENBQUMsRUFDREMsQ0FBQyxFQUNGLEVBQ0YsRUFBRTtRQUNELHVCQUF1QjtRQUN2QixNQUFNYSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxxQkFBcUI7UUFDNUMsT0FBTztZQUNMQyxXQUFXakI7WUFDWGtCLFdBQVdqQjtZQUNYRCxHQUFHQSxJQUFJYyxLQUFLSyxJQUFJO1lBQ2hCbEIsR0FBR0EsSUFBSWEsS0FBS00sR0FBRztRQUNqQjtJQUNGO0lBRUFDLHlCQUF5QixFQUN2QkMsV0FBVyxFQUNYQyxXQUFXLEVBQ1huQixTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyx1QkFBdUIsRUFDeEIsRUFBRWlCLFdBQVcsRUFBRSxFQUNkRCxhQUFhRSxhQUFhLEVBQzFCWixNQUFNLEVBQ05YLE1BQU0sRUFDTkMsTUFBTSxFQUNQLEVBQUU7UUFDRCxNQUFNdUIsb0JBQW9CRCxpQkFBaUJILGVBQWVHLGlCQUFpQkY7UUFFM0UsSUFBSSxJQUFJLENBQUN4Qiw2QkFBNkIsQ0FBQztZQUFFLEdBQUdjLE1BQU07WUFDaERYO1lBQ0FDO1FBQ0YsR0FBRztZQUNEQztZQUNBQztZQUNBQztZQUNBQztRQUNGLE1BQU0sd0dBQXdHO1FBQzlHLG9HQUFvRztRQUNwRyxDQUFDbUIscUJBQXFCLElBQUksQ0FBQ0MsZ0JBQWdCLEVBQUU7WUFDM0MsT0FBTztnQkFDTEMsUUFBUTtZQUNWO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xDLFNBQVNIO1FBQ1g7SUFDRjtBQUVGO0FBRUEsSUFBSUksV0FBV2xDO0FBQ2ZULGtCQUFlLEdBQUcyQyxVQUNsQixrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzPzQzZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfR2VzdHVyZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dlc3R1cmVIYW5kbGVyXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGUgKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNsYXNzIERpc2NyZXRlR2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGdldCBpc0Rpc2NyZXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0IHNob3VsZEVuYWJsZUdlc3R1cmVPblNldHVwKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc2hvdWxkRmFpbFVuZGVyQ3VzdG9tQ3JpdGVyaWEoe1xuICAgIHgsXG4gICAgeSxcbiAgICBkZWx0YVgsXG4gICAgZGVsdGFZXG4gIH0sIHtcbiAgICBtYXhEZWx0YVgsXG4gICAgbWF4RGVsdGFZLFxuICAgIG1heERpc3RTcSxcbiAgICBzaG91bGRDYW5jZWxXaGVuT3V0c2lkZVxuICB9KSB7XG4gICAgaWYgKHNob3VsZENhbmNlbFdoZW5PdXRzaWRlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNQb2ludEluVmlldyh7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3V0aWxzLlRFU1RfTUFYX0lGX05PVF9OQU4pKE1hdGguYWJzKGRlbHRhWCksIG1heERlbHRhWCkgfHwgKDAsIF91dGlscy5URVNUX01BWF9JRl9OT1RfTkFOKShNYXRoLmFicyhkZWx0YVkpLCBtYXhEZWx0YVkpIHx8ICgwLCBfdXRpbHMuVEVTVF9NQVhfSUZfTk9UX05BTikoTWF0aC5hYnMoZGVsdGFZICogZGVsdGFZICsgZGVsdGFYICogZGVsdGFYKSwgbWF4RGlzdFNxKTtcbiAgfVxuXG4gIHRyYW5zZm9ybU5hdGl2ZUV2ZW50KHtcbiAgICBjZW50ZXI6IHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfVxuICB9KSB7XG4gICAgLy8gQHRzLWlnbm9yZSBGSVhNRShUUylcbiAgICBjb25zdCByZWN0ID0gdGhpcy52aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICBhYnNvbHV0ZVg6IHgsXG4gICAgICBhYnNvbHV0ZVk6IHksXG4gICAgICB4OiB4IC0gcmVjdC5sZWZ0LFxuICAgICAgeTogeSAtIHJlY3QudG9wXG4gICAgfTtcbiAgfVxuXG4gIGlzR2VzdHVyZUVuYWJsZWRGb3JFdmVudCh7XG4gICAgbWluUG9pbnRlcnMsXG4gICAgbWF4UG9pbnRlcnMsXG4gICAgbWF4RGVsdGFYLFxuICAgIG1heERlbHRhWSxcbiAgICBtYXhEaXN0U3EsXG4gICAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGVcbiAgfSwgX3JlY29nbml6ZXIsIHtcbiAgICBtYXhQb2ludGVyczogcG9pbnRlckxlbmd0aCxcbiAgICBjZW50ZXIsXG4gICAgZGVsdGFYLFxuICAgIGRlbHRhWVxuICB9KSB7XG4gICAgY29uc3QgdmFsaWRQb2ludGVyQ291bnQgPSBwb2ludGVyTGVuZ3RoID49IG1pblBvaW50ZXJzICYmIHBvaW50ZXJMZW5ndGggPD0gbWF4UG9pbnRlcnM7XG5cbiAgICBpZiAodGhpcy5zaG91bGRGYWlsVW5kZXJDdXN0b21Dcml0ZXJpYSh7IC4uLmNlbnRlcixcbiAgICAgIGRlbHRhWCxcbiAgICAgIGRlbHRhWVxuICAgIH0sIHtcbiAgICAgIG1heERlbHRhWCxcbiAgICAgIG1heERlbHRhWSxcbiAgICAgIG1heERpc3RTcSxcbiAgICAgIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlXG4gICAgfSkgfHwgLy8gQSB1c2VyIHByb2JhYmx5IHdvbid0IGxhbmQgYSBtdWx0aS1wb2ludGVyIHRhcCBvbiB0aGUgZmlyc3QgdGljayAoc28gd2UgY2Fubm90IGp1c3QgY2FuY2VsIGVhY2ggdGltZSlcbiAgICAvLyBidXQgaWYgdGhlIGdlc3R1cmUgaXMgcnVubmluZyBhbmQgdGhlIHVzZXIgYWRkcyBvciBzdWJ0cmFjdHMgYW5vdGhlciBwb2ludGVyIHRoZW4gaXQgc2hvdWxkIGZhaWwuXG4gICAgIXZhbGlkUG9pbnRlckNvdW50ICYmIHRoaXMuaXNHZXN0dXJlUnVubmluZykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmFpbGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB2YWxpZFBvaW50ZXJDb3VudFxuICAgIH07XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBEaXNjcmV0ZUdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfR2VzdHVyZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJEaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIiwiaXNEaXNjcmV0ZSIsInNob3VsZEVuYWJsZUdlc3R1cmVPblNldHVwIiwic2hvdWxkRmFpbFVuZGVyQ3VzdG9tQ3JpdGVyaWEiLCJ4IiwieSIsImRlbHRhWCIsImRlbHRhWSIsIm1heERlbHRhWCIsIm1heERlbHRhWSIsIm1heERpc3RTcSIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwiaXNQb2ludEluVmlldyIsIlRFU1RfTUFYX0lGX05PVF9OQU4iLCJNYXRoIiwiYWJzIiwidHJhbnNmb3JtTmF0aXZlRXZlbnQiLCJjZW50ZXIiLCJyZWN0IiwidmlldyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFic29sdXRlWCIsImFic29sdXRlWSIsImxlZnQiLCJ0b3AiLCJpc0dlc3R1cmVFbmFibGVkRm9yRXZlbnQiLCJtaW5Qb2ludGVycyIsIm1heFBvaW50ZXJzIiwiX3JlY29nbml6ZXIiLCJwb2ludGVyTGVuZ3RoIiwidmFsaWRQb2ludGVyQ291bnQiLCJpc0dlc3R1cmVSdW5uaW5nIiwiZmFpbGVkIiwic3VjY2VzcyIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class DraggingGestureHandler extends _GestureHandler.default {\n    get shouldEnableGestureOnSetup() {\n        return true;\n    }\n    transformNativeEvent({ deltaX, deltaY, velocityX, velocityY, center: { x, y } }) {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        const ratio = _reactNative.PixelRatio.get();\n        return {\n            translationX: deltaX - (this.__initialX || 0),\n            translationY: deltaY - (this.__initialY || 0),\n            absoluteX: x,\n            absoluteY: y,\n            velocityX: velocityX * ratio,\n            velocityY: velocityY * ratio,\n            x: x - rect.left,\n            y: y - rect.top\n        };\n    }\n}\nvar _default = DraggingGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=DraggingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9EcmFnZ2luZ0dlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLCtHQUFrQjtBQUV2RSxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyx1RUFBYztBQUV6QyxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLHVEQUF1RCxHQUV2RCxrQkFBa0IsR0FDbEIsTUFBTUUsK0JBQStCTixnQkFBZ0JELE9BQU87SUFDMUQsSUFBSVEsNkJBQTZCO1FBQy9CLE9BQU87SUFDVDtJQUVBQyxxQkFBcUIsRUFDbkJDLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsUUFBUSxFQUNOQyxDQUFDLEVBQ0RDLENBQUMsRUFDRixFQUNGLEVBQUU7UUFDRCx1QkFBdUI7UUFDdkIsTUFBTUMsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQ0MscUJBQXFCO1FBRTVDLE1BQU1DLFFBQVFoQixhQUFhaUIsVUFBVSxDQUFDQyxHQUFHO1FBRXpDLE9BQU87WUFDTEMsY0FBY2IsU0FBVSxLQUFJLENBQUNjLFVBQVUsSUFBSTtZQUMzQ0MsY0FBY2QsU0FBVSxLQUFJLENBQUNlLFVBQVUsSUFBSTtZQUMzQ0MsV0FBV1o7WUFDWGEsV0FBV1o7WUFDWEosV0FBV0EsWUFBWVE7WUFDdkJQLFdBQVdBLFlBQVlPO1lBQ3ZCTCxHQUFHQSxJQUFJRSxLQUFLWSxJQUFJO1lBQ2hCYixHQUFHQSxJQUFJQyxLQUFLYSxHQUFHO1FBQ2pCO0lBQ0Y7QUFFRjtBQUVBLElBQUlDLFdBQVd4QjtBQUNmVCxrQkFBZSxHQUFHaUMsVUFDbEIsa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvRHJhZ2dpbmdHZXN0dXJlSGFuZGxlci5qcz9hZmExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclwiKSk7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGUgKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNsYXNzIERyYWdnaW5nR2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGdldCBzaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRyYW5zZm9ybU5hdGl2ZUV2ZW50KHtcbiAgICBkZWx0YVgsXG4gICAgZGVsdGFZLFxuICAgIHZlbG9jaXR5WCxcbiAgICB2ZWxvY2l0eVksXG4gICAgY2VudGVyOiB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH1cbiAgfSkge1xuICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpXG4gICAgY29uc3QgcmVjdCA9IHRoaXMudmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0IHJhdGlvID0gX3JlYWN0TmF0aXZlLlBpeGVsUmF0aW8uZ2V0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNsYXRpb25YOiBkZWx0YVggLSAodGhpcy5fX2luaXRpYWxYIHx8IDApLFxuICAgICAgdHJhbnNsYXRpb25ZOiBkZWx0YVkgLSAodGhpcy5fX2luaXRpYWxZIHx8IDApLFxuICAgICAgYWJzb2x1dGVYOiB4LFxuICAgICAgYWJzb2x1dGVZOiB5LFxuICAgICAgdmVsb2NpdHlYOiB2ZWxvY2l0eVggKiByYXRpbyxcbiAgICAgIHZlbG9jaXR5WTogdmVsb2NpdHlZICogcmF0aW8sXG4gICAgICB4OiB4IC0gcmVjdC5sZWZ0LFxuICAgICAgeTogeSAtIHJlY3QudG9wXG4gICAgfTtcbiAgfVxuXG59XG5cbnZhciBfZGVmYXVsdCA9IERyYWdnaW5nR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdnaW5nR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9HZXN0dXJlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwib2JqIiwiX19lc01vZHVsZSIsIkRyYWdnaW5nR2VzdHVyZUhhbmRsZXIiLCJzaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCIsInRyYW5zZm9ybU5hdGl2ZUV2ZW50IiwiZGVsdGFYIiwiZGVsdGFZIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwiY2VudGVyIiwieCIsInkiLCJyZWN0IiwidmlldyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJhdGlvIiwiUGl4ZWxSYXRpbyIsImdldCIsInRyYW5zbGF0aW9uWCIsIl9faW5pdGlhbFgiLCJ0cmFuc2xhdGlvblkiLCJfX2luaXRpYWxZIiwiYWJzb2x1dGVYIiwiYWJzb2x1dGVZIiwibGVmdCIsInRvcCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GesturePropError = void 0;\nclass GesturePropError extends Error {\n    constructor(name, value, expectedType){\n        super(`Invalid property \\`${name}: ${value}\\` expected \\`${expectedType}\\``);\n    }\n}\nexports.GesturePropError = GesturePropError; //# sourceMappingURL=Errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9FcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHdCQUF3QixHQUFHLEtBQUs7QUFFaEMsTUFBTUUseUJBQXlCQztJQUM3QkMsWUFBWUMsSUFBSSxFQUFFSixLQUFLLEVBQUVLLFlBQVksQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRUQsS0FBSyxFQUFFLEVBQUVKLE1BQU0sY0FBYyxFQUFFSyxhQUFhLEVBQUUsQ0FBQztJQUM3RTtBQUVGO0FBRUFOLHdCQUF3QixHQUFHRSxrQkFDM0Isa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvRXJyb3JzLmpzPzlhNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdlc3R1cmVQcm9wRXJyb3IgPSB2b2lkIDA7XG5cbmNsYXNzIEdlc3R1cmVQcm9wRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGUpIHtcbiAgICBzdXBlcihgSW52YWxpZCBwcm9wZXJ0eSBcXGAke25hbWV9OiAke3ZhbHVlfVxcYCBleHBlY3RlZCBcXGAke2V4cGVjdGVkVHlwZX1cXGBgKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuR2VzdHVyZVByb3BFcnJvciA9IEdlc3R1cmVQcm9wRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiR2VzdHVyZVByb3BFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZXhwZWN0ZWRUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _Errors = __webpack_require__(/*! ./Errors */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js\");\nvar _DraggingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DraggingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class FlingGestureHandler extends _DraggingGestureHandler.default {\n    get name() {\n        return \"swipe\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Swipe;\n    }\n    onGestureActivated(event) {\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_MOVE,\n            isFinal: false,\n            isFirst: true\n        });\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_END,\n            isFinal: true\n        });\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (this.hasGestureFailed) {\n            return;\n        } // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            setTimeout(()=>{\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore FIXME(TS)\n            if (gesture.options.enable(gesture, ev)) {\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            // @ts-ignore FIXME(TS)\n            pointers: this.config.numberOfPointers,\n            direction: this.getDirection()\n        };\n    }\n    getTargetDirections(direction) {\n        const directions = [];\n        if (direction & _constants.Direction.RIGHT) {\n            directions.push(_hammerjs.default.DIRECTION_RIGHT);\n        }\n        if (direction & _constants.Direction.LEFT) {\n            directions.push(_hammerjs.default.DIRECTION_LEFT);\n        }\n        if (direction & _constants.Direction.UP) {\n            directions.push(_hammerjs.default.DIRECTION_UP);\n        }\n        if (direction & _constants.Direction.DOWN) {\n            directions.push(_hammerjs.default.DIRECTION_DOWN);\n        } // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n        return directions;\n    }\n    getDirection() {\n        // @ts-ignore FIXME(TS)\n        const { direction } = this.getConfig();\n        let directions = [];\n        if (direction & _constants.Direction.RIGHT) {\n            directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n        }\n        if (direction & _constants.Direction.LEFT) {\n            directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n        }\n        if (direction & _constants.Direction.UP) {\n            directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n        }\n        if (direction & _constants.Direction.DOWN) {\n            directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n        }\n        directions = [\n            ...new Set(directions)\n        ];\n        if (directions.length === 0) return _hammerjs.default.DIRECTION_NONE;\n        if (directions.length === 1) return directions[0];\n        return _hammerjs.default.DIRECTION_ALL;\n    }\n    isGestureEnabledForEvent({ numberOfPointers }, _recognizer, { maxPointers: pointerLength }) {\n        const validPointerCount = pointerLength === numberOfPointers;\n        if (!validPointerCount && this.isGestureRunning) {\n            return {\n                failed: true\n            };\n        }\n        return {\n            success: validPointerCount\n        };\n    }\n    updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\n        if ((0, _utils.isnan)(direction) || typeof direction !== \"number\") {\n            throw new _Errors.GesturePropError(\"direction\", direction, \"number\");\n        }\n        return super.updateGestureConfig({\n            numberOfPointers,\n            direction,\n            ...props\n        });\n    }\n}\nvar _default = FlingGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar NodeManager = _interopRequireWildcard(__webpack_require__(/*! ./NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nlet gestureInstances = 0;\nclass GestureHandler {\n    get id() {\n        return `${this.name}${this.gestureInstance}`;\n    }\n    // here to use instanceof would cause import cycle\n    get isNative() {\n        return false;\n    }\n    get isDiscrete() {\n        return false;\n    }\n    get shouldEnableGestureOnSetup() {\n        throw new Error(\"Must override GestureHandler.shouldEnableGestureOnSetup\");\n    }\n    constructor(){\n        _defineProperty(this, \"handlerTag\", void 0);\n        _defineProperty(this, \"isGestureRunning\", false);\n        _defineProperty(this, \"view\", null);\n        _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n        _defineProperty(this, \"hasGestureFailed\", false);\n        _defineProperty(this, \"hammer\", null);\n        _defineProperty(this, \"initialRotation\", null);\n        _defineProperty(this, \"__initialX\", void 0);\n        _defineProperty(this, \"__initialY\", void 0);\n        _defineProperty(this, \"config\", {});\n        _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"pendingGestures\", {});\n        _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"lastSentState\", null);\n        _defineProperty(this, \"gestureInstance\", void 0);\n        _defineProperty(this, \"_stillWaiting\", void 0);\n        _defineProperty(this, \"propsRef\", void 0);\n        _defineProperty(this, \"ref\", void 0);\n        _defineProperty(this, \"clearSelfAsPending\", ()=>{\n            if (Array.isArray(this.config.waitFor)) {\n                for (const gesture of this.config.waitFor){\n                    gesture.removePendingGesture(this.id);\n                }\n            }\n        });\n        _defineProperty(this, \"destroy\", ()=>{\n            this.clearSelfAsPending();\n            if (this.hammer) {\n                this.hammer.stop(false);\n                this.hammer.destroy();\n            }\n            this.hammer = null;\n        });\n        _defineProperty(this, \"isPointInView\", ({ x, y })=>{\n            // @ts-ignore FIXME(TS)\n            const rect = this.view.getBoundingClientRect();\n            const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n            return pointerInside;\n        });\n        _defineProperty(this, \"sendEvent\", (nativeEvent)=>{\n            const { onGestureHandlerEvent, onGestureHandlerStateChange } = this.propsRef.current;\n            const event = this.transformEventData(nativeEvent);\n            invokeNullableMethod(onGestureHandlerEvent, event);\n            if (this.lastSentState !== event.nativeEvent.state) {\n                this.lastSentState = event.nativeEvent.state;\n                invokeNullableMethod(onGestureHandlerStateChange, event);\n            }\n        });\n        _defineProperty(this, \"sync\", ()=>{\n            const gesture = this.hammer.get(this.name);\n            if (!gesture) return;\n            const enable = (recognizer, inputData)=>{\n                if (!this.config.enabled) {\n                    this.isGestureRunning = false;\n                    this.hasGestureFailed = false;\n                    return false;\n                } // Prevent events before the system is ready.\n                if (!inputData || !recognizer.options || typeof inputData.maxPointers === \"undefined\") {\n                    return this.shouldEnableGestureOnSetup;\n                }\n                if (this.hasGestureFailed) {\n                    return false;\n                }\n                if (!this.isDiscrete) {\n                    if (this.isGestureRunning) {\n                        return true;\n                    } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n                    // Only process if there are views to wait for.\n                    this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n                    if (this._stillWaiting.length) {\n                        // Check to see if one of the gestures you're waiting for has started.\n                        // If it has then the gesture should fail.\n                        for (const gesture of this._stillWaiting){\n                            // When the target gesture has started, this gesture must force fail.\n                            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                                this.hasGestureFailed = true;\n                                this.isGestureRunning = false;\n                                return false;\n                            }\n                        } // This gesture shouldn't start until the others have finished.\n                        return false;\n                    }\n                } // Use default behaviour\n                if (!this.hasCustomActivationCriteria) {\n                    return true;\n                }\n                const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n                const { success, failed } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n                    ...inputData,\n                    deltaRotation\n                });\n                if (failed) {\n                    this.simulateCancelEvent(inputData);\n                    this.hasGestureFailed = true;\n                }\n                return success;\n            };\n            const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n            gesture.set({\n                ...params,\n                enable\n            });\n        });\n        this.gestureInstance = gestureInstances++;\n        this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n        return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n        delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n        this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n        return {\n            success: true\n        };\n    }\n    get NativeGestureClass() {\n        throw new Error(\"Must override GestureHandler.NativeGestureClass\");\n    }\n    updateHasCustomActivationCriteria(_config) {\n        return true;\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.clearSelfAsPending();\n        this.config = this.ensureConfig({\n            enabled,\n            ...props\n        });\n        this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n        if (Array.isArray(this.config.waitFor)) {\n            for (const gesture of this.config.waitFor){\n                gesture.addPendingGesture(this);\n            }\n        }\n        if (this.hammer) {\n            this.sync();\n        }\n        return this.config;\n    }\n    getState(type) {\n        // @ts-ignore TODO(TS) check if this is needed\n        if (type == 0) {\n            return 0;\n        }\n        return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n        const { eventType, maxPointers: numberOfPointers } = event; // const direction = DirectionMap[ev.direction];\n        const changedTouch = event.changedPointers[0];\n        const pointerInside = this.isPointInView({\n            x: changedTouch.clientX,\n            y: changedTouch.clientY\n        }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n        const state = this.getState(eventType);\n        if (state !== this.previousState) {\n            this.oldState = this.previousState;\n            this.previousState = state;\n        }\n        return {\n            nativeEvent: {\n                numberOfPointers,\n                state,\n                pointerInside,\n                ...this.transformNativeEvent(event),\n                // onHandlerStateChange only\n                handlerTag: this.handlerTag,\n                target: this.ref,\n                // send oldState only when the state was changed, or is different than ACTIVE\n                // GestureDetector relies on the presence of `oldState` to differentiate between\n                // update events and state change events\n                oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n            },\n            timeStamp: Date.now()\n        };\n    }\n    transformNativeEvent(_event) {\n        return {};\n    }\n    cancelPendingGestures(event) {\n        for (const gesture of Object.values(this.pendingGestures)){\n            if (gesture && gesture.isGestureRunning) {\n                gesture.hasGestureFailed = true;\n                gesture.cancelEvent(event);\n            }\n        }\n    }\n    notifyPendingGestures() {\n        for (const gesture of Object.values(this.pendingGestures)){\n            if (gesture) {\n                gesture.onWaitingEnded(this);\n            }\n        }\n    }\n    onGestureEnded(event) {\n        this.isGestureRunning = false;\n        this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n        if (this.isGestureRunning) {\n            this.hasGestureFailed = true;\n            this.cancelEvent(event);\n        }\n    }\n    cancelEvent(event) {\n        this.notifyPendingGestures();\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_CANCEL,\n            isFinal: true\n        });\n        this.onGestureEnded(event);\n    }\n    onRawEvent({ isFirst }) {\n        if (isFirst) {\n            this.hasGestureFailed = false;\n        }\n    }\n    shouldUseTouchEvents(config) {\n        var _config$simultaneousH, _config$simultaneousH2;\n        return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some((handler)=>handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n    setView(ref, propsRef) {\n        if (ref == null) {\n            this.destroy();\n            this.view = null;\n            return;\n        } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n        const SUPPORTS_TOUCH = \"ontouchstart\" in window;\n        this.propsRef = propsRef;\n        this.ref = ref;\n        this.view = (0, _reactNative.findNodeHandle)(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n        // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n        // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n        this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n            inputClass: _hammerjs.default.TouchInput\n        }) : new _hammerjs.default.Manager(this.view);\n        this.oldState = _State.State.UNDETERMINED;\n        this.previousState = _State.State.UNDETERMINED;\n        this.lastSentState = null;\n        const { NativeGestureClass } = this; // @ts-ignore TODO(TS)\n        const gesture = new NativeGestureClass(this.getHammerConfig());\n        this.hammer.add(gesture);\n        this.hammer.on(\"hammer.input\", (ev)=>{\n            if (!this.config.enabled) {\n                this.hasGestureFailed = false;\n                this.isGestureRunning = false;\n                return;\n            }\n            this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n            // The isFirst value is not called when the first rotation is calculated.\n            if (this.initialRotation === null && ev.rotation !== 0) {\n                this.initialRotation = ev.rotation;\n            }\n            if (ev.isFinal) {\n                // in favor of a willFail otherwise the last frame of the gesture will be captured.\n                setTimeout(()=>{\n                    this.initialRotation = null;\n                    this.hasGestureFailed = false;\n                });\n            }\n        });\n        this.setupEvents();\n        this.sync();\n    }\n    setupEvents() {\n        // TODO(TS) Hammer types aren't exactly that what we get in runtime\n        if (!this.isDiscrete) {\n            this.hammer.on(`${this.name}start`, (event)=>this.onStart(event));\n            this.hammer.on(`${this.name}end ${this.name}cancel`, (event)=>{\n                this.onGestureEnded(event);\n            });\n        }\n        this.hammer.on(this.name, (ev)=>this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({ deltaX, deltaY, rotation }) {\n        // Reset the state for the next gesture\n        this.oldState = _State.State.UNDETERMINED;\n        this.previousState = _State.State.UNDETERMINED;\n        this.lastSentState = null;\n        this.isGestureRunning = true;\n        this.__initialX = deltaX;\n        this.__initialY = deltaY;\n        this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n        this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n        if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n            // Get the list of gestures that this gesture is still waiting for.\n            // Use `=== false` in case a ref that isn't a gesture handler is used.\n            const stillWaiting = this.config.waitFor.filter(({ hasGestureFailed })=>hasGestureFailed === false);\n            return stillWaiting;\n        }\n        return [];\n    }\n    getHammerConfig() {\n        const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n        return {\n            pointers\n        };\n    }\n    simulateCancelEvent(_inputData) {}\n    ensureConfig(config) {\n        const props = {\n            ...config\n        }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n        if (\"minDist\" in config) {\n            props.minDist = config.minDist;\n            props.minDistSq = props.minDist * props.minDist;\n        }\n        if (\"minVelocity\" in config) {\n            props.minVelocity = config.minVelocity;\n            props.minVelocitySq = props.minVelocity * props.minVelocity;\n        }\n        if (\"maxDist\" in config) {\n            props.maxDist = config.maxDist;\n            props.maxDistSq = config.maxDist * config.maxDist;\n        }\n        if (\"waitFor\" in config) {\n            props.waitFor = asArray(config.waitFor).map(({ handlerTag })=>NodeManager.getHandler(handlerTag)).filter((v)=>v);\n        } else {\n            props.waitFor = null;\n        }\n        if (\"simultaneousHandlers\" in config) {\n            const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n            props.simultaneousHandlers = asArray(config.simultaneousHandlers).map((handler)=>{\n                if (typeof handler === \"number\") {\n                    return NodeManager.getHandler(handler);\n                } else {\n                    return NodeManager.getHandler(handler.handlerTag);\n                }\n            }).filter((v)=>v);\n            if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n                requestAnimationFrame(()=>{\n                    // if the undelying event API needs to be changed, we need to unmount and mount\n                    // the hammer instance again.\n                    this.destroy();\n                    this.setView(this.ref, this.propsRef);\n                });\n            }\n        } else {\n            props.simultaneousHandlers = null;\n        }\n        const configProps = [\n            \"minPointers\",\n            \"maxPointers\",\n            \"minDist\",\n            \"maxDist\",\n            \"maxDistSq\",\n            \"minVelocitySq\",\n            \"minDistSq\",\n            \"minVelocity\",\n            \"failOffsetXStart\",\n            \"failOffsetYStart\",\n            \"failOffsetXEnd\",\n            \"failOffsetYEnd\",\n            \"activeOffsetXStart\",\n            \"activeOffsetXEnd\",\n            \"activeOffsetYStart\",\n            \"activeOffsetYEnd\"\n        ];\n        configProps.forEach((prop)=>{\n            if (typeof props[prop] === \"undefined\") {\n                props[prop] = Number.NaN;\n            }\n        });\n        return props; // TODO(TS) how to convince TS that props are filled?\n    }\n} // TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(method, event) {\n    if (method) {\n        if (typeof method === \"function\") {\n            method(event);\n        } else {\n            // For use with reanimated's AnimatedEvent\n            if (\"__getHandler\" in method && typeof method.__getHandler === \"function\") {\n                const handler = method.__getHandler();\n                invokeNullableMethod(handler, event);\n            } else {\n                if (\"__nodeConfig\" in method) {\n                    const { argMapping } = method.__nodeConfig;\n                    if (Array.isArray(argMapping)) {\n                        for (const [index, [key, value]] of argMapping.entries()){\n                            if (key in event.nativeEvent) {\n                                // @ts-ignore fix method type\n                                const nativeValue = event.nativeEvent[key];\n                                if (value && value.setValue) {\n                                    // Reanimated API\n                                    value.setValue(nativeValue);\n                                } else {\n                                    // RN Animated API\n                                    method.__nodeConfig.argMapping[index] = [\n                                        key,\n                                        nativeValue\n                                    ];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [\n        value\n    ];\n}\nvar _default = GestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=GestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9HZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBRXZCLElBQUlHLFlBQVlDLHVCQUF1QkMsbUJBQU9BLENBQUMsc0NBQWdCO0FBRS9ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLElBQUlHLGFBQWFILG1CQUFPQSxDQUFDLHFHQUFhO0FBRXRDLElBQUlJLGNBQWNDLHdCQUF3QkwsbUJBQU9BLENBQUMseUdBQWU7QUFFakUsU0FBU007SUFBNkIsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBTztJQUFNLElBQUlDLFFBQVEsSUFBSUQ7SUFBV0QsMkJBQTJCO1FBQWMsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFekwsU0FBU0gsd0JBQXdCSSxHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQUUsT0FBT0Q7SUFBSztJQUFFLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFWixTQUFTWTtRQUFJO0lBQUc7SUFBRSxJQUFJRCxRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNRyxHQUFHLENBQUNGLE1BQU07UUFBRSxPQUFPRCxNQUFNSSxHQUFHLENBQUNIO0lBQU07SUFBRSxJQUFJSSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JyQixPQUFPQyxjQUFjLElBQUlELE9BQU9zQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU9QLElBQUs7UUFBRSxJQUFJaEIsT0FBT3dCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNWLEtBQUtP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NEJBQ0Y7d0JBQ0Y7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNoQixRQUFROUssS0FBSztJQUNwQixtQ0FBbUM7SUFDbkMsT0FBT0EsU0FBUyxPQUFPLEVBQUUsR0FBRzBDLE1BQU1DLE9BQU8sQ0FBQzNDLFNBQVNBLFFBQVE7UUFBQ0E7S0FBTTtBQUNwRTtBQUVBLElBQUlnTSxXQUFXaks7QUFDZmhDLGtCQUFlLEdBQUdpTSxVQUNsQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9HZXN0dXJlSGFuZGxlci5qcz9hOTM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hhbW1lcmpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVnanMvaGFtbWVyanNcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxudmFyIF9TdGF0ZSA9IHJlcXVpcmUoXCIuLi9TdGF0ZVwiKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbnZhciBOb2RlTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL05vZGVNYW5hZ2VyXCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmxldCBnZXN0dXJlSW5zdGFuY2VzID0gMDtcblxuY2xhc3MgR2VzdHVyZUhhbmRsZXIge1xuICBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX0ke3RoaXMuZ2VzdHVyZUluc3RhbmNlfWA7XG4gIH0gLy8gYSBzaW1wbGUgd2F5IHRvIGNoZWNrIGlmIEdlc3R1cmVIYW5kbGVyIGlzIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciwgc2luY2UgaW1wb3J0aW5nIGl0XG4gIC8vIGhlcmUgdG8gdXNlIGluc3RhbmNlb2Ygd291bGQgY2F1c2UgaW1wb3J0IGN5Y2xlXG5cblxuICBnZXQgaXNOYXRpdmUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0IGlzRGlzY3JldGUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0IHNob3VsZEVuYWJsZUdlc3R1cmVPblNldHVwKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBvdmVycmlkZSBHZXN0dXJlSGFuZGxlci5zaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCcpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFuZGxlclRhZ1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNHZXN0dXJlUnVubmluZ1wiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2aWV3XCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYXNHZXN0dXJlRmFpbGVkXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbW1lclwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluaXRpYWxSb3RhdGlvblwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9faW5pdGlhbFhcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9faW5pdGlhbFlcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmZpZ1wiLCB7fSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcmV2aW91c1N0YXRlXCIsIF9TdGF0ZS5TdGF0ZS5VTkRFVEVSTUlORUQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGVuZGluZ0dlc3R1cmVzXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9sZFN0YXRlXCIsIF9TdGF0ZS5TdGF0ZS5VTkRFVEVSTUlORUQpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibGFzdFNlbnRTdGF0ZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdlc3R1cmVJbnN0YW5jZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3N0aWxsV2FpdGluZ1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicHJvcHNSZWZcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xlYXJTZWxmQXNQZW5kaW5nXCIsICgpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLndhaXRGb3IpKSB7XG4gICAgICAgIGZvciAoY29uc3QgZ2VzdHVyZSBvZiB0aGlzLmNvbmZpZy53YWl0Rm9yKSB7XG4gICAgICAgICAgZ2VzdHVyZS5yZW1vdmVQZW5kaW5nR2VzdHVyZSh0aGlzLmlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsZWFyU2VsZkFzUGVuZGluZygpO1xuXG4gICAgICBpZiAodGhpcy5oYW1tZXIpIHtcbiAgICAgICAgdGhpcy5oYW1tZXIuc3RvcChmYWxzZSk7XG4gICAgICAgIHRoaXMuaGFtbWVyLmRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5oYW1tZXIgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNQb2ludEluVmlld1wiLCAoe1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9KSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlIEZJWE1FKFRTKVxuICAgICAgY29uc3QgcmVjdCA9IHRoaXMudmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHBvaW50ZXJJbnNpZGUgPSB4ID49IHJlY3QubGVmdCAmJiB4IDw9IHJlY3QucmlnaHQgJiYgeSA+PSByZWN0LnRvcCAmJiB5IDw9IHJlY3QuYm90dG9tO1xuICAgICAgcmV0dXJuIHBvaW50ZXJJbnNpZGU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZW5kRXZlbnRcIiwgbmF0aXZlRXZlbnQgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBvbkdlc3R1cmVIYW5kbGVyRXZlbnQsXG4gICAgICAgIG9uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZVxuICAgICAgfSA9IHRoaXMucHJvcHNSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy50cmFuc2Zvcm1FdmVudERhdGEobmF0aXZlRXZlbnQpO1xuICAgICAgaW52b2tlTnVsbGFibGVNZXRob2Qob25HZXN0dXJlSGFuZGxlckV2ZW50LCBldmVudCk7XG5cbiAgICAgIGlmICh0aGlzLmxhc3RTZW50U3RhdGUgIT09IGV2ZW50Lm5hdGl2ZUV2ZW50LnN0YXRlKSB7XG4gICAgICAgIHRoaXMubGFzdFNlbnRTdGF0ZSA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN0YXRlO1xuICAgICAgICBpbnZva2VOdWxsYWJsZU1ldGhvZChvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN5bmNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZ2VzdHVyZSA9IHRoaXMuaGFtbWVyLmdldCh0aGlzLm5hbWUpO1xuICAgICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGVuYWJsZSA9IChyZWNvZ25pemVyLCBpbnB1dERhdGEpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5lbmFibGVkKSB7XG4gICAgICAgICAgdGhpcy5pc0dlc3R1cmVSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5oYXNHZXN0dXJlRmFpbGVkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IC8vIFByZXZlbnQgZXZlbnRzIGJlZm9yZSB0aGUgc3lzdGVtIGlzIHJlYWR5LlxuXG5cbiAgICAgICAgaWYgKCFpbnB1dERhdGEgfHwgIXJlY29nbml6ZXIub3B0aW9ucyB8fCB0eXBlb2YgaW5wdXREYXRhLm1heFBvaW50ZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNob3VsZEVuYWJsZUdlc3R1cmVPblNldHVwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzR2VzdHVyZUZhaWxlZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pc0Rpc2NyZXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNHZXN0dXJlUnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSAvLyBUaGUgYnVpbHQtaW4gaGFtbWVyLmpzIFwid2FpdEZvclwiIGRvZXNuJ3Qgd29yayBhY3Jvc3MgbXVsdGlwbGUgdmlld3MuXG4gICAgICAgICAgLy8gT25seSBwcm9jZXNzIGlmIHRoZXJlIGFyZSB2aWV3cyB0byB3YWl0IGZvci5cblxuXG4gICAgICAgICAgdGhpcy5fc3RpbGxXYWl0aW5nID0gdGhpcy5fZ2V0UGVuZGluZ0dlc3R1cmVzKCk7IC8vIFRoaXMgZ2VzdHVyZSBzaG91bGQgY29udGludWUgd2FpdGluZy5cblxuICAgICAgICAgIGlmICh0aGlzLl9zdGlsbFdhaXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgb25lIG9mIHRoZSBnZXN0dXJlcyB5b3UncmUgd2FpdGluZyBmb3IgaGFzIHN0YXJ0ZWQuXG4gICAgICAgICAgICAvLyBJZiBpdCBoYXMgdGhlbiB0aGUgZ2VzdHVyZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZ2VzdHVyZSBvZiB0aGlzLl9zdGlsbFdhaXRpbmcpIHtcbiAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgdGFyZ2V0IGdlc3R1cmUgaGFzIHN0YXJ0ZWQsIHRoaXMgZ2VzdHVyZSBtdXN0IGZvcmNlIGZhaWwuXG4gICAgICAgICAgICAgIGlmICghZ2VzdHVyZS5pc0Rpc2NyZXRlICYmIGdlc3R1cmUuaXNHZXN0dXJlUnVubmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzR2VzdHVyZUZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0dlc3R1cmVSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIFRoaXMgZ2VzdHVyZSBzaG91bGRuJ3Qgc3RhcnQgdW50aWwgdGhlIG90aGVycyBoYXZlIGZpbmlzaGVkLlxuXG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gVXNlIGRlZmF1bHQgYmVoYXZpb3VyXG5cblxuICAgICAgICBpZiAoIXRoaXMuaGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWx0YVJvdGF0aW9uID0gdGhpcy5pbml0aWFsUm90YXRpb24gPT0gbnVsbCA/IDAgOiBpbnB1dERhdGEucm90YXRpb24gLSB0aGlzLmluaXRpYWxSb3RhdGlvbjsgLy8gQHRzLWlnbm9yZSBGSVhNRShUUylcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICBmYWlsZWRcbiAgICAgICAgfSA9IHRoaXMuaXNHZXN0dXJlRW5hYmxlZEZvckV2ZW50KHRoaXMuZ2V0Q29uZmlnKCksIHJlY29nbml6ZXIsIHsgLi4uaW5wdXREYXRhLFxuICAgICAgICAgIGRlbHRhUm90YXRpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZhaWxlZCkge1xuICAgICAgICAgIHRoaXMuc2ltdWxhdGVDYW5jZWxFdmVudChpbnB1dERhdGEpO1xuICAgICAgICAgIHRoaXMuaGFzR2VzdHVyZUZhaWxlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuZ2V0SGFtbWVyQ29uZmlnKCk7IC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpXG5cbiAgICAgIGdlc3R1cmUuc2V0KHsgLi4ucGFyYW1zLFxuICAgICAgICBlbmFibGVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5nZXN0dXJlSW5zdGFuY2UgPSBnZXN0dXJlSW5zdGFuY2VzKys7XG4gICAgdGhpcy5oYXNDdXN0b21BY3RpdmF0aW9uQ3JpdGVyaWEgPSBmYWxzZTtcbiAgfVxuXG4gIGdldENvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICBvbldhaXRpbmdFbmRlZChfZ2VzdHVyZSkge31cblxuICByZW1vdmVQZW5kaW5nR2VzdHVyZShpZCkge1xuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdHZXN0dXJlc1tpZF07XG4gIH1cblxuICBhZGRQZW5kaW5nR2VzdHVyZShnZXN0dXJlKSB7XG4gICAgdGhpcy5wZW5kaW5nR2VzdHVyZXNbZ2VzdHVyZS5pZF0gPSBnZXN0dXJlO1xuICB9XG5cbiAgaXNHZXN0dXJlRW5hYmxlZEZvckV2ZW50KF9jb25maWcsIF9yZWNvZ25pemVyLCBfZXZlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBnZXQgTmF0aXZlR2VzdHVyZUNsYXNzKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBvdmVycmlkZSBHZXN0dXJlSGFuZGxlci5OYXRpdmVHZXN0dXJlQ2xhc3MnKTtcbiAgfVxuXG4gIHVwZGF0ZUhhc0N1c3RvbUFjdGl2YXRpb25Dcml0ZXJpYShfY29uZmlnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB1cGRhdGVHZXN0dXJlQ29uZmlnKHtcbiAgICBlbmFibGVkID0gdHJ1ZSxcbiAgICAuLi5wcm9wc1xuICB9KSB7XG4gICAgdGhpcy5jbGVhclNlbGZBc1BlbmRpbmcoKTtcbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMuZW5zdXJlQ29uZmlnKHtcbiAgICAgIGVuYWJsZWQsXG4gICAgICAuLi5wcm9wc1xuICAgIH0pO1xuICAgIHRoaXMuaGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhID0gdGhpcy51cGRhdGVIYXNDdXN0b21BY3RpdmF0aW9uQ3JpdGVyaWEodGhpcy5jb25maWcpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcud2FpdEZvcikpIHtcbiAgICAgIGZvciAoY29uc3QgZ2VzdHVyZSBvZiB0aGlzLmNvbmZpZy53YWl0Rm9yKSB7XG4gICAgICAgIGdlc3R1cmUuYWRkUGVuZGluZ0dlc3R1cmUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFtbWVyKSB7XG4gICAgICB0aGlzLnN5bmMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICBnZXRTdGF0ZSh0eXBlKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBUT0RPKFRTKSBjaGVjayBpZiB0aGlzIGlzIG5lZWRlZFxuICAgIGlmICh0eXBlID09IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RhbnRzLkV2ZW50TWFwW3R5cGVdO1xuICB9XG5cbiAgdHJhbnNmb3JtRXZlbnREYXRhKGV2ZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgZXZlbnRUeXBlLFxuICAgICAgbWF4UG9pbnRlcnM6IG51bWJlck9mUG9pbnRlcnNcbiAgICB9ID0gZXZlbnQ7IC8vIGNvbnN0IGRpcmVjdGlvbiA9IERpcmVjdGlvbk1hcFtldi5kaXJlY3Rpb25dO1xuXG4gICAgY29uc3QgY2hhbmdlZFRvdWNoID0gZXZlbnQuY2hhbmdlZFBvaW50ZXJzWzBdO1xuICAgIGNvbnN0IHBvaW50ZXJJbnNpZGUgPSB0aGlzLmlzUG9pbnRJblZpZXcoe1xuICAgICAgeDogY2hhbmdlZFRvdWNoLmNsaWVudFgsXG4gICAgICB5OiBjaGFuZ2VkVG91Y2guY2xpZW50WVxuICAgIH0pOyAvLyBUT0RPKFRTKSBSZW1vdmUgY2FzdCBhZnRlciBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9wdWxsLzUwOTY2IGlzIG1lcmdlZC5cblxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZShldmVudFR5cGUpO1xuXG4gICAgaWYgKHN0YXRlICE9PSB0aGlzLnByZXZpb3VzU3RhdGUpIHtcbiAgICAgIHRoaXMub2xkU3RhdGUgPSB0aGlzLnByZXZpb3VzU3RhdGU7XG4gICAgICB0aGlzLnByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmF0aXZlRXZlbnQ6IHtcbiAgICAgICAgbnVtYmVyT2ZQb2ludGVycyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHBvaW50ZXJJbnNpZGUsXG4gICAgICAgIC4uLnRoaXMudHJhbnNmb3JtTmF0aXZlRXZlbnQoZXZlbnQpLFxuICAgICAgICAvLyBvbkhhbmRsZXJTdGF0ZUNoYW5nZSBvbmx5XG4gICAgICAgIGhhbmRsZXJUYWc6IHRoaXMuaGFuZGxlclRhZyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLnJlZixcbiAgICAgICAgLy8gc2VuZCBvbGRTdGF0ZSBvbmx5IHdoZW4gdGhlIHN0YXRlIHdhcyBjaGFuZ2VkLCBvciBpcyBkaWZmZXJlbnQgdGhhbiBBQ1RJVkVcbiAgICAgICAgLy8gR2VzdHVyZURldGVjdG9yIHJlbGllcyBvbiB0aGUgcHJlc2VuY2Ugb2YgYG9sZFN0YXRlYCB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW5cbiAgICAgICAgLy8gdXBkYXRlIGV2ZW50cyBhbmQgc3RhdGUgY2hhbmdlIGV2ZW50c1xuICAgICAgICBvbGRTdGF0ZTogc3RhdGUgIT09IHRoaXMucHJldmlvdXNTdGF0ZSB8fCBzdGF0ZSAhPSA0ID8gdGhpcy5vbGRTdGF0ZSA6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIHRpbWVTdGFtcDogRGF0ZS5ub3coKVxuICAgIH07XG4gIH1cblxuICB0cmFuc2Zvcm1OYXRpdmVFdmVudChfZXZlbnQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjYW5jZWxQZW5kaW5nR2VzdHVyZXMoZXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IGdlc3R1cmUgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnBlbmRpbmdHZXN0dXJlcykpIHtcbiAgICAgIGlmIChnZXN0dXJlICYmIGdlc3R1cmUuaXNHZXN0dXJlUnVubmluZykge1xuICAgICAgICBnZXN0dXJlLmhhc0dlc3R1cmVGYWlsZWQgPSB0cnVlO1xuICAgICAgICBnZXN0dXJlLmNhbmNlbEV2ZW50KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub3RpZnlQZW5kaW5nR2VzdHVyZXMoKSB7XG4gICAgZm9yIChjb25zdCBnZXN0dXJlIG9mIE9iamVjdC52YWx1ZXModGhpcy5wZW5kaW5nR2VzdHVyZXMpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSkge1xuICAgICAgICBnZXN0dXJlLm9uV2FpdGluZ0VuZGVkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBGSVhNRSBldmVudCBpcyB1bmRlZmluZWQgaW4gcnVudGltZSB3aGVuIGZpcnN0bHkgaW52b2tlZCAoc2VlIERyYWdnYWJsZSBleGFtcGxlKSwgY2hlY2sgb3RoZXIgZnVuY3Rpb25zIHRha2luZyBldmVudCBhcyBpbnB1dFxuXG5cbiAgb25HZXN0dXJlRW5kZWQoZXZlbnQpIHtcbiAgICB0aGlzLmlzR2VzdHVyZVJ1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLmNhbmNlbFBlbmRpbmdHZXN0dXJlcyhldmVudCk7XG4gIH1cblxuICBmb3JjZUludmFsaWRhdGUoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5pc0dlc3R1cmVSdW5uaW5nKSB7XG4gICAgICB0aGlzLmhhc0dlc3R1cmVGYWlsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5jYW5jZWxFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgY2FuY2VsRXZlbnQoZXZlbnQpIHtcbiAgICB0aGlzLm5vdGlmeVBlbmRpbmdHZXN0dXJlcygpO1xuICAgIHRoaXMuc2VuZEV2ZW50KHsgLi4uZXZlbnQsXG4gICAgICBldmVudFR5cGU6IF9oYW1tZXJqcy5kZWZhdWx0LklOUFVUX0NBTkNFTCxcbiAgICAgIGlzRmluYWw6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLm9uR2VzdHVyZUVuZGVkKGV2ZW50KTtcbiAgfVxuXG4gIG9uUmF3RXZlbnQoe1xuICAgIGlzRmlyc3RcbiAgfSkge1xuICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICB0aGlzLmhhc0dlc3R1cmVGYWlsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRVc2VUb3VjaEV2ZW50cyhjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRzaW11bHRhbmVvdXNILCBfY29uZmlnJHNpbXVsdGFuZW91c0gyO1xuXG4gICAgcmV0dXJuIChfY29uZmlnJHNpbXVsdGFuZW91c0ggPSAoX2NvbmZpZyRzaW11bHRhbmVvdXNIMiA9IGNvbmZpZy5zaW11bHRhbmVvdXNIYW5kbGVycykgPT09IG51bGwgfHwgX2NvbmZpZyRzaW11bHRhbmVvdXNIMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbmZpZyRzaW11bHRhbmVvdXNIMi5zb21lKGhhbmRsZXIgPT4gaGFuZGxlci5pc05hdGl2ZSkpICE9PSBudWxsICYmIF9jb25maWckc2ltdWx0YW5lb3VzSCAhPT0gdm9pZCAwID8gX2NvbmZpZyRzaW11bHRhbmVvdXNIIDogZmFsc2U7XG4gIH1cblxuICBzZXRWaWV3KHJlZiwgcHJvcHNSZWYpIHtcbiAgICBpZiAocmVmID09IG51bGwpIHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEB0cy1pZ25vcmUgd2luZG93IGRvZXNuJ3QgZXhpc3Qgb24gZ2xvYmFsIHR5cGUgYXMgd2UgZG9uJ3Qgd2FudCB0byB1c2UgTm9kZSB0eXBlc1xuXG5cbiAgICBjb25zdCBTVVBQT1JUU19UT1VDSCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xuICAgIHRoaXMucHJvcHNSZWYgPSBwcm9wc1JlZjtcbiAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICB0aGlzLnZpZXcgPSAoMCwgX3JlYWN0TmF0aXZlLmZpbmROb2RlSGFuZGxlKShyZWYpOyAvLyBXaGVuIHRoZSBicm93c2VyIHN0YXJ0cyBoYW5kbGluZyB0aGUgZ2VzdHVyZSAoZS5nLiBzY3JvbGxpbmcpLCBpdCBzZW5kcyBhIHBvaW50ZXJjYW5jZWwgZXZlbnQgYW5kIHN0b3BzXG4gICAgLy8gc2VuZGluZyBhZGRpdGlvbmFsIHBvaW50ZXIgZXZlbnRzLiBUaGlzIGlzIG5vdCB0aGUgY2FzZSB3aXRoIHRvdWNoIGV2ZW50cywgc28gaWYgdGhlIGdlc3R1cmUgaXMgc2ltdWx0YW5lb3VzXG4gICAgLy8gd2l0aCBhIE5hdGl2ZUdlc3R1cmVIYW5kbGVyLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRvdWNoIGV2ZW50cyBhcmUgc3VwcG9ydGVkIGFuZCB1c2UgdGhlbSBpZiBwb3NzaWJsZS5cblxuICAgIHRoaXMuaGFtbWVyID0gU1VQUE9SVFNfVE9VQ0ggJiYgdGhpcy5zaG91bGRVc2VUb3VjaEV2ZW50cyh0aGlzLmNvbmZpZykgPyBuZXcgX2hhbW1lcmpzLmRlZmF1bHQuTWFuYWdlcih0aGlzLnZpZXcsIHtcbiAgICAgIGlucHV0Q2xhc3M6IF9oYW1tZXJqcy5kZWZhdWx0LlRvdWNoSW5wdXRcbiAgICB9KSA6IG5ldyBfaGFtbWVyanMuZGVmYXVsdC5NYW5hZ2VyKHRoaXMudmlldyk7XG4gICAgdGhpcy5vbGRTdGF0ZSA9IF9TdGF0ZS5TdGF0ZS5VTkRFVEVSTUlORUQ7XG4gICAgdGhpcy5wcmV2aW91c1N0YXRlID0gX1N0YXRlLlN0YXRlLlVOREVURVJNSU5FRDtcbiAgICB0aGlzLmxhc3RTZW50U3RhdGUgPSBudWxsO1xuICAgIGNvbnN0IHtcbiAgICAgIE5hdGl2ZUdlc3R1cmVDbGFzc1xuICAgIH0gPSB0aGlzOyAvLyBAdHMtaWdub3JlIFRPRE8oVFMpXG5cbiAgICBjb25zdCBnZXN0dXJlID0gbmV3IE5hdGl2ZUdlc3R1cmVDbGFzcyh0aGlzLmdldEhhbW1lckNvbmZpZygpKTtcbiAgICB0aGlzLmhhbW1lci5hZGQoZ2VzdHVyZSk7XG4gICAgdGhpcy5oYW1tZXIub24oJ2hhbW1lci5pbnB1dCcsIGV2ID0+IHtcbiAgICAgIGlmICghdGhpcy5jb25maWcuZW5hYmxlZCkge1xuICAgICAgICB0aGlzLmhhc0dlc3R1cmVGYWlsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0dlc3R1cmVSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vblJhd0V2ZW50KGV2KTsgLy8gVE9ETzogQmFjb246IENoZWNrIGFnYWluc3Qgc29tZXRoaW5nIG90aGVyIHRoYW4gbnVsbFxuICAgICAgLy8gVGhlIGlzRmlyc3QgdmFsdWUgaXMgbm90IGNhbGxlZCB3aGVuIHRoZSBmaXJzdCByb3RhdGlvbiBpcyBjYWxjdWxhdGVkLlxuXG4gICAgICBpZiAodGhpcy5pbml0aWFsUm90YXRpb24gPT09IG51bGwgJiYgZXYucm90YXRpb24gIT09IDApIHtcbiAgICAgICAgdGhpcy5pbml0aWFsUm90YXRpb24gPSBldi5yb3RhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2LmlzRmluYWwpIHtcbiAgICAgICAgLy8gaW4gZmF2b3Igb2YgYSB3aWxsRmFpbCBvdGhlcndpc2UgdGhlIGxhc3QgZnJhbWUgb2YgdGhlIGdlc3R1cmUgd2lsbCBiZSBjYXB0dXJlZC5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pbml0aWFsUm90YXRpb24gPSBudWxsO1xuICAgICAgICAgIHRoaXMuaGFzR2VzdHVyZUZhaWxlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNldHVwRXZlbnRzKCk7XG4gICAgdGhpcy5zeW5jKCk7XG4gIH1cblxuICBzZXR1cEV2ZW50cygpIHtcbiAgICAvLyBUT0RPKFRTKSBIYW1tZXIgdHlwZXMgYXJlbid0IGV4YWN0bHkgdGhhdCB3aGF0IHdlIGdldCBpbiBydW50aW1lXG4gICAgaWYgKCF0aGlzLmlzRGlzY3JldGUpIHtcbiAgICAgIHRoaXMuaGFtbWVyLm9uKGAke3RoaXMubmFtZX1zdGFydGAsIGV2ZW50ID0+IHRoaXMub25TdGFydChldmVudCkpO1xuICAgICAgdGhpcy5oYW1tZXIub24oYCR7dGhpcy5uYW1lfWVuZCAke3RoaXMubmFtZX1jYW5jZWxgLCBldmVudCA9PiB7XG4gICAgICAgIHRoaXMub25HZXN0dXJlRW5kZWQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5oYW1tZXIub24odGhpcy5uYW1lLCBldiA9PiB0aGlzLm9uR2VzdHVyZUFjdGl2YXRlZChldikpOyAvLyBUT0RPKFRTKSByZW1vdmUgY2FzdCBhZnRlciBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9wdWxsLzUwNDM4IGlzIG1lcmdlZFxuICB9XG5cbiAgb25TdGFydCh7XG4gICAgZGVsdGFYLFxuICAgIGRlbHRhWSxcbiAgICByb3RhdGlvblxuICB9KSB7XG4gICAgLy8gUmVzZXQgdGhlIHN0YXRlIGZvciB0aGUgbmV4dCBnZXN0dXJlXG4gICAgdGhpcy5vbGRTdGF0ZSA9IF9TdGF0ZS5TdGF0ZS5VTkRFVEVSTUlORUQ7XG4gICAgdGhpcy5wcmV2aW91c1N0YXRlID0gX1N0YXRlLlN0YXRlLlVOREVURVJNSU5FRDtcbiAgICB0aGlzLmxhc3RTZW50U3RhdGUgPSBudWxsO1xuICAgIHRoaXMuaXNHZXN0dXJlUnVubmluZyA9IHRydWU7XG4gICAgdGhpcy5fX2luaXRpYWxYID0gZGVsdGFYO1xuICAgIHRoaXMuX19pbml0aWFsWSA9IGRlbHRhWTtcbiAgICB0aGlzLmluaXRpYWxSb3RhdGlvbiA9IHJvdGF0aW9uO1xuICB9XG5cbiAgb25HZXN0dXJlQWN0aXZhdGVkKGV2KSB7XG4gICAgdGhpcy5zZW5kRXZlbnQoZXYpO1xuICB9XG5cbiAgb25TdWNjZXNzKCkge31cblxuICBfZ2V0UGVuZGluZ0dlc3R1cmVzKCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLndhaXRGb3IpICYmIHRoaXMuY29uZmlnLndhaXRGb3IubGVuZ3RoKSB7XG4gICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgZ2VzdHVyZXMgdGhhdCB0aGlzIGdlc3R1cmUgaXMgc3RpbGwgd2FpdGluZyBmb3IuXG4gICAgICAvLyBVc2UgYD09PSBmYWxzZWAgaW4gY2FzZSBhIHJlZiB0aGF0IGlzbid0IGEgZ2VzdHVyZSBoYW5kbGVyIGlzIHVzZWQuXG4gICAgICBjb25zdCBzdGlsbFdhaXRpbmcgPSB0aGlzLmNvbmZpZy53YWl0Rm9yLmZpbHRlcigoe1xuICAgICAgICBoYXNHZXN0dXJlRmFpbGVkXG4gICAgICB9KSA9PiBoYXNHZXN0dXJlRmFpbGVkID09PSBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RpbGxXYWl0aW5nO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGdldEhhbW1lckNvbmZpZygpIHtcbiAgICBjb25zdCBwb2ludGVycyA9IHRoaXMuY29uZmlnLm1pblBvaW50ZXJzID09PSB0aGlzLmNvbmZpZy5tYXhQb2ludGVycyA/IHRoaXMuY29uZmlnLm1pblBvaW50ZXJzIDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnRlcnNcbiAgICB9O1xuICB9XG5cbiAgc2ltdWxhdGVDYW5jZWxFdmVudChfaW5wdXREYXRhKSB7fSAvLyBWYWxpZGF0ZSB0aGUgcHJvcHNcblxuXG4gIGVuc3VyZUNvbmZpZyhjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHsgLi4uY29uZmlnXG4gICAgfTsgLy8gVE9ETyhUUykgV2UgdXNlICEgdG8gYXNzZXJ0IHRoYXQgaWYgcHJvcGVydHkgaXMgcHJlc2VudCB0aGVuIHZhbHVlIGlzIG5vdCBlbXB0eSAobnVsbCwgdW5kZWZpbmVkKVxuXG4gICAgaWYgKCdtaW5EaXN0JyBpbiBjb25maWcpIHtcbiAgICAgIHByb3BzLm1pbkRpc3QgPSBjb25maWcubWluRGlzdDtcbiAgICAgIHByb3BzLm1pbkRpc3RTcSA9IHByb3BzLm1pbkRpc3QgKiBwcm9wcy5taW5EaXN0O1xuICAgIH1cblxuICAgIGlmICgnbWluVmVsb2NpdHknIGluIGNvbmZpZykge1xuICAgICAgcHJvcHMubWluVmVsb2NpdHkgPSBjb25maWcubWluVmVsb2NpdHk7XG4gICAgICBwcm9wcy5taW5WZWxvY2l0eVNxID0gcHJvcHMubWluVmVsb2NpdHkgKiBwcm9wcy5taW5WZWxvY2l0eTtcbiAgICB9XG5cbiAgICBpZiAoJ21heERpc3QnIGluIGNvbmZpZykge1xuICAgICAgcHJvcHMubWF4RGlzdCA9IGNvbmZpZy5tYXhEaXN0O1xuICAgICAgcHJvcHMubWF4RGlzdFNxID0gY29uZmlnLm1heERpc3QgKiBjb25maWcubWF4RGlzdDtcbiAgICB9XG5cbiAgICBpZiAoJ3dhaXRGb3InIGluIGNvbmZpZykge1xuICAgICAgcHJvcHMud2FpdEZvciA9IGFzQXJyYXkoY29uZmlnLndhaXRGb3IpLm1hcCgoe1xuICAgICAgICBoYW5kbGVyVGFnXG4gICAgICB9KSA9PiBOb2RlTWFuYWdlci5nZXRIYW5kbGVyKGhhbmRsZXJUYWcpKS5maWx0ZXIodiA9PiB2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMud2FpdEZvciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdzaW11bHRhbmVvdXNIYW5kbGVycycgaW4gY29uZmlnKSB7XG4gICAgICBjb25zdCBzaG91bGRVc2VUb3VjaEV2ZW50cyA9IHRoaXMuc2hvdWxkVXNlVG91Y2hFdmVudHModGhpcy5jb25maWcpO1xuICAgICAgcHJvcHMuc2ltdWx0YW5lb3VzSGFuZGxlcnMgPSBhc0FycmF5KGNvbmZpZy5zaW11bHRhbmVvdXNIYW5kbGVycykubWFwKGhhbmRsZXIgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuIE5vZGVNYW5hZ2VyLmdldEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIE5vZGVNYW5hZ2VyLmdldEhhbmRsZXIoaGFuZGxlci5oYW5kbGVyVGFnKTtcbiAgICAgICAgfVxuICAgICAgfSkuZmlsdGVyKHYgPT4gdik7XG5cbiAgICAgIGlmIChzaG91bGRVc2VUb3VjaEV2ZW50cyAhPT0gdGhpcy5zaG91bGRVc2VUb3VjaEV2ZW50cyhwcm9wcykpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAvLyBpZiB0aGUgdW5kZWx5aW5nIGV2ZW50IEFQSSBuZWVkcyB0byBiZSBjaGFuZ2VkLCB3ZSBuZWVkIHRvIHVubW91bnQgYW5kIG1vdW50XG4gICAgICAgICAgLy8gdGhlIGhhbW1lciBpbnN0YW5jZSBhZ2Fpbi5cbiAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICB0aGlzLnNldFZpZXcodGhpcy5yZWYsIHRoaXMucHJvcHNSZWYpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuc2ltdWx0YW5lb3VzSGFuZGxlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZ1Byb3BzID0gWydtaW5Qb2ludGVycycsICdtYXhQb2ludGVycycsICdtaW5EaXN0JywgJ21heERpc3QnLCAnbWF4RGlzdFNxJywgJ21pblZlbG9jaXR5U3EnLCAnbWluRGlzdFNxJywgJ21pblZlbG9jaXR5JywgJ2ZhaWxPZmZzZXRYU3RhcnQnLCAnZmFpbE9mZnNldFlTdGFydCcsICdmYWlsT2Zmc2V0WEVuZCcsICdmYWlsT2Zmc2V0WUVuZCcsICdhY3RpdmVPZmZzZXRYU3RhcnQnLCAnYWN0aXZlT2Zmc2V0WEVuZCcsICdhY3RpdmVPZmZzZXRZU3RhcnQnLCAnYWN0aXZlT2Zmc2V0WUVuZCddO1xuICAgIGNvbmZpZ1Byb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9wc1twcm9wXSA9IE51bWJlci5OYU47XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3BzOyAvLyBUT0RPKFRTKSBob3cgdG8gY29udmluY2UgVFMgdGhhdCBwcm9wcyBhcmUgZmlsbGVkP1xuICB9XG5cbn0gLy8gVE9ETyhUUykgaW52ZXN0aWdhdGUgdGhpcyBtZXRob2Rcbi8vIFVzZWQgZm9yIHNlbmRpbmcgZGF0YSB0byBhIGNhbGxiYWNrIG9yIEFuaW1hdGVkRXZlbnRcblxuXG5mdW5jdGlvbiBpbnZva2VOdWxsYWJsZU1ldGhvZChtZXRob2QsIGV2ZW50KSB7XG4gIGlmIChtZXRob2QpIHtcbiAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWV0aG9kKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIHVzZSB3aXRoIHJlYW5pbWF0ZWQncyBBbmltYXRlZEV2ZW50XG4gICAgICBpZiAoJ19fZ2V0SGFuZGxlcicgaW4gbWV0aG9kICYmIHR5cGVvZiBtZXRob2QuX19nZXRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBtZXRob2QuX19nZXRIYW5kbGVyKCk7XG5cbiAgICAgICAgaW52b2tlTnVsbGFibGVNZXRob2QoaGFuZGxlciwgZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCdfX25vZGVDb25maWcnIGluIG1ldGhvZCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGFyZ01hcHBpbmdcbiAgICAgICAgICB9ID0gbWV0aG9kLl9fbm9kZUNvbmZpZztcblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ01hcHBpbmcpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgW2tleSwgdmFsdWVdXSBvZiBhcmdNYXBwaW5nLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICBpZiAoa2V5IGluIGV2ZW50Lm5hdGl2ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBmaXggbWV0aG9kIHR5cGVcbiAgICAgICAgICAgICAgICBjb25zdCBuYXRpdmVWYWx1ZSA9IGV2ZW50Lm5hdGl2ZUV2ZW50W2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuc2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFJlYW5pbWF0ZWQgQVBJXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5zZXRWYWx1ZShuYXRpdmVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIFJOIEFuaW1hdGVkIEFQSVxuICAgICAgICAgICAgICAgICAgbWV0aG9kLl9fbm9kZUNvbmZpZy5hcmdNYXBwaW5nW2luZGV4XSA9IFtrZXksIG5hdGl2ZVZhbHVlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNBcnJheSh2YWx1ZSkge1xuICAvLyBUT0RPKFRTKSB1c2UgY29uZmlnLndhaXRGb3IgdHlwZVxuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFtdIDogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbnZhciBfZGVmYXVsdCA9IEdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2hhbW1lcmpzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfU3RhdGUiLCJfY29uc3RhbnRzIiwiTm9kZU1hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2RlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZ2VzdHVyZUluc3RhbmNlcyIsIkdlc3R1cmVIYW5kbGVyIiwiaWQiLCJuYW1lIiwiZ2VzdHVyZUluc3RhbmNlIiwiaXNOYXRpdmUiLCJpc0Rpc2NyZXRlIiwic2hvdWxkRW5hYmxlR2VzdHVyZU9uU2V0dXAiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiU3RhdGUiLCJVTkRFVEVSTUlORUQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25maWciLCJ3YWl0Rm9yIiwiZ2VzdHVyZSIsInJlbW92ZVBlbmRpbmdHZXN0dXJlIiwiY2xlYXJTZWxmQXNQZW5kaW5nIiwiaGFtbWVyIiwic3RvcCIsImRlc3Ryb3kiLCJ4IiwieSIsInJlY3QiLCJ2aWV3IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicG9pbnRlckluc2lkZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5hdGl2ZUV2ZW50Iiwib25HZXN0dXJlSGFuZGxlckV2ZW50Iiwib25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlIiwicHJvcHNSZWYiLCJjdXJyZW50IiwiZXZlbnQiLCJ0cmFuc2Zvcm1FdmVudERhdGEiLCJpbnZva2VOdWxsYWJsZU1ldGhvZCIsImxhc3RTZW50U3RhdGUiLCJzdGF0ZSIsImVuYWJsZSIsInJlY29nbml6ZXIiLCJpbnB1dERhdGEiLCJlbmFibGVkIiwiaXNHZXN0dXJlUnVubmluZyIsImhhc0dlc3R1cmVGYWlsZWQiLCJvcHRpb25zIiwibWF4UG9pbnRlcnMiLCJfc3RpbGxXYWl0aW5nIiwiX2dldFBlbmRpbmdHZXN0dXJlcyIsImxlbmd0aCIsImhhc0N1c3RvbUFjdGl2YXRpb25Dcml0ZXJpYSIsImRlbHRhUm90YXRpb24iLCJpbml0aWFsUm90YXRpb24iLCJyb3RhdGlvbiIsInN1Y2Nlc3MiLCJmYWlsZWQiLCJpc0dlc3R1cmVFbmFibGVkRm9yRXZlbnQiLCJnZXRDb25maWciLCJzaW11bGF0ZUNhbmNlbEV2ZW50IiwicGFyYW1zIiwiZ2V0SGFtbWVyQ29uZmlnIiwib25XYWl0aW5nRW5kZWQiLCJfZ2VzdHVyZSIsInBlbmRpbmdHZXN0dXJlcyIsImFkZFBlbmRpbmdHZXN0dXJlIiwiX2NvbmZpZyIsIl9yZWNvZ25pemVyIiwiX2V2ZW50IiwiTmF0aXZlR2VzdHVyZUNsYXNzIiwidXBkYXRlSGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhIiwidXBkYXRlR2VzdHVyZUNvbmZpZyIsInByb3BzIiwiZW5zdXJlQ29uZmlnIiwic3luYyIsImdldFN0YXRlIiwidHlwZSIsIkV2ZW50TWFwIiwiZXZlbnRUeXBlIiwibnVtYmVyT2ZQb2ludGVycyIsImNoYW5nZWRUb3VjaCIsImNoYW5nZWRQb2ludGVycyIsImlzUG9pbnRJblZpZXciLCJjbGllbnRYIiwiY2xpZW50WSIsInByZXZpb3VzU3RhdGUiLCJvbGRTdGF0ZSIsInRyYW5zZm9ybU5hdGl2ZUV2ZW50IiwiaGFuZGxlclRhZyIsInRhcmdldCIsInJlZiIsInVuZGVmaW5lZCIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJjYW5jZWxQZW5kaW5nR2VzdHVyZXMiLCJ2YWx1ZXMiLCJjYW5jZWxFdmVudCIsIm5vdGlmeVBlbmRpbmdHZXN0dXJlcyIsIm9uR2VzdHVyZUVuZGVkIiwiZm9yY2VJbnZhbGlkYXRlIiwic2VuZEV2ZW50IiwiSU5QVVRfQ0FOQ0VMIiwiaXNGaW5hbCIsIm9uUmF3RXZlbnQiLCJpc0ZpcnN0Iiwic2hvdWxkVXNlVG91Y2hFdmVudHMiLCJfY29uZmlnJHNpbXVsdGFuZW91c0giLCJfY29uZmlnJHNpbXVsdGFuZW91c0gyIiwic2ltdWx0YW5lb3VzSGFuZGxlcnMiLCJzb21lIiwiaGFuZGxlciIsInNldFZpZXciLCJTVVBQT1JUU19UT1VDSCIsIndpbmRvdyIsImZpbmROb2RlSGFuZGxlIiwiTWFuYWdlciIsImlucHV0Q2xhc3MiLCJUb3VjaElucHV0IiwiYWRkIiwib24iLCJldiIsInNldFRpbWVvdXQiLCJzZXR1cEV2ZW50cyIsIm9uU3RhcnQiLCJvbkdlc3R1cmVBY3RpdmF0ZWQiLCJkZWx0YVgiLCJkZWx0YVkiLCJfX2luaXRpYWxYIiwiX19pbml0aWFsWSIsIm9uU3VjY2VzcyIsInN0aWxsV2FpdGluZyIsImZpbHRlciIsInBvaW50ZXJzIiwibWluUG9pbnRlcnMiLCJfaW5wdXREYXRhIiwibWluRGlzdCIsIm1pbkRpc3RTcSIsIm1pblZlbG9jaXR5IiwibWluVmVsb2NpdHlTcSIsIm1heERpc3QiLCJtYXhEaXN0U3EiLCJhc0FycmF5IiwibWFwIiwiZ2V0SGFuZGxlciIsInYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjb25maWdQcm9wcyIsImZvckVhY2giLCJwcm9wIiwiTnVtYmVyIiwiTmFOIiwibWV0aG9kIiwiX19nZXRIYW5kbGVyIiwiYXJnTWFwcGluZyIsIl9fbm9kZUNvbmZpZyIsImluZGV4IiwiZW50cmllcyIsIm5hdGl2ZVZhbHVlIiwic2V0VmFsdWUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */ class IndiscreteGestureHandler extends _GestureHandler.default {\n    get shouldEnableGestureOnSetup() {\n        return false;\n    }\n    updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n        return super.updateGestureConfig({\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n    isGestureEnabledForEvent({ minPointers, maxPointers }, _recognizer, { maxPointers: pointerLength }) {\n        if (pointerLength > maxPointers) {\n            return {\n                failed: true\n            };\n        }\n        const validPointerCount = pointerLength >= minPointers;\n        return {\n            success: validPointerCount\n        };\n    }\n}\nvar _default = IndiscreteGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=IndiscreteGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxrQkFBa0JDLHVCQUF1QkMsbUJBQU9BLENBQUMsK0dBQWtCO0FBRXZFLFNBQVNELHVCQUF1QkUsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFSixTQUFTSTtJQUFJO0FBQUc7QUFFOUY7O0NBRUMsR0FDRCxNQUFNRSxpQ0FBaUNMLGdCQUFnQkQsT0FBTztJQUM1RCxJQUFJTyw2QkFBNkI7UUFDL0IsT0FBTztJQUNUO0lBRUFDLG9CQUFvQixFQUNsQkMsY0FBYyxDQUFDLEVBQ2ZDLGNBQWMsQ0FBQyxFQUNmLEdBQUdDLE9BQ0osRUFBRTtRQUNELE9BQU8sS0FBSyxDQUFDSCxvQkFBb0I7WUFDL0JDO1lBQ0FDO1lBQ0EsR0FBR0MsS0FBSztRQUNWO0lBQ0Y7SUFFQUMseUJBQXlCLEVBQ3ZCSCxXQUFXLEVBQ1hDLFdBQVcsRUFDWixFQUFFRyxXQUFXLEVBQUUsRUFDZEgsYUFBYUksYUFBYSxFQUMzQixFQUFFO1FBQ0QsSUFBSUEsZ0JBQWdCSixhQUFhO1lBQy9CLE9BQU87Z0JBQ0xLLFFBQVE7WUFDVjtRQUNGO1FBRUEsTUFBTUMsb0JBQW9CRixpQkFBaUJMO1FBQzNDLE9BQU87WUFDTFEsU0FBU0Q7UUFDWDtJQUNGO0FBRUY7QUFFQSxJQUFJRSxXQUFXWjtBQUNmUixrQkFBZSxHQUFHb0IsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzPzE3NTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfR2VzdHVyZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dlc3R1cmVIYW5kbGVyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgKipSb3RhdGlvbioqIGFuZCAqKlBpbmNoKiogZ2VzdHVyZSBoYW5kbGVycy5cbiAqL1xuY2xhc3MgSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0dlc3R1cmVIYW5kbGVyLmRlZmF1bHQge1xuICBnZXQgc2hvdWxkRW5hYmxlR2VzdHVyZU9uU2V0dXAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdXBkYXRlR2VzdHVyZUNvbmZpZyh7XG4gICAgbWluUG9pbnRlcnMgPSAyLFxuICAgIG1heFBvaW50ZXJzID0gMixcbiAgICAuLi5wcm9wc1xuICB9KSB7XG4gICAgcmV0dXJuIHN1cGVyLnVwZGF0ZUdlc3R1cmVDb25maWcoe1xuICAgICAgbWluUG9pbnRlcnMsXG4gICAgICBtYXhQb2ludGVycyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSk7XG4gIH1cblxuICBpc0dlc3R1cmVFbmFibGVkRm9yRXZlbnQoe1xuICAgIG1pblBvaW50ZXJzLFxuICAgIG1heFBvaW50ZXJzXG4gIH0sIF9yZWNvZ25pemVyLCB7XG4gICAgbWF4UG9pbnRlcnM6IHBvaW50ZXJMZW5ndGhcbiAgfSkge1xuICAgIGlmIChwb2ludGVyTGVuZ3RoID4gbWF4UG9pbnRlcnMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZhaWxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZFBvaW50ZXJDb3VudCA9IHBvaW50ZXJMZW5ndGggPj0gbWluUG9pbnRlcnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHZhbGlkUG9pbnRlckNvdW50XG4gICAgfTtcbiAgfVxuXG59XG5cbnZhciBfZGVmYXVsdCA9IEluZGlzY3JldGVHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfR2VzdHVyZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJJbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXIiLCJzaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCIsInVwZGF0ZUdlc3R1cmVDb25maWciLCJtaW5Qb2ludGVycyIsIm1heFBvaW50ZXJzIiwicHJvcHMiLCJpc0dlc3R1cmVFbmFibGVkRm9yRXZlbnQiLCJfcmVjb2duaXplciIsInBvaW50ZXJMZW5ndGgiLCJmYWlsZWQiLCJ2YWxpZFBvaW50ZXJDb3VudCIsInN1Y2Nlc3MiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _PressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./PressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class LongPressGestureHandler extends _PressGestureHandler.default {\n    get minDurationMs() {\n        // @ts-ignore FIXNE(TS)\n        return (0, _utils.isnan)(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n    }\n    get maxDist() {\n        // @ts-ignore FIXNE(TS)\n        return (0, _utils.isnan)(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n    updateHasCustomActivationCriteria({ maxDistSq }) {\n        return !(0, _utils.isValidNumber)(maxDistSq);\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                shouldCancelWhenOutside: true,\n                maxDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            // threshold: this.maxDist,\n            time: this.minDurationMs\n        };\n    }\n    getState(type) {\n        return ({\n            [_hammerjs.default.INPUT_START]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_END]: _State.State.END,\n            [_hammerjs.default.INPUT_CANCEL]: _State.State.FAILED\n        })[type];\n    }\n}\nvar _default = LongPressGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBRXZCLElBQUlHLFlBQVlDLHVCQUF1QkMsbUJBQU9BLENBQUMsc0NBQWdCO0FBRS9ELElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLElBQUlFLHVCQUF1QkgsdUJBQXVCQyxtQkFBT0EsQ0FBQyx5SEFBdUI7QUFFakYsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUMsNkZBQVM7QUFFOUIsU0FBU0QsdUJBQXVCSyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVQLFNBQVNPO0lBQUk7QUFBRztBQUU5Rix1REFBdUQsR0FFdkQsa0JBQWtCLEdBQ2xCLE1BQU1FLGdDQUFnQ0oscUJBQXFCTCxPQUFPO0lBQ2hFLElBQUlVLGdCQUFnQjtRQUNsQix1QkFBdUI7UUFDdkIsT0FBTyxDQUFDLEdBQUdKLE9BQU9LLEtBQUssRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0YsYUFBYSxJQUFJLE1BQU0sSUFBSSxDQUFDRSxNQUFNLENBQUNGLGFBQWE7SUFDdkY7SUFFQSxJQUFJRyxVQUFVO1FBQ1osdUJBQXVCO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHUCxPQUFPSyxLQUFLLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxPQUFPO0lBQ3pFO0lBRUFDLGtDQUFrQyxFQUNoQ0MsU0FBUyxFQUNWLEVBQUU7UUFDRCxPQUFPLENBQUMsQ0FBQyxHQUFHVCxPQUFPVSxhQUFhLEVBQUVEO0lBQ3BDO0lBRUFFLFlBQVk7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDQywyQkFBMkIsRUFBRTtZQUNyQyxpQkFBaUI7WUFDakIsNEdBQTRHO1lBQzVHLE9BQU87Z0JBQ0xDLHlCQUF5QjtnQkFDekJKLFdBQVc7WUFDYjtRQUNGO1FBRUEsT0FBTyxJQUFJLENBQUNILE1BQU07SUFDcEI7SUFFQVEsa0JBQWtCO1FBQ2hCLE9BQU87WUFBRSxHQUFHLEtBQUssQ0FBQ0EsaUJBQWlCO1lBQ2pDLDJCQUEyQjtZQUMzQkMsTUFBTSxJQUFJLENBQUNYLGFBQWE7UUFDMUI7SUFDRjtJQUVBWSxTQUFTQyxJQUFJLEVBQUU7UUFDYixPQUFPO1lBQ0wsQ0FBQ3RCLFVBQVVELE9BQU8sQ0FBQ3dCLFdBQVcsQ0FBQyxFQUFFcEIsT0FBT3FCLEtBQUssQ0FBQ0MsTUFBTTtZQUNwRCxDQUFDekIsVUFBVUQsT0FBTyxDQUFDMkIsVUFBVSxDQUFDLEVBQUV2QixPQUFPcUIsS0FBSyxDQUFDQyxNQUFNO1lBQ25ELENBQUN6QixVQUFVRCxPQUFPLENBQUM0QixTQUFTLENBQUMsRUFBRXhCLE9BQU9xQixLQUFLLENBQUNJLEdBQUc7WUFDL0MsQ0FBQzVCLFVBQVVELE9BQU8sQ0FBQzhCLFlBQVksQ0FBQyxFQUFFMUIsT0FBT3FCLEtBQUssQ0FBQ00sTUFBTTtRQUN2RCxFQUFDLENBQUNSLEtBQUs7SUFDVDtBQUVGO0FBRUEsSUFBSVMsV0FBV3ZCO0FBQ2ZYLGtCQUFlLEdBQUdrQyxVQUNsQixtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcz84YzkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hhbW1lcmpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVnanMvaGFtbWVyanNcIikpO1xuXG52YXIgX1N0YXRlID0gcmVxdWlyZShcIi4uL1N0YXRlXCIpO1xuXG52YXIgX1ByZXNzR2VzdHVyZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1ByZXNzR2VzdHVyZUhhbmRsZXJcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzbGludC1jb21tZW50cy9uby11bmxpbWl0ZWQtZGlzYWJsZSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY2xhc3MgTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfUHJlc3NHZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgZ2V0IG1pbkR1cmF0aW9uTXMoKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBGSVhORShUUylcbiAgICByZXR1cm4gKDAsIF91dGlscy5pc25hbikodGhpcy5jb25maWcubWluRHVyYXRpb25NcykgPyAyNTEgOiB0aGlzLmNvbmZpZy5taW5EdXJhdGlvbk1zO1xuICB9XG5cbiAgZ2V0IG1heERpc3QoKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBGSVhORShUUylcbiAgICByZXR1cm4gKDAsIF91dGlscy5pc25hbikodGhpcy5jb25maWcubWF4RGlzdCkgPyA5IDogdGhpcy5jb25maWcubWF4RGlzdDtcbiAgfVxuXG4gIHVwZGF0ZUhhc0N1c3RvbUFjdGl2YXRpb25Dcml0ZXJpYSh7XG4gICAgbWF4RGlzdFNxXG4gIH0pIHtcbiAgICByZXR1cm4gISgwLCBfdXRpbHMuaXNWYWxpZE51bWJlcikobWF4RGlzdFNxKTtcbiAgfVxuXG4gIGdldENvbmZpZygpIHtcbiAgICBpZiAoIXRoaXMuaGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhKSB7XG4gICAgICAvLyBEZWZhdWx0IGNvbmZpZ1xuICAgICAgLy8gSWYgbm8gcGFyYW1zIGhhdmUgYmVlbiBkZWZpbmVkIHRoZW4gdGhpcyBjb25maWcgc2hvdWxkIGVtdWxhdGUgdGhlIG5hdGl2ZSBnZXN0dXJlIGFzIGNsb3NlbHkgYXMgcG9zc2libGUuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG91bGRDYW5jZWxXaGVuT3V0c2lkZTogdHJ1ZSxcbiAgICAgICAgbWF4RGlzdFNxOiAxMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cblxuICBnZXRIYW1tZXJDb25maWcoKSB7XG4gICAgcmV0dXJuIHsgLi4uc3VwZXIuZ2V0SGFtbWVyQ29uZmlnKCksXG4gICAgICAvLyB0aHJlc2hvbGQ6IHRoaXMubWF4RGlzdCxcbiAgICAgIHRpbWU6IHRoaXMubWluRHVyYXRpb25Nc1xuICAgIH07XG4gIH1cblxuICBnZXRTdGF0ZSh0eXBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9TVEFSVF06IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUsXG4gICAgICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfTU9WRV06IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUsXG4gICAgICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfRU5EXTogX1N0YXRlLlN0YXRlLkVORCxcbiAgICAgIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9DQU5DRUxdOiBfU3RhdGUuU3RhdGUuRkFJTEVEXG4gICAgfVt0eXBlXTtcbiAgfVxuXG59XG5cbnZhciBfZGVmYXVsdCA9IExvbmdQcmVzc0dlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2hhbW1lcmpzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfU3RhdGUiLCJfUHJlc3NHZXN0dXJlSGFuZGxlciIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJMb25nUHJlc3NHZXN0dXJlSGFuZGxlciIsIm1pbkR1cmF0aW9uTXMiLCJpc25hbiIsImNvbmZpZyIsIm1heERpc3QiLCJ1cGRhdGVIYXNDdXN0b21BY3RpdmF0aW9uQ3JpdGVyaWEiLCJtYXhEaXN0U3EiLCJpc1ZhbGlkTnVtYmVyIiwiZ2V0Q29uZmlnIiwiaGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhIiwic2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUiLCJnZXRIYW1tZXJDb25maWciLCJ0aW1lIiwiZ2V0U3RhdGUiLCJ0eXBlIiwiSU5QVVRfU1RBUlQiLCJTdGF0ZSIsIkFDVElWRSIsIklOUFVUX01PVkUiLCJJTlBVVF9FTkQiLCJFTkQiLCJJTlBVVF9DQU5DRUwiLCJGQUlMRUQiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar NodeManager = _interopRequireWildcard(__webpack_require__(/*! ./NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nvar _PressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./PressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass NativeViewGestureHandler extends _PressGestureHandler.default {\n    get isNative() {\n        return true;\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (!ev.isFinal) {\n            // if (this.ref instanceof ScrollView) {\n            if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n                x: ev.deltaX,\n                y: ev.deltaY\n            }), 10)) {\n                // @ts-ignore FIXME(TS) config type\n                if (this.config.disallowInterruption) {\n                    const gestures = Object.values(NodeManager.getNodes()).filter((gesture)=>{\n                        const { handlerTag, view, isGestureRunning } = gesture;\n                        return handlerTag !== this.handlerTag && // Ensure the gesture needs to be cancelled\n                        isGestureRunning && // ScrollView can cancel discrete gestures like taps and presses\n                        gesture instanceof _DiscreteGestureHandler.default && // Ensure a view exists and is a child of the current view\n                        view && // @ts-ignore FIXME(TS) view type\n                        this.view.contains(view);\n                    }); // Cancel all of the gestures that passed the filter\n                    for (const gesture of gestures){\n                        // TODO: Bacon: Send some cached event.\n                        gesture.forceInvalidate(ev);\n                    }\n                }\n            }\n        }\n    }\n}\nvar _default = NativeViewGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRywwQkFBMEJDLHVCQUF1QkMsbUJBQU9BLENBQUMsK0hBQTBCO0FBRXZGLElBQUlDLGNBQWNDLHdCQUF3QkYsbUJBQU9BLENBQUMseUdBQWU7QUFFakUsSUFBSUcsdUJBQXVCSix1QkFBdUJDLG1CQUFPQSxDQUFDLHlIQUF1QjtBQUVqRixJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQyw2RkFBUztBQUU5QixTQUFTSztJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkI7UUFBYyxPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUV6TCxTQUFTTCx3QkFBd0JNLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUU7UUFBRSxPQUFPRDtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVYLFNBQVNXO1FBQUk7SUFBRztJQUFFLElBQUlELFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1HLEdBQUcsQ0FBQ0YsTUFBTTtRQUFFLE9BQU9ELE1BQU1JLEdBQUcsQ0FBQ0g7SUFBTTtJQUFFLElBQUlJLFNBQVMsQ0FBQztJQUFHLElBQUlDLHdCQUF3QnBCLE9BQU9DLGNBQWMsSUFBSUQsT0FBT3FCLHdCQUF3QjtJQUFFLElBQUssSUFBSUMsT0FBT1AsSUFBSztRQUFFLElBQUlmLE9BQU91QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDVixLQUFLTyxNQUFNO1lBQUUsSUFBSUksT0FBT04sd0JBQXdCcEIsT0FBT3FCLHdCQUF3QixDQUFDTixLQUFLTyxPQUFPO1lBQU0sSUFBSUksUUFBU0EsQ0FBQUEsS0FBS1IsR0FBRyxJQUFJUSxLQUFLQyxHQUFHLEdBQUc7Z0JBQUUzQixPQUFPQyxjQUFjLENBQUNrQixRQUFRRyxLQUFLSTtZQUFPLE9BQU87Z0JBQUVQLE1BQU0sQ0FBQ0csSUFBSSxHQUFHUCxHQUFHLENBQUNPLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUgsT0FBT2YsT0FBTyxHQUFHVztJQUFLLElBQUlELE9BQU87UUFBRUEsTUFBTWEsR0FBRyxDQUFDWixLQUFLSTtJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU2IsdUJBQXVCUyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVYLFNBQVNXO0lBQUk7QUFBRztBQUU5RixNQUFNYSxpQ0FBaUNsQixxQkFBcUJOLE9BQU87SUFDakUsSUFBSXlCLFdBQVc7UUFDYixPQUFPO0lBQ1Q7SUFFQUMsV0FBV0MsRUFBRSxFQUFFO1FBQ2IsS0FBSyxDQUFDRCxXQUFXQztRQUVqQixJQUFJLENBQUNBLEdBQUdDLE9BQU8sRUFBRTtZQUNmLHdDQUF3QztZQUN4QyxJQUFJLENBQUMsR0FBR3JCLE9BQU9zQixtQkFBbUIsRUFBRSxDQUFDLEdBQUd0QixPQUFPdUIsVUFBVSxFQUFFO2dCQUN6REMsR0FBR0osR0FBR0ssTUFBTTtnQkFDWkMsR0FBR04sR0FBR08sTUFBTTtZQUNkLElBQUksS0FBSztnQkFDUCxtQ0FBbUM7Z0JBQ25DLElBQUksSUFBSSxDQUFDQyxNQUFNLENBQUNDLG9CQUFvQixFQUFFO29CQUNwQyxNQUFNQyxXQUFXekMsT0FBTzBDLE1BQU0sQ0FBQ2xDLFlBQVltQyxRQUFRLElBQUlDLE1BQU0sQ0FBQ0MsQ0FBQUE7d0JBQzVELE1BQU0sRUFDSkMsVUFBVSxFQUNWQyxJQUFJLEVBQ0pDLGdCQUFnQixFQUNqQixHQUFHSDt3QkFDSixPQUNFQyxlQUFlLElBQUksQ0FBQ0EsVUFBVSxJQUFJLDJDQUEyQzt3QkFDN0VFLG9CQUFvQixnRUFBZ0U7d0JBQ3BGSCxtQkFBbUJ4Qyx3QkFBd0JELE9BQU8sSUFBSSwwREFBMEQ7d0JBQ2hIMkMsUUFBUSxpQ0FBaUM7d0JBQ3pDLElBQUksQ0FBQ0EsSUFBSSxDQUFDRSxRQUFRLENBQUNGO29CQUV2QixJQUFJLG9EQUFvRDtvQkFFeEQsS0FBSyxNQUFNRixXQUFXSixTQUFVO3dCQUM5Qix1Q0FBdUM7d0JBQ3ZDSSxRQUFRSyxlQUFlLENBQUNuQjtvQkFDMUI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFFRjtBQUVBLElBQUlvQixXQUFXdkI7QUFDZjFCLGtCQUFlLEdBQUdpRCxVQUNsQixvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanM/MDEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyXCIpKTtcblxudmFyIE5vZGVNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTm9kZU1hbmFnZXJcIikpO1xuXG52YXIgX1ByZXNzR2VzdHVyZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1ByZXNzR2VzdHVyZUhhbmRsZXJcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfUHJlc3NHZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgZ2V0IGlzTmF0aXZlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgb25SYXdFdmVudChldikge1xuICAgIHN1cGVyLm9uUmF3RXZlbnQoZXYpO1xuXG4gICAgaWYgKCFldi5pc0ZpbmFsKSB7XG4gICAgICAvLyBpZiAodGhpcy5yZWYgaW5zdGFuY2VvZiBTY3JvbGxWaWV3KSB7XG4gICAgICBpZiAoKDAsIF91dGlscy5URVNUX01JTl9JRl9OT1RfTkFOKSgoMCwgX3V0aWxzLlZFQ19MRU5fU1EpKHtcbiAgICAgICAgeDogZXYuZGVsdGFYLFxuICAgICAgICB5OiBldi5kZWx0YVlcbiAgICAgIH0pLCAxMCkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRShUUykgY29uZmlnIHR5cGVcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmRpc2FsbG93SW50ZXJydXB0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZ2VzdHVyZXMgPSBPYmplY3QudmFsdWVzKE5vZGVNYW5hZ2VyLmdldE5vZGVzKCkpLmZpbHRlcihnZXN0dXJlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgaGFuZGxlclRhZyxcbiAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICAgaXNHZXN0dXJlUnVubmluZ1xuICAgICAgICAgICAgfSA9IGdlc3R1cmU7XG4gICAgICAgICAgICByZXR1cm4gKC8vIENoZWNrIGlmIHRoaXMgZ2VzdHVyZSBpc24ndCBzZWxmXG4gICAgICAgICAgICAgIGhhbmRsZXJUYWcgIT09IHRoaXMuaGFuZGxlclRhZyAmJiAvLyBFbnN1cmUgdGhlIGdlc3R1cmUgbmVlZHMgdG8gYmUgY2FuY2VsbGVkXG4gICAgICAgICAgICAgIGlzR2VzdHVyZVJ1bm5pbmcgJiYgLy8gU2Nyb2xsVmlldyBjYW4gY2FuY2VsIGRpc2NyZXRlIGdlc3R1cmVzIGxpa2UgdGFwcyBhbmQgcHJlc3Nlc1xuICAgICAgICAgICAgICBnZXN0dXJlIGluc3RhbmNlb2YgX0Rpc2NyZXRlR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCAmJiAvLyBFbnN1cmUgYSB2aWV3IGV4aXN0cyBhbmQgaXMgYSBjaGlsZCBvZiB0aGUgY3VycmVudCB2aWV3XG4gICAgICAgICAgICAgIHZpZXcgJiYgLy8gQHRzLWlnbm9yZSBGSVhNRShUUykgdmlldyB0eXBlXG4gICAgICAgICAgICAgIHRoaXMudmlldy5jb250YWlucyh2aWV3KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTsgLy8gQ2FuY2VsIGFsbCBvZiB0aGUgZ2VzdHVyZXMgdGhhdCBwYXNzZWQgdGhlIGZpbHRlclxuXG4gICAgICAgICAgZm9yIChjb25zdCBnZXN0dXJlIG9mIGdlc3R1cmVzKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBCYWNvbjogU2VuZCBzb21lIGNhY2hlZCBldmVudC5cbiAgICAgICAgICAgIGdlc3R1cmUuZm9yY2VJbnZhbGlkYXRlKGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX0Rpc2NyZXRlR2VzdHVyZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk5vZGVNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfUHJlc3NHZXN0dXJlSGFuZGxlciIsIl91dGlscyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyIiwiaXNOYXRpdmUiLCJvblJhd0V2ZW50IiwiZXYiLCJpc0ZpbmFsIiwiVEVTVF9NSU5fSUZfTk9UX05BTiIsIlZFQ19MRU5fU1EiLCJ4IiwiZGVsdGFYIiwieSIsImRlbHRhWSIsImNvbmZpZyIsImRpc2FsbG93SW50ZXJydXB0aW9uIiwiZ2VzdHVyZXMiLCJ2YWx1ZXMiLCJnZXROb2RlcyIsImZpbHRlciIsImdlc3R1cmUiLCJoYW5kbGVyVGFnIiwidmlldyIsImlzR2VzdHVyZVJ1bm5pbmciLCJjb250YWlucyIsImZvcmNlSW52YWxpZGF0ZSIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHandler = getHandler;\nexports.createGestureHandler = createGestureHandler;\nexports.dropGestureHandler = dropGestureHandler;\nexports.getNodes = getNodes;\nconst gestures = {};\nfunction getHandler(tag) {\n    if (tag in gestures) {\n        return gestures[tag];\n    }\n    throw new Error(`No handler for tag ${tag}`);\n}\nfunction createGestureHandler(handlerTag, handler) {\n    if (handlerTag in gestures) {\n        throw new Error(`Handler with tag ${handlerTag} already exists`);\n    }\n    gestures[handlerTag] = handler; // @ts-ignore no types for web handlers yet\n    gestures[handlerTag].handlerTag = handlerTag;\n}\nfunction dropGestureHandler(handlerTag) {\n    // Since React 18, there are cases where componentWillUnmount gets called twice in a row\n    // so skip this if the tag was already removed.\n    if (!(handlerTag in gestures)) {\n        return;\n    }\n    getHandler(handlerTag).destroy(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete gestures[handlerTag];\n}\nfunction getNodes() {\n    return {\n        ...gestures\n    };\n} //# sourceMappingURL=NodeManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Ob2RlTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdFO0FBQ3JCRiw0QkFBNEIsR0FBR0c7QUFDL0JILDBCQUEwQixHQUFHSTtBQUM3QkosZ0JBQWdCLEdBQUdLO0FBQ25CLE1BQU1DLFdBQVcsQ0FBQztBQUVsQixTQUFTSixXQUFXSyxHQUFHO0lBQ3JCLElBQUlBLE9BQU9ELFVBQVU7UUFDbkIsT0FBT0EsUUFBUSxDQUFDQyxJQUFJO0lBQ3RCO0lBRUEsTUFBTSxJQUFJQyxNQUFNLENBQUMsbUJBQW1CLEVBQUVELElBQUksQ0FBQztBQUM3QztBQUVBLFNBQVNKLHFCQUFxQk0sVUFBVSxFQUFFQyxPQUFPO0lBQy9DLElBQUlELGNBQWNILFVBQVU7UUFDMUIsTUFBTSxJQUFJRSxNQUFNLENBQUMsaUJBQWlCLEVBQUVDLFdBQVcsZUFBZSxDQUFDO0lBQ2pFO0lBRUFILFFBQVEsQ0FBQ0csV0FBVyxHQUFHQyxTQUFTLDJDQUEyQztJQUUzRUosUUFBUSxDQUFDRyxXQUFXLENBQUNBLFVBQVUsR0FBR0E7QUFDcEM7QUFFQSxTQUFTTCxtQkFBbUJLLFVBQVU7SUFDcEMsd0ZBQXdGO0lBQ3hGLCtDQUErQztJQUMvQyxJQUFJLENBQUVBLENBQUFBLGNBQWNILFFBQU8sR0FBSTtRQUM3QjtJQUNGO0lBRUFKLFdBQVdPLFlBQVlFLE9BQU8sSUFBSSxnRUFBZ0U7SUFFbEcsT0FBT0wsUUFBUSxDQUFDRyxXQUFXO0FBQzdCO0FBRUEsU0FBU0o7SUFDUCxPQUFPO1FBQUUsR0FBR0MsUUFBUTtJQUNwQjtBQUNGLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvTm9kZU1hbmFnZXIuanM/MmQzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0SGFuZGxlciA9IGdldEhhbmRsZXI7XG5leHBvcnRzLmNyZWF0ZUdlc3R1cmVIYW5kbGVyID0gY3JlYXRlR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmRyb3BHZXN0dXJlSGFuZGxlciA9IGRyb3BHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZ2V0Tm9kZXMgPSBnZXROb2RlcztcbmNvbnN0IGdlc3R1cmVzID0ge307XG5cbmZ1bmN0aW9uIGdldEhhbmRsZXIodGFnKSB7XG4gIGlmICh0YWcgaW4gZ2VzdHVyZXMpIHtcbiAgICByZXR1cm4gZ2VzdHVyZXNbdGFnXTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgTm8gaGFuZGxlciBmb3IgdGFnICR7dGFnfWApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnLCBoYW5kbGVyKSB7XG4gIGlmIChoYW5kbGVyVGFnIGluIGdlc3R1cmVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBIYW5kbGVyIHdpdGggdGFnICR7aGFuZGxlclRhZ30gYWxyZWFkeSBleGlzdHNgKTtcbiAgfVxuXG4gIGdlc3R1cmVzW2hhbmRsZXJUYWddID0gaGFuZGxlcjsgLy8gQHRzLWlnbm9yZSBubyB0eXBlcyBmb3Igd2ViIGhhbmRsZXJzIHlldFxuXG4gIGdlc3R1cmVzW2hhbmRsZXJUYWddLmhhbmRsZXJUYWcgPSBoYW5kbGVyVGFnO1xufVxuXG5mdW5jdGlvbiBkcm9wR2VzdHVyZUhhbmRsZXIoaGFuZGxlclRhZykge1xuICAvLyBTaW5jZSBSZWFjdCAxOCwgdGhlcmUgYXJlIGNhc2VzIHdoZXJlIGNvbXBvbmVudFdpbGxVbm1vdW50IGdldHMgY2FsbGVkIHR3aWNlIGluIGEgcm93XG4gIC8vIHNvIHNraXAgdGhpcyBpZiB0aGUgdGFnIHdhcyBhbHJlYWR5IHJlbW92ZWQuXG4gIGlmICghKGhhbmRsZXJUYWcgaW4gZ2VzdHVyZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGFuZGxlcihoYW5kbGVyVGFnKS5kZXN0cm95KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcblxuICBkZWxldGUgZ2VzdHVyZXNbaGFuZGxlclRhZ107XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVzKCkge1xuICByZXR1cm4geyAuLi5nZXN0dXJlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9kZU1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0SGFuZGxlciIsImNyZWF0ZUdlc3R1cmVIYW5kbGVyIiwiZHJvcEdlc3R1cmVIYW5kbGVyIiwiZ2V0Tm9kZXMiLCJnZXN0dXJlcyIsInRhZyIsIkVycm9yIiwiaGFuZGxlclRhZyIsImhhbmRsZXIiLCJkZXN0cm95Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _DraggingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DraggingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PanGestureHandler extends _DraggingGestureHandler.default {\n    get name() {\n        return \"pan\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Pan;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            direction: this.getDirection()\n        };\n    }\n    getState(type) {\n        const nextState = super.getState(type); // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n        if (this.previousState === _State.State.UNDETERMINED && nextState === _State.State.ACTIVE) {\n            return _State.State.BEGAN;\n        }\n        return nextState;\n    }\n    getDirection() {\n        const config = this.getConfig();\n        const { activeOffsetXStart, activeOffsetXEnd, activeOffsetYStart, activeOffsetYEnd, minDist } = config;\n        let directions = [];\n        let horizontalDirections = [];\n        if (!(0, _utils.isnan)(minDist)) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        if (!(0, _utils.isnan)(activeOffsetXStart)) {\n            horizontalDirections.push(_hammerjs.default.DIRECTION_LEFT);\n        }\n        if (!(0, _utils.isnan)(activeOffsetXEnd)) {\n            horizontalDirections.push(_hammerjs.default.DIRECTION_RIGHT);\n        }\n        if (horizontalDirections.length === 2) {\n            horizontalDirections = [\n                _hammerjs.default.DIRECTION_HORIZONTAL\n            ];\n        }\n        directions = directions.concat(horizontalDirections);\n        let verticalDirections = [];\n        if (!(0, _utils.isnan)(activeOffsetYStart)) {\n            verticalDirections.push(_hammerjs.default.DIRECTION_UP);\n        }\n        if (!(0, _utils.isnan)(activeOffsetYEnd)) {\n            verticalDirections.push(_hammerjs.default.DIRECTION_DOWN);\n        }\n        if (verticalDirections.length === 2) {\n            verticalDirections = [\n                _hammerjs.default.DIRECTION_VERTICAL\n            ];\n        }\n        directions = directions.concat(verticalDirections);\n        if (!directions.length) {\n            return _hammerjs.default.DIRECTION_NONE;\n        }\n        if (directions[0] === _hammerjs.default.DIRECTION_HORIZONTAL && directions[1] === _hammerjs.default.DIRECTION_VERTICAL) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        if (horizontalDirections.length && verticalDirections.length) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        return directions[0];\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                minDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    shouldFailUnderCustomCriteria({ deltaX, deltaY }, criteria) {\n        return !(0, _utils.isnan)(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !(0, _utils.isnan)(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !(0, _utils.isnan)(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !(0, _utils.isnan)(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n    shouldActivateUnderCustomCriteria({ deltaX, deltaY, velocity }, criteria) {\n        return !(0, _utils.isnan)(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !(0, _utils.isnan)(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !(0, _utils.isnan)(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !(0, _utils.isnan)(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n            x: deltaX,\n            y: deltaY\n        }), criteria.minDistSq) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.x, criteria.minVelocityX) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.y, criteria.minVelocityY) || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)(velocity), criteria.minVelocitySq);\n    }\n    shouldMultiFingerPanFail({ pointerLength, scale, deltaRotation }) {\n        if (pointerLength <= 1) {\n            return false;\n        } // Test if the pan had too much pinching or rotating.\n        const deltaScale = Math.abs(scale - 1);\n        const absDeltaRotation = Math.abs(deltaRotation);\n        if (deltaScale > _constants.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n            // > If the threshold doesn't seem right.\n            // You can log the value which it failed at here:\n            return true;\n        }\n        if (absDeltaRotation > _constants.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n            // > If the threshold doesn't seem right.\n            // You can log the value which it failed at here:\n            return true;\n        }\n        return false;\n    }\n    updateHasCustomActivationCriteria(criteria) {\n        return (0, _utils.isValidNumber)(criteria.minDistSq) || (0, _utils.isValidNumber)(criteria.minVelocityX) || (0, _utils.isValidNumber)(criteria.minVelocityY) || (0, _utils.isValidNumber)(criteria.minVelocitySq) || (0, _utils.isValidNumber)(criteria.activeOffsetXStart) || (0, _utils.isValidNumber)(criteria.activeOffsetXEnd) || (0, _utils.isValidNumber)(criteria.activeOffsetYStart) || (0, _utils.isValidNumber)(criteria.activeOffsetYEnd);\n    }\n    isGestureEnabledForEvent(props, _recognizer, inputData) {\n        if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n            return {\n                failed: true\n            };\n        }\n        const velocity = {\n            x: inputData.velocityX,\n            y: inputData.velocityY\n        };\n        if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n            deltaX: inputData.deltaX,\n            deltaY: inputData.deltaY,\n            velocity\n        }, props)) {\n            if (this.shouldMultiFingerPanFail({\n                pointerLength: inputData.maxPointers,\n                scale: inputData.scale,\n                deltaRotation: inputData.deltaRotation\n            })) {\n                return {\n                    failed: true\n                };\n            }\n            return {\n                success: true\n            };\n        }\n        return {\n            success: false\n        };\n    }\n}\nvar _default = PanGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _IndiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./IndiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PinchGestureHandler extends _IndiscreteGestureHandler.default {\n    get name() {\n        return \"pinch\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Pinch;\n    }\n    transformNativeEvent({ scale, velocity, center }) {\n        return {\n            focalX: center.x,\n            focalY: center.y,\n            velocity,\n            scale\n        };\n    }\n}\nvar _default = PinchGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9QaW5jaEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsWUFBWUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFL0QsSUFBSUMsNEJBQTRCRix1QkFBdUJDLG1CQUFPQSxDQUFDLG1JQUE0QjtBQUUzRixTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLE1BQU1FLDRCQUE0QkgsMEJBQTBCSixPQUFPO0lBQ2pFLElBQUlRLE9BQU87UUFDVCxPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxxQkFBcUI7UUFDdkIsT0FBT1IsVUFBVUQsT0FBTyxDQUFDVSxLQUFLO0lBQ2hDO0lBRUFDLHFCQUFxQixFQUNuQkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLE1BQU0sRUFDUCxFQUFFO1FBQ0QsT0FBTztZQUNMQyxRQUFRRCxPQUFPRSxDQUFDO1lBQ2hCQyxRQUFRSCxPQUFPSSxDQUFDO1lBQ2hCTDtZQUNBRDtRQUNGO0lBQ0Y7QUFFRjtBQUVBLElBQUlPLFdBQVdaO0FBQ2ZULGtCQUFlLEdBQUdxQixVQUNsQiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2JpbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9QaW5jaEdlc3R1cmVIYW5kbGVyLmpzPzM4MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaGFtbWVyanMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAZWdqcy9oYW1tZXJqc1wiKSk7XG5cbnZhciBfSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBQaW5jaEdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0luZGlzY3JldGVHZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuICdwaW5jaCc7XG4gIH1cblxuICBnZXQgTmF0aXZlR2VzdHVyZUNsYXNzKCkge1xuICAgIHJldHVybiBfaGFtbWVyanMuZGVmYXVsdC5QaW5jaDtcbiAgfVxuXG4gIHRyYW5zZm9ybU5hdGl2ZUV2ZW50KHtcbiAgICBzY2FsZSxcbiAgICB2ZWxvY2l0eSxcbiAgICBjZW50ZXJcbiAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2NhbFg6IGNlbnRlci54LFxuICAgICAgZm9jYWxZOiBjZW50ZXIueSxcbiAgICAgIHZlbG9jaXR5LFxuICAgICAgc2NhbGVcbiAgICB9O1xuICB9XG5cbn1cblxudmFyIF9kZWZhdWx0ID0gUGluY2hHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGluY2hHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2hhbW1lcmpzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIiwib2JqIiwiX19lc01vZHVsZSIsIlBpbmNoR2VzdHVyZUhhbmRsZXIiLCJuYW1lIiwiTmF0aXZlR2VzdHVyZUNsYXNzIiwiUGluY2giLCJ0cmFuc2Zvcm1OYXRpdmVFdmVudCIsInNjYWxlIiwidmVsb2NpdHkiLCJjZW50ZXIiLCJmb2NhbFgiLCJ4IiwiZm9jYWxZIiwieSIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass PressGestureHandler extends _DiscreteGestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"visualFeedbackTimer\", void 0);\n        _defineProperty(this, \"initialEvent\", null);\n        _defineProperty(this, \"shouldDelayTouches\", true);\n    }\n    get name() {\n        return \"press\";\n    }\n    get minDurationMs() {\n        // @ts-ignore FIXME(TS)\n        return (0, _utils.isnan)(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n    get maxDist() {\n        return (0, _utils.isnan)(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Press;\n    }\n    simulateCancelEvent(inputData) {\n        // Long press never starts so we can't rely on the running event boolean.\n        this.hasGestureFailed = true;\n        this.cancelEvent(inputData);\n    }\n    updateHasCustomActivationCriteria({ shouldCancelWhenOutside, maxDistSq }) {\n        return shouldCancelWhenOutside || !(0, _utils.isValidNumber)(maxDistSq);\n    }\n    getState(type) {\n        return ({\n            [_hammerjs.default.INPUT_START]: _State.State.BEGAN,\n            [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_END]: _State.State.END,\n            [_hammerjs.default.INPUT_CANCEL]: _State.State.CANCELLED\n        })[type];\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                shouldCancelWhenOutside: true,\n                maxDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            // threshold: this.maxDist,\n            time: this.minDurationMs\n        };\n    }\n    onGestureActivated(ev) {\n        this.onGestureStart(ev);\n    }\n    shouldDelayTouchForEvent({ pointerType }) {\n        // Don't disable event for mouse input\n        return this.shouldDelayTouches && pointerType === \"touch\";\n    }\n    onGestureStart(ev) {\n        this.isGestureRunning = true;\n        clearTimeout(this.visualFeedbackTimer);\n        this.initialEvent = ev;\n        this.visualFeedbackTimer = (0, _utils.fireAfterInterval)(()=>{\n            this.sendGestureStartedEvent(this.initialEvent);\n            this.initialEvent = null;\n        }, this.shouldDelayTouchForEvent(ev) && _constants.CONTENT_TOUCHES_DELAY);\n    }\n    sendGestureStartedEvent(ev) {\n        clearTimeout(this.visualFeedbackTimer);\n        this.visualFeedbackTimer = null;\n        this.sendEvent({\n            ...ev,\n            eventType: _hammerjs.default.INPUT_MOVE,\n            isFirst: true\n        });\n    }\n    forceInvalidate(event) {\n        super.forceInvalidate(event);\n        clearTimeout(this.visualFeedbackTimer);\n        this.visualFeedbackTimer = null;\n        this.initialEvent = null;\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (this.isGestureRunning) {\n            if (ev.isFinal) {\n                let timeout;\n                if (this.visualFeedbackTimer) {\n                    // Aesthetic timing for a quick tap.\n                    // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n                    // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n                    timeout = _constants.CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n                    this.sendGestureStartedEvent(this.initialEvent);\n                    this.initialEvent = null;\n                }\n                (0, _utils.fireAfterInterval)(()=>{\n                    this.sendEvent({\n                        ...ev,\n                        eventType: _hammerjs.default.INPUT_END,\n                        isFinal: true\n                    }); // @ts-ignore -- this should explicitly support undefined\n                    this.onGestureEnded();\n                }, timeout);\n            } else {\n                this.sendEvent({\n                    ...ev,\n                    eventType: _hammerjs.default.INPUT_MOVE,\n                    isFinal: false\n                });\n            }\n        }\n    }\n    updateGestureConfig({ shouldActivateOnStart = false, disallowInterruption = false, shouldCancelWhenOutside = true, minDurationMs = Number.NaN, maxDist = Number.NaN, minPointers = 1, maxPointers = 1, ...props }) {\n        return super.updateGestureConfig({\n            shouldActivateOnStart,\n            disallowInterruption,\n            shouldCancelWhenOutside,\n            minDurationMs,\n            maxDist,\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n}\nvar _default = PressGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _IndiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./IndiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass RotationGestureHandler extends _IndiscreteGestureHandler.default {\n    get name() {\n        return \"rotate\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Rotate;\n    }\n    transformNativeEvent({ rotation, velocity, center }) {\n        var _this$initialRotation;\n        return {\n            rotation: (rotation - ((_this$initialRotation = this.initialRotation) !== null && _this$initialRotation !== void 0 ? _this$initialRotation : 0)) * _constants.DEG_RAD,\n            anchorX: center.x,\n            anchorY: center.y,\n            velocity\n        };\n    }\n}\nvar _default = RotationGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsWUFBWUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFL0QsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUMscUdBQWE7QUFFdEMsSUFBSUUsNEJBQTRCSCx1QkFBdUJDLG1CQUFPQSxDQUFDLG1JQUE0QjtBQUUzRixTQUFTRCx1QkFBdUJJLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRU4sU0FBU007SUFBSTtBQUFHO0FBRTlGLE1BQU1FLCtCQUErQkgsMEJBQTBCTCxPQUFPO0lBQ3BFLElBQUlTLE9BQU87UUFDVCxPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxxQkFBcUI7UUFDdkIsT0FBT1QsVUFBVUQsT0FBTyxDQUFDVyxNQUFNO0lBQ2pDO0lBRUFDLHFCQUFxQixFQUNuQkMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLE1BQU0sRUFDUCxFQUFFO1FBQ0QsSUFBSUM7UUFFSixPQUFPO1lBQ0xILFVBQVUsQ0FBQ0EsV0FBWSxFQUFDRyx3QkFBd0IsSUFBSSxDQUFDQyxlQUFlLE1BQU0sUUFBUUQsMEJBQTBCLEtBQUssSUFBSUEsd0JBQXdCLEVBQUMsSUFBS1osV0FBV2MsT0FBTztZQUNyS0MsU0FBU0osT0FBT0ssQ0FBQztZQUNqQkMsU0FBU04sT0FBT08sQ0FBQztZQUNqQlI7UUFDRjtJQUNGO0FBRUY7QUFFQSxJQUFJUyxXQUFXZjtBQUNmVixrQkFBZSxHQUFHeUIsVUFDbEIsa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvUm90YXRpb25HZXN0dXJlSGFuZGxlci5qcz82YTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hhbW1lcmpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVnanMvaGFtbWVyanNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIF9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0luZGlzY3JldGVHZXN0dXJlSGFuZGxlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNsYXNzIFJvdGF0aW9uR2VzdHVyZUhhbmRsZXIgZXh0ZW5kcyBfSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmRlZmF1bHQge1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gJ3JvdGF0ZSc7XG4gIH1cblxuICBnZXQgTmF0aXZlR2VzdHVyZUNsYXNzKCkge1xuICAgIHJldHVybiBfaGFtbWVyanMuZGVmYXVsdC5Sb3RhdGU7XG4gIH1cblxuICB0cmFuc2Zvcm1OYXRpdmVFdmVudCh7XG4gICAgcm90YXRpb24sXG4gICAgdmVsb2NpdHksXG4gICAgY2VudGVyXG4gIH0pIHtcbiAgICB2YXIgX3RoaXMkaW5pdGlhbFJvdGF0aW9uO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdGF0aW9uOiAocm90YXRpb24gLSAoKF90aGlzJGluaXRpYWxSb3RhdGlvbiA9IHRoaXMuaW5pdGlhbFJvdGF0aW9uKSAhPT0gbnVsbCAmJiBfdGhpcyRpbml0aWFsUm90YXRpb24gIT09IHZvaWQgMCA/IF90aGlzJGluaXRpYWxSb3RhdGlvbiA6IDApKSAqIF9jb25zdGFudHMuREVHX1JBRCxcbiAgICAgIGFuY2hvclg6IGNlbnRlci54LFxuICAgICAgYW5jaG9yWTogY2VudGVyLnksXG4gICAgICB2ZWxvY2l0eVxuICAgIH07XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBSb3RhdGlvbkdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfaGFtbWVyanMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJfSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIiwib2JqIiwiX19lc01vZHVsZSIsIlJvdGF0aW9uR2VzdHVyZUhhbmRsZXIiLCJuYW1lIiwiTmF0aXZlR2VzdHVyZUNsYXNzIiwiUm90YXRlIiwidHJhbnNmb3JtTmF0aXZlRXZlbnQiLCJyb3RhdGlvbiIsInZlbG9jaXR5IiwiY2VudGVyIiwiX3RoaXMkaW5pdGlhbFJvdGF0aW9uIiwiaW5pdGlhbFJvdGF0aW9uIiwiREVHX1JBRCIsImFuY2hvclgiLCJ4IiwiYW5jaG9yWSIsInkiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass TapGestureHandler extends _DiscreteGestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"_shouldFireEndEvent\", null);\n        _defineProperty(this, \"_timer\", void 0);\n        _defineProperty(this, \"_multiTapTimer\", void 0);\n        _defineProperty(this, \"onSuccessfulTap\", (ev)=>{\n            if (this._getPendingGestures().length) {\n                this._shouldFireEndEvent = ev;\n                return;\n            }\n            if (ev.eventType === _hammerjs.default.INPUT_END) {\n                this.sendEvent({\n                    ...ev,\n                    eventType: _hammerjs.default.INPUT_MOVE\n                });\n            } // When handler gets activated it will turn into State.END immediately.\n            this.sendEvent({\n                ...ev,\n                isFinal: true\n            });\n            this.onGestureEnded(ev);\n        });\n    }\n    // TODO unused?\n    get name() {\n        return \"tap\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Tap;\n    }\n    get maxDelayMs() {\n        // @ts-ignore TODO(TS) trace down config\n        return (0, _utils.isnan)(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n    simulateCancelEvent(inputData) {\n        if (this.isGestureRunning) {\n            this.cancelEvent(inputData);\n        }\n    }\n    onGestureActivated(ev) {\n        if (this.isGestureRunning) {\n            this.onSuccessfulTap(ev);\n        }\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev); // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n        if (!this.hasGestureFailed && !this.isGestureRunning && // Prevent multi-pointer events from misfiring.\n        !ev.isFinal) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n        if (ev.isFinal && ev.maxPointers > 1) {\n            setTimeout(()=>{\n                // Handle case where one finger presses slightly\n                // after the first finger on a multi-tap event\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        }\n        if (this.hasGestureFailed) {\n            return;\n        } // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            // Handle case where one finger presses slightly\n            // after the first finger on a multi-tap event\n            if (ev.maxPointers > 1) {\n                setTimeout(()=>{\n                    if (this.isGestureRunning) {\n                        this.cancelEvent(ev);\n                    }\n                });\n            } // Clear last timer\n            clearTimeout(this._timer); // Create time out for multi-taps.\n            this._timer = setTimeout(()=>{\n                this.hasGestureFailed = true;\n                this.cancelEvent(ev);\n            }, this.maxDelayMs);\n        } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            event: this.name,\n            // @ts-ignore TODO(TS) trace down config\n            taps: (0, _utils.isnan)(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n            interval: this.maxDelayMs,\n            time: (0, _utils.isnan)(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n        };\n    }\n    updateGestureConfig({ shouldCancelWhenOutside = true, maxDeltaX = Number.NaN, maxDeltaY = Number.NaN, numberOfTaps = 1, minDurationMs = 525, maxDelayMs = Number.NaN, // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN, maxDist = 2, minPointers = 1, maxPointers = 1, ...props }) {\n        return super.updateGestureConfig({\n            shouldCancelWhenOutside,\n            numberOfTaps,\n            maxDeltaX,\n            maxDeltaY,\n            minDurationMs,\n            maxDelayMs,\n            maxDist,\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n    onGestureEnded(...props) {\n        clearTimeout(this._timer); // @ts-ignore TODO(TS) check how onGestureEnded works\n        super.onGestureEnded(...props);\n    }\n    onWaitingEnded(_gesture) {\n        if (this._shouldFireEndEvent) {\n            this.onSuccessfulTap(this._shouldFireEndEvent);\n            this._shouldFireEndEvent = null;\n        }\n    }\n}\nvar _default = TapGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HammerDirectionNames = exports.HammerInputNames = exports.DirectionMap = exports.Direction = exports.EventMap = exports.DEG_RAD = exports.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = exports.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = exports.CONTENT_TOUCHES_QUICK_TAP_END_DELAY = exports.CONTENT_TOUCHES_DELAY = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst CONTENT_TOUCHES_DELAY = 240;\nexports.CONTENT_TOUCHES_DELAY = CONTENT_TOUCHES_DELAY;\nconst CONTENT_TOUCHES_QUICK_TAP_END_DELAY = 50;\nexports.CONTENT_TOUCHES_QUICK_TAP_END_DELAY = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\nconst MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = 0.1;\nexports.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD;\nconst MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = 7;\nexports.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD;\nconst DEG_RAD = Math.PI / 180; // Map Hammer values to RNGH\nexports.DEG_RAD = DEG_RAD;\nconst EventMap = {\n    [_hammerjs.default.INPUT_START]: _State.State.BEGAN,\n    [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n    [_hammerjs.default.INPUT_END]: _State.State.END,\n    [_hammerjs.default.INPUT_CANCEL]: _State.State.FAILED\n};\nexports.EventMap = EventMap;\nconst Direction = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n};\nexports.Direction = Direction;\nconst DirectionMap = {\n    [_hammerjs.default.DIRECTION_RIGHT]: Direction.RIGHT,\n    [_hammerjs.default.DIRECTION_LEFT]: Direction.LEFT,\n    [_hammerjs.default.DIRECTION_UP]: Direction.UP,\n    [_hammerjs.default.DIRECTION_DOWN]: Direction.DOWN\n};\nexports.DirectionMap = DirectionMap;\nconst HammerInputNames = {\n    [_hammerjs.default.INPUT_START]: \"START\",\n    [_hammerjs.default.INPUT_MOVE]: \"MOVE\",\n    [_hammerjs.default.INPUT_END]: \"END\",\n    [_hammerjs.default.INPUT_CANCEL]: \"CANCEL\"\n};\nexports.HammerInputNames = HammerInputNames;\nconst HammerDirectionNames = {\n    [_hammerjs.default.DIRECTION_HORIZONTAL]: \"HORIZONTAL\",\n    [_hammerjs.default.DIRECTION_UP]: \"UP\",\n    [_hammerjs.default.DIRECTION_DOWN]: \"DOWN\",\n    [_hammerjs.default.DIRECTION_VERTICAL]: \"VERTICAL\",\n    [_hammerjs.default.DIRECTION_NONE]: \"NONE\",\n    [_hammerjs.default.DIRECTION_ALL]: \"ALL\",\n    [_hammerjs.default.DIRECTION_RIGHT]: \"RIGHT\",\n    [_hammerjs.default.DIRECTION_LEFT]: \"LEFT\"\n};\nexports.HammerDirectionNames = HammerDirectionNames; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDRCQUE0QixHQUFHQSx3QkFBd0IsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxnQkFBZ0IsR0FBR0EsZUFBZSxHQUFHQSwrQ0FBK0MsR0FBR0EsNENBQTRDLEdBQUdBLDJDQUEyQyxHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBRTlULElBQUlZLFlBQVlDLHVCQUF1QkMsbUJBQU9BLENBQUMsc0NBQWdCO0FBRS9ELElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwsd0JBQXdCO0FBQzlCWCw2QkFBNkIsR0FBR1c7QUFDaEMsTUFBTUQsc0NBQXNDO0FBQzVDViwyQ0FBMkMsR0FBR1U7QUFDOUMsTUFBTUQsdUNBQXVDO0FBQzdDVCw0Q0FBNEMsR0FBR1M7QUFDL0MsTUFBTUQsMENBQTBDO0FBQ2hEUiwrQ0FBK0MsR0FBR1E7QUFDbEQsTUFBTUQsVUFBVVksS0FBS0MsRUFBRSxHQUFHLEtBQUssNEJBQTRCO0FBRTNEcEIsZUFBZSxHQUFHTztBQUNsQixNQUFNRCxXQUFXO0lBQ2YsQ0FBQ00sVUFBVU0sT0FBTyxDQUFDRyxXQUFXLENBQUMsRUFBRU4sT0FBT08sS0FBSyxDQUFDQyxLQUFLO0lBQ25ELENBQUNYLFVBQVVNLE9BQU8sQ0FBQ00sVUFBVSxDQUFDLEVBQUVULE9BQU9PLEtBQUssQ0FBQ0csTUFBTTtJQUNuRCxDQUFDYixVQUFVTSxPQUFPLENBQUNRLFNBQVMsQ0FBQyxFQUFFWCxPQUFPTyxLQUFLLENBQUNLLEdBQUc7SUFDL0MsQ0FBQ2YsVUFBVU0sT0FBTyxDQUFDVSxZQUFZLENBQUMsRUFBRWIsT0FBT08sS0FBSyxDQUFDTyxNQUFNO0FBQ3ZEO0FBQ0E3QixnQkFBZ0IsR0FBR007QUFDbkIsTUFBTUQsWUFBWTtJQUNoQnlCLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxJQUFJO0lBQ0pDLE1BQU07QUFDUjtBQUNBakMsaUJBQWlCLEdBQUdLO0FBQ3BCLE1BQU1ELGVBQWU7SUFDbkIsQ0FBQ1EsVUFBVU0sT0FBTyxDQUFDZ0IsZUFBZSxDQUFDLEVBQUU3QixVQUFVeUIsS0FBSztJQUNwRCxDQUFDbEIsVUFBVU0sT0FBTyxDQUFDaUIsY0FBYyxDQUFDLEVBQUU5QixVQUFVMEIsSUFBSTtJQUNsRCxDQUFDbkIsVUFBVU0sT0FBTyxDQUFDa0IsWUFBWSxDQUFDLEVBQUUvQixVQUFVMkIsRUFBRTtJQUM5QyxDQUFDcEIsVUFBVU0sT0FBTyxDQUFDbUIsY0FBYyxDQUFDLEVBQUVoQyxVQUFVNEIsSUFBSTtBQUNwRDtBQUNBakMsb0JBQW9CLEdBQUdJO0FBQ3ZCLE1BQU1ELG1CQUFtQjtJQUN2QixDQUFDUyxVQUFVTSxPQUFPLENBQUNHLFdBQVcsQ0FBQyxFQUFFO0lBQ2pDLENBQUNULFVBQVVNLE9BQU8sQ0FBQ00sVUFBVSxDQUFDLEVBQUU7SUFDaEMsQ0FBQ1osVUFBVU0sT0FBTyxDQUFDUSxTQUFTLENBQUMsRUFBRTtJQUMvQixDQUFDZCxVQUFVTSxPQUFPLENBQUNVLFlBQVksQ0FBQyxFQUFFO0FBQ3BDO0FBQ0E1Qix3QkFBd0IsR0FBR0c7QUFDM0IsTUFBTUQsdUJBQXVCO0lBQzNCLENBQUNVLFVBQVVNLE9BQU8sQ0FBQ29CLG9CQUFvQixDQUFDLEVBQUU7SUFDMUMsQ0FBQzFCLFVBQVVNLE9BQU8sQ0FBQ2tCLFlBQVksQ0FBQyxFQUFFO0lBQ2xDLENBQUN4QixVQUFVTSxPQUFPLENBQUNtQixjQUFjLENBQUMsRUFBRTtJQUNwQyxDQUFDekIsVUFBVU0sT0FBTyxDQUFDcUIsa0JBQWtCLENBQUMsRUFBRTtJQUN4QyxDQUFDM0IsVUFBVU0sT0FBTyxDQUFDc0IsY0FBYyxDQUFDLEVBQUU7SUFDcEMsQ0FBQzVCLFVBQVVNLE9BQU8sQ0FBQ3VCLGFBQWEsQ0FBQyxFQUFFO0lBQ25DLENBQUM3QixVQUFVTSxPQUFPLENBQUNnQixlQUFlLENBQUMsRUFBRTtJQUNyQyxDQUFDdEIsVUFBVU0sT0FBTyxDQUFDaUIsY0FBYyxDQUFDLEVBQUU7QUFDdEM7QUFDQW5DLDRCQUE0QixHQUFHRSxzQkFDL0IscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9iaWxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvY29uc3RhbnRzLmpzPzdjZGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkhhbW1lckRpcmVjdGlvbk5hbWVzID0gZXhwb3J0cy5IYW1tZXJJbnB1dE5hbWVzID0gZXhwb3J0cy5EaXJlY3Rpb25NYXAgPSBleHBvcnRzLkRpcmVjdGlvbiA9IGV4cG9ydHMuRXZlbnRNYXAgPSBleHBvcnRzLkRFR19SQUQgPSBleHBvcnRzLk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1JPVEFUSU9OX1RIUkVTSE9MRCA9IGV4cG9ydHMuTVVMVElfRklOR0VSX1BBTl9NQVhfUElOQ0hfVEhSRVNIT0xEID0gZXhwb3J0cy5DT05URU5UX1RPVUNIRVNfUVVJQ0tfVEFQX0VORF9ERUxBWSA9IGV4cG9ydHMuQ09OVEVOVF9UT1VDSEVTX0RFTEFZID0gdm9pZCAwO1xuXG52YXIgX2hhbW1lcmpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVnanMvaGFtbWVyanNcIikpO1xuXG52YXIgX1N0YXRlID0gcmVxdWlyZShcIi4uL1N0YXRlXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBDT05URU5UX1RPVUNIRVNfREVMQVkgPSAyNDA7XG5leHBvcnRzLkNPTlRFTlRfVE9VQ0hFU19ERUxBWSA9IENPTlRFTlRfVE9VQ0hFU19ERUxBWTtcbmNvbnN0IENPTlRFTlRfVE9VQ0hFU19RVUlDS19UQVBfRU5EX0RFTEFZID0gNTA7XG5leHBvcnRzLkNPTlRFTlRfVE9VQ0hFU19RVUlDS19UQVBfRU5EX0RFTEFZID0gQ09OVEVOVF9UT1VDSEVTX1FVSUNLX1RBUF9FTkRfREVMQVk7XG5jb25zdCBNVUxUSV9GSU5HRVJfUEFOX01BWF9QSU5DSF9USFJFU0hPTEQgPSAwLjE7XG5leHBvcnRzLk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1BJTkNIX1RIUkVTSE9MRCA9IE1VTFRJX0ZJTkdFUl9QQU5fTUFYX1BJTkNIX1RIUkVTSE9MRDtcbmNvbnN0IE1VTFRJX0ZJTkdFUl9QQU5fTUFYX1JPVEFUSU9OX1RIUkVTSE9MRCA9IDc7XG5leHBvcnRzLk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1JPVEFUSU9OX1RIUkVTSE9MRCA9IE1VTFRJX0ZJTkdFUl9QQU5fTUFYX1JPVEFUSU9OX1RIUkVTSE9MRDtcbmNvbnN0IERFR19SQUQgPSBNYXRoLlBJIC8gMTgwOyAvLyBNYXAgSGFtbWVyIHZhbHVlcyB0byBSTkdIXG5cbmV4cG9ydHMuREVHX1JBRCA9IERFR19SQUQ7XG5jb25zdCBFdmVudE1hcCA9IHtcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX1NUQVJUXTogX1N0YXRlLlN0YXRlLkJFR0FOLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfTU9WRV06IF9TdGF0ZS5TdGF0ZS5BQ1RJVkUsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9FTkRdOiBfU3RhdGUuU3RhdGUuRU5ELFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfQ0FOQ0VMXTogX1N0YXRlLlN0YXRlLkZBSUxFRFxufTtcbmV4cG9ydHMuRXZlbnRNYXAgPSBFdmVudE1hcDtcbmNvbnN0IERpcmVjdGlvbiA9IHtcbiAgUklHSFQ6IDEsXG4gIExFRlQ6IDIsXG4gIFVQOiA0LFxuICBET1dOOiA4XG59O1xuZXhwb3J0cy5EaXJlY3Rpb24gPSBEaXJlY3Rpb247XG5jb25zdCBEaXJlY3Rpb25NYXAgPSB7XG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fUklHSFRdOiBEaXJlY3Rpb24uUklHSFQsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fTEVGVF06IERpcmVjdGlvbi5MRUZULFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX1VQXTogRGlyZWN0aW9uLlVQLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0RPV05dOiBEaXJlY3Rpb24uRE9XTlxufTtcbmV4cG9ydHMuRGlyZWN0aW9uTWFwID0gRGlyZWN0aW9uTWFwO1xuY29uc3QgSGFtbWVySW5wdXROYW1lcyA9IHtcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX1NUQVJUXTogJ1NUQVJUJyxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX01PVkVdOiAnTU9WRScsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9FTkRdOiAnRU5EJyxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX0NBTkNFTF06ICdDQU5DRUwnXG59O1xuZXhwb3J0cy5IYW1tZXJJbnB1dE5hbWVzID0gSGFtbWVySW5wdXROYW1lcztcbmNvbnN0IEhhbW1lckRpcmVjdGlvbk5hbWVzID0ge1xuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0hPUklaT05UQUxdOiAnSE9SSVpPTlRBTCcsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fVVBdOiAnVVAnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0RPV05dOiAnRE9XTicsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fVkVSVElDQUxdOiAnVkVSVElDQUwnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX05PTkVdOiAnTk9ORScsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fQUxMXTogJ0FMTCcsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5ESVJFQ1RJT05fUklHSFRdOiAnUklHSFQnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0xFRlRdOiAnTEVGVCdcbn07XG5leHBvcnRzLkhhbW1lckRpcmVjdGlvbk5hbWVzID0gSGFtbWVyRGlyZWN0aW9uTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSGFtbWVyRGlyZWN0aW9uTmFtZXMiLCJIYW1tZXJJbnB1dE5hbWVzIiwiRGlyZWN0aW9uTWFwIiwiRGlyZWN0aW9uIiwiRXZlbnRNYXAiLCJERUdfUkFEIiwiTVVMVElfRklOR0VSX1BBTl9NQVhfUk9UQVRJT05fVEhSRVNIT0xEIiwiTVVMVElfRklOR0VSX1BBTl9NQVhfUElOQ0hfVEhSRVNIT0xEIiwiQ09OVEVOVF9UT1VDSEVTX1FVSUNLX1RBUF9FTkRfREVMQVkiLCJDT05URU5UX1RPVUNIRVNfREVMQVkiLCJfaGFtbWVyanMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9TdGF0ZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiTWF0aCIsIlBJIiwiSU5QVVRfU1RBUlQiLCJTdGF0ZSIsIkJFR0FOIiwiSU5QVVRfTU9WRSIsIkFDVElWRSIsIklOUFVUX0VORCIsIkVORCIsIklOUFVUX0NBTkNFTCIsIkZBSUxFRCIsIlJJR0hUIiwiTEVGVCIsIlVQIiwiRE9XTiIsIkRJUkVDVElPTl9SSUdIVCIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1VQIiwiRElSRUNUSU9OX0RPV04iLCJESVJFQ1RJT05fSE9SSVpPTlRBTCIsIkRJUkVDVElPTl9WRVJUSUNBTCIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0FMTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fireAfterInterval = fireAfterInterval;\nexports.TEST_MAX_IF_NOT_NAN = exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.isValidNumber = exports.isnan = void 0;\n// TODO(TS) remove if not necessary after rewrite\nconst isnan = (v)=>Number.isNaN(v); // TODO(TS) remove if not necessary after rewrite\nexports.isnan = isnan;\nconst isValidNumber = (v)=>typeof v === \"number\" && !Number.isNaN(v);\nexports.isValidNumber = isValidNumber;\nconst TEST_MIN_IF_NOT_NAN = (value, limit)=>!isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\nexports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\nconst VEC_LEN_SQ = ({ x = 0, y = 0 } = {})=>x * x + y * y;\nexports.VEC_LEN_SQ = VEC_LEN_SQ;\nconst TEST_MAX_IF_NOT_NAN = (value, max)=>!isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\nexports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\nfunction fireAfterInterval(method, interval) {\n    if (!interval) {\n        method();\n        return null;\n    }\n    return setTimeout(()=>method(), interval);\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUdFO0FBQzVCRiwyQkFBMkIsR0FBR0Esa0JBQWtCLEdBQUdBLDJCQUEyQixHQUFHQSxxQkFBcUIsR0FBR0EsYUFBYSxHQUFHLEtBQUs7QUFFOUgsaURBQWlEO0FBQ2pELE1BQU1PLFFBQVFDLENBQUFBLElBQUtDLE9BQU9DLEtBQUssQ0FBQ0YsSUFBSSxpREFBaUQ7QUFHckZSLGFBQWEsR0FBR087QUFFaEIsTUFBTUQsZ0JBQWdCRSxDQUFBQSxJQUFLLE9BQU9BLE1BQU0sWUFBWSxDQUFDQyxPQUFPQyxLQUFLLENBQUNGO0FBRWxFUixxQkFBcUIsR0FBR007QUFFeEIsTUFBTUQsc0JBQXNCLENBQUNKLE9BQU9VLFFBQVUsQ0FBQ0osTUFBTUksVUFBV0EsQ0FBQUEsUUFBUSxLQUFLVixTQUFTVSxTQUFTQSxTQUFTLEtBQUtWLFNBQVNVLEtBQUk7QUFFMUhYLDJCQUEyQixHQUFHSztBQUU5QixNQUFNRCxhQUFhLENBQUMsRUFDbEJRLElBQUksQ0FBQyxFQUNMQyxJQUFJLENBQUMsRUFDTixHQUFHLENBQUMsQ0FBQyxHQUFLRCxJQUFJQSxJQUFJQyxJQUFJQTtBQUV2QmIsa0JBQWtCLEdBQUdJO0FBRXJCLE1BQU1ELHNCQUFzQixDQUFDRixPQUFPYSxNQUFRLENBQUNQLE1BQU1PLFFBQVNBLENBQUFBLE1BQU0sS0FBS2IsUUFBUWEsT0FBT0EsT0FBTyxLQUFLYixRQUFRYSxHQUFFO0FBRTVHZCwyQkFBMkIsR0FBR0c7QUFFOUIsU0FBU0Qsa0JBQWtCYSxNQUFNLEVBQUVDLFFBQVE7SUFDekMsSUFBSSxDQUFDQSxVQUFVO1FBQ2JEO1FBQ0EsT0FBTztJQUNUO0lBRUEsT0FBT0UsV0FBVyxJQUFNRixVQUFVQztBQUNwQyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vYmlsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL3V0aWxzLmpzP2Y1ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpcmVBZnRlckludGVydmFsID0gZmlyZUFmdGVySW50ZXJ2YWw7XG5leHBvcnRzLlRFU1RfTUFYX0lGX05PVF9OQU4gPSBleHBvcnRzLlZFQ19MRU5fU1EgPSBleHBvcnRzLlRFU1RfTUlOX0lGX05PVF9OQU4gPSBleHBvcnRzLmlzVmFsaWROdW1iZXIgPSBleHBvcnRzLmlzbmFuID0gdm9pZCAwO1xuXG4vLyBUT0RPKFRTKSByZW1vdmUgaWYgbm90IG5lY2Vzc2FyeSBhZnRlciByZXdyaXRlXG5jb25zdCBpc25hbiA9IHYgPT4gTnVtYmVyLmlzTmFOKHYpOyAvLyBUT0RPKFRTKSByZW1vdmUgaWYgbm90IG5lY2Vzc2FyeSBhZnRlciByZXdyaXRlXG5cblxuZXhwb3J0cy5pc25hbiA9IGlzbmFuO1xuXG5jb25zdCBpc1ZhbGlkTnVtYmVyID0gdiA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2KTtcblxuZXhwb3J0cy5pc1ZhbGlkTnVtYmVyID0gaXNWYWxpZE51bWJlcjtcblxuY29uc3QgVEVTVF9NSU5fSUZfTk9UX05BTiA9ICh2YWx1ZSwgbGltaXQpID0+ICFpc25hbihsaW1pdCkgJiYgKGxpbWl0IDwgMCAmJiB2YWx1ZSA8PSBsaW1pdCB8fCBsaW1pdCA+PSAwICYmIHZhbHVlID49IGxpbWl0KTtcblxuZXhwb3J0cy5URVNUX01JTl9JRl9OT1RfTkFOID0gVEVTVF9NSU5fSUZfTk9UX05BTjtcblxuY29uc3QgVkVDX0xFTl9TUSA9ICh7XG4gIHggPSAwLFxuICB5ID0gMFxufSA9IHt9KSA9PiB4ICogeCArIHkgKiB5O1xuXG5leHBvcnRzLlZFQ19MRU5fU1EgPSBWRUNfTEVOX1NRO1xuXG5jb25zdCBURVNUX01BWF9JRl9OT1RfTkFOID0gKHZhbHVlLCBtYXgpID0+ICFpc25hbihtYXgpICYmIChtYXggPCAwICYmIHZhbHVlIDwgbWF4IHx8IG1heCA+PSAwICYmIHZhbHVlID4gbWF4KTtcblxuZXhwb3J0cy5URVNUX01BWF9JRl9OT1RfTkFOID0gVEVTVF9NQVhfSUZfTk9UX05BTjtcblxuZnVuY3Rpb24gZmlyZUFmdGVySW50ZXJ2YWwobWV0aG9kLCBpbnRlcnZhbCkge1xuICBpZiAoIWludGVydmFsKSB7XG4gICAgbWV0aG9kKCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gc2V0VGltZW91dCgoKSA9PiBtZXRob2QoKSwgaW50ZXJ2YWwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmlyZUFmdGVySW50ZXJ2YWwiLCJURVNUX01BWF9JRl9OT1RfTkFOIiwiVkVDX0xFTl9TUSIsIlRFU1RfTUlOX0lGX05PVF9OQU4iLCJpc1ZhbGlkTnVtYmVyIiwiaXNuYW4iLCJ2IiwiTnVtYmVyIiwiaXNOYU4iLCJsaW1pdCIsIngiLCJ5IiwibWF4IiwibWV0aG9kIiwiaW50ZXJ2YWwiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\n");

/***/ })

};
;